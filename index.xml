<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>i-cooltea的博客</title>
    <link>http://i-cooltea.github.io/</link>
    <description>Recent content on i-cooltea的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 15 Jan 2020 02:28:00 +0000</lastBuildDate>
    
	<atom:link href="http://i-cooltea.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>软件开发项目风险管理</title>
      <link>http://i-cooltea.github.io/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 15 Jan 2020 02:28:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/</guid>
      <description>软件开发是一项高风险的活动，在项目开发过程的任何一个阶段都可能存在风险。采取积极的风险管理方式，可以使项目进程更加平稳，可以获得很高的跟踪和控制项目的能力，可以规避、转移风险，或缓解风险带来的不利影响。风险管理是对项目风险进行识别、分析、应对和监控的过程，是项目管理中很重要的管理活动，有效的实施软件风险管理是软件项目开发工作顺利完成的保证。 风险管理的达成必须包括三个要素：
1 .在项目开发计划中必须制定风险管理计划； 2 .在项目预算中必须包含解决风险所需的经费； 3 .评估风险时，风险的影响也必须纳入项目计划中。  下面就软件开发过程中经常发生的风险，谈谈我们采取的预防措施。
 1.需求不明确 需求不明确是软件开发过程中经常可能遇到的问题，这类问题往往表现在需求范围未界定、需求未细化、需求描述不清楚、需求遗漏、需求互相矛盾等多个方面。在软件开发过程的生命周期各阶段中，需求不明确所造成的浪费是最大的，必须尽早尽可能解决。确定用户需求是件非常困难的事情，我们常常从以下几个方面着手处理需求不明确问题：
(1) 让用户参与开发 提供一个协作开发环境，让用户参与开发过程。如果条件不允许，至少应该在每次迭代的需求分析和系统测试阶段，让客户能够参与开发。 在选择参与开发过程的用户时，一方面，要尽可能争取精通业务或计算机技术的用户参与。另一方面，如果开发的产品要在不同规模、不同类型的企业应用，应该选择具有代表性的用户参与。仅仅让用户参与是不够的，应该采取一定的激励措施，提高用户参与的积极性。
(2) 开发用户界面原型 用户通常不善于精确描述自己的业务需求，系统分析员需要借助白板、白纸等沟通方式，帮助用户清楚表述需求。然后，开发一个用户界面原型，以便用户确认需求。用户界面原型的作用仅仅是收集用户需求，不应该再作它用，也不要给用户造成系统快要实现的错觉。
(3) 需求讨论会议 对于用户分布广、用户量大的项目，要全面收集用户需求，往往很困难，通常采取需求研计会议方式进行需求确认。通过在会议前几周调查各地、各部门用户需求意见，然后集中各地或各部门的用户代表，举办一次需求研讨会，通过会议方式收集需求。本方法适合于具有一定信息系统使用经验的用户。
(4) 强化需求分析与评审 首先，需求分析是项目成功的基础，需要引起足够的重视，并分配充足的时间和人力，要让有经验的系统分析员负责，切忌让项目新手或程序员负责。其次，要进行需求评审，尽可能让用户参与需求评审，不要让需求评审流于行式。第三，也是最重要的一点，通过评审的需求规格说明书，要让用户方签字，并作为项目合同的附件，对双方都具有约束力。在公司内部要将通过评审的需求规格说明书，纳入配置管理。
2.项目缺少可见性 当一个项目经理或一名开发者说已经完成了80%的任务，您必须保持审慎的态度。因为剩下的20%可能还需要80%的时间，甚至永远都不能完成。软件开发项目，往往在项目进度和软件质量方面缺少可见性，项目越缺少可见性，项目就越难以控制，项目就越有可能失败。我们可以通过迭代开发、技术评审、持续集成来增强项目的可见性。
(1) 迭代开发 采用迭代的开发模型，将产品的交付过程分为多个阶段，按照功能递增式交付。以下是一些典型的迭代：
一次简短的先期迭代，以建立规模和前景并确定商业理由；
一次精化迭代，其间将为稳定的构架划定基线；
一次构建迭代，其间将实现用例并充实构架；
几次产品化迭代，将产品转移到用户群。
每次迭代，都要充分接收用户的评审意见，以便为自我纠正。渐近式的功能交付，有利于降低开发人员的压力，增加用户的满意度，有利于增强项目的可见性，是最好的进展报告。
(2) 技术评审 技术评审是确保软件质量的重要环节，技术评审包括代码走查、会议评审和同行专家评审。代码走审可以是开发人员之间的交叉审查，或者是高级开发人员对普通开发人员的审查；会议评审一般应至少每两周进行一次，每次评审时间不宜太长；同行专家评审包括技术和业务两个方面的专家，经常性地让精通业务的用户专家参与项目评审，是项目成功的重要保证。
另外，充分利用质量审查的工具软件，也有利于提高代码质量。例如：在Eclipse开发环境中，可以集成Findbug、Checkstyle、PMD插件检查代码编写质量。
(3) 持续集成 持续集成能够把最终的一次大规模的集成调试过程分散到项目开发时间表的每一周、每一天、甚至每个小时。让项目中的各个人员都能够随时掌握当前的整体进度，并迅速发现集成过程中出现的问题并进行解决。
开发小组应制定持续集成的制度，一般情况下每日构建一次，可以利用Ant等构建工具进行Java应用程序的构建。小组成员应在每个功能开发完成后，及时向版本控制系统（如CVS）提交代码，而且不应该向版本控制系统提交有问题（编译通不过）的代码。
每日构建、持续集成，让项目进度跟踪工作更加容易。当项目小组每天重新编译系统时，已完成与未完成的功能清楚可见，小组成员能够简单地从软件的表现知道距离整体完成还有多远。
3.新技术引入 技术创新是一种具有探索性、创造性的技术经济活动。在开发过程中引入新技术，不可避免地要遇到各种风险。通过T形软件开发、充分论证、多阶段评审、同行经验等措施可降低新技术风险。
(1)T形软件开发 在项目开发早期，开发小组应该建立系统的架构，解决关键技术难题、开发系统的基础构件，并对系统所需要应用的技术做深度探索。例如：基于JavaEE5构建全国联网售票系统，涉及到分布式事务处理、海量数据存储、异构平台互连等关键问题，应该优先处理这些问题；对开发所涉及到的EJB3、JSF、JBoss Seam、Eclipse RCP等技术，要做深度探索。越是技术复杂度高的项目，就越应该早地处理技术难题。如果在项目开发的中期或后期才发现架构有问题或是关键技术难题不能解决，则为时已晚。
(2) 充分论证 新技术开发是探索性很强的工作，潜在着许多失败的风险。在可行性分析阶段，要广泛搜集相关信息，设计多种可行方案，进行充分论证。在制定决策时，情报的数量和质量致关重要。掌握的信息越多、越准确，才能作出正确的的决策，项目失败的风险也就相对减少；反之，承担的风险就会增大。
(3) 同行经验 针对新技术，由于没有经验可借鉴，因此在探索过程中要充分利用互联网，通过搜索同行经验，往往事半功倍。要充分利用世界日益平坦化的优势，对于不能尽快解决的问题，可以先放一放，可能过不了几天，网上就有相类似问题的解决方案了。
4.技术兼容性风险 硬件产品之间、系统软件（操作系统、中间件、数据库管理系统）与主机设备之间、系统软件之间、应用软件与系统软件之间以及应用软件之间，都可能存在兼容性问题。往往系统集成的项目越复杂，兼容性问题就越有可能存在。
(1) 设计先行 在做系统的总体设计方案时，务必把好相关产品的选型关，确保网络、主机、系统软件与应用软件之间不要存在较大的技术兼容性问题。在网络平台建设方案中，明确相关设备的技术参数和配置要求。
(2) 售前产品测试 在做项目招投标工作时，要求投标方在售前提供产品兼容性测试，以避免在项目实施过程中才暴露技术兼容性问题。涉及应用软件开发的集成项目，要在开发工作的早期，做技术兼容性测试，以避免在项目开发后期才暴露技术兼容性问题。
5.性能问题 由于先期设计不足，性能问题往往在系统切换或新系统使用一段时间后暴露。出现性能问题往往要进行大量的优化工作，甚至局部的或全面的重新设计。无论是用户还是开发者，谁都不希望出现性能问题。
(1) 性能规划 在系统设计时，应做好前期做性能规划，对可能出现性能问题的环节做到充足的估计。在做数据库设计时，应争取DBA参与。 另外，在技术方法方面，尽可能采取一些性能优化模式，如DTO、AJAX、延迟加载等，尽可能在开发过程中解决了性能问题。不至于到了项目后期才解决性能问题，既费钱又费时。</description>
    </item>
    
    <item>
      <title>CentOS 7下设置Docker代理（Linux下Systemd服务的环境变量配置）</title>
      <link>http://i-cooltea.github.io/posts/centos-7%E4%B8%8B%E8%AE%BE%E7%BD%AEdocker%E4%BB%A3%E7%90%86linux%E4%B8%8Bsystemd%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 30 Dec 2019 09:02:50 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/centos-7%E4%B8%8B%E8%AE%BE%E7%BD%AEdocker%E4%BB%A3%E7%90%86linux%E4%B8%8Bsystemd%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</guid>
      <description> Docker守护程序使用HTTP_PROXY，HTTPS_PROXY以及NO_PROXY环境变量在其启动环境来配置HTTP或HTTPS代理的行为。无法使用daemon.json文件配置这些环境变量。
此示例将覆盖默认docker.service文件。
在设置中，需要在Docker systemd服务文件中添加此配置
如果使用HTTP代理服务器时，将为docker服务创建systemd插件目录：
mkdir -p /etc/systemd/system/docker.service.d  创建一个名为的文件/etc/systemd/system/docker.service.d/http-proxy.conf，添加HTTP_PROXY环境变量：
[Service] Environment=&#34;HTTP_PROXY=http://proxy.example.com:80/&#34;  或者，如果使用HTTPS代理服务器，那么再创建一个名为/etc/systemd/system/docker.service.d/https-proxy.conf&amp;nbsp;添加HTTPS_PROXY环境变量&amp;nbsp;：
[Service] Environment=&#34;HTTPS_PROXY=https://proxy.example.com:443/&#34;  &amp;nbsp;
为Docker配置不代理的地址时，可以通过NO_PROXY环境变量指定它们，比如HTTP代理服务器的配置：
[Service] Environment=&#34;HTTP_PROXY=http://proxy.example.com:80/&#34; &#34;NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com&#34;  或者，HTTPS代理服务器的配置：
[Service] Environment=&#34;HTTPS_PROXY=https://proxy.example.com:443/&#34; &#34;NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com&#34;  &amp;nbsp;
重新读取服务的配置文件：
systemctl daemon-reload  &amp;nbsp;
重启Docker：
systemctl restart docker  &amp;nbsp;
验证是否已加载配置：
systemctl show --property=Environment docker  &amp;nbsp;
参考：
https://docs.docker.com/config/daemon/systemd/#httphttps-proxy
    &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  </description>
    </item>
    
    <item>
      <title>Linux 下CentOS和Ubuntu使用SSR代理的方法</title>
      <link>http://i-cooltea.github.io/posts/linux-%E4%B8%8Bcentos%E5%92%8Cubuntu%E4%BD%BF%E7%94%A8ssr%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 30 Dec 2019 02:28:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux-%E4%B8%8Bcentos%E5%92%8Cubuntu%E4%BD%BF%E7%94%A8ssr%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description> ssr链接转换工具
SSR代理服务： SSR 下载： 需要本地git 环境 yum install -y git  如果有就不需要了 git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ # 脚本文件 mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr  安装配置： 安装命令 ssr install
# 配置命令【具体参数在里面修改即可】 ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json # 启动/关闭 ssr start ssr stop # 卸载SSR： ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr本地监听服务已经配置完成，在填写的过程中，要注意你的本地监听地址和 监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。  </description>
    </item>
    
    <item>
      <title>要事第一与角色选择</title>
      <link>http://i-cooltea.github.io/posts/%E8%A6%81%E4%BA%8B%E7%AC%AC%E4%B8%80%E4%B8%8E%E8%A7%92%E8%89%B2%E9%80%89%E6%8B%A9/</link>
      <pubDate>Tue, 19 Nov 2019 13:32:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E8%A6%81%E4%BA%8B%E7%AC%AC%E4%B8%80%E4%B8%8E%E8%A7%92%E8%89%B2%E9%80%89%E6%8B%A9/</guid>
      <description>最终还是要选择
我们每天都会面临各种各样的选择，选择的过程会比较痛苦，也会很纠结。

遵从自己的一个选择，就好像对不起另外一个我。


计划做三件事，到最后却发现自己的精力只能做一件，另外两件事没有完成，就觉得自己是个执行力不强的人。


有时候会这山望着那山高，当前的事情塌不下心来，却想着其他的事情。


每天都感觉很纠结。

纠结这个词是谁发明的？

！@#￥%……&amp;amp;*（）——+%……&amp;amp;*（）#￥%……&amp;amp;@#￥%……&amp;amp;*#￥%……&amp;amp;*（……&amp;amp;*（）

史蒂芬柯维在《高效能人士的七个习惯》里提到的四象限理论，基本上讲时间管理都会提到，行为准则也非常明确，就是每天完成最重要的事情Most Important Things，关注第二象限“重要但是不紧急的事情”，否则我们会成为救火队员，每天都要处理那些“重要而且紧急的事情”。这个道理大家基本上都明白，但是有一个问题，每个人的答案不一样，那就是：什么是最重要的事情？



我曾经在企业内训中做过这样一个调查，让大家列出自己所面对的各种杂事。其中有一件：“给孩子开家长会”，我问大家，大家认为这件事情是重要的事情，还是不重要的事情。大家举手投票，现场投票比例，一半一半。

这个其实很好理解，站在不同的角色，你看待问题的重要性就不同。我以前的公司年轻人居多，大家干活很拼命，那时候感觉领导很喜欢招聘年轻点没成家的员工，觉得好管理。年龄稍大一点的女员工，领导会觉得家里面事儿太多，今天让加个班，她会说要给孩子开家长会，或者是孩子生病了要早点回去看。那时候看领导的眼神就是那种很不爽的样子。但是换个角度，你是孩子的父母，今天孩子要开家长会，对于孩子来说，这是一个学习最重大的事件了，如果缺席，那孩子将会多么失望。

不同的角度，不同的角色，看待问题的角度不同，对待同一件事，重要程度也不同。



还记得电影《泰囧》里的片段，徐铮答应带孩子去海洋馆，但是却一直没有兑现。他在忙着他的世纪重要的大项目。在和王宝强饰演的王宝宝经历了泰国旅途中各种离奇搞笑的经历后，他忽然发现了什么对他来说是最重要的。

关注自己的角色和职责

去年的灯塔管理沙龙第一期活动，主题是大前研一的《专业主义》读书会，快结束的时候进来一位老朋友，熟悉的朋友发现已经有半年没有见到她了，原来这期间她当了妈妈，生了一对双胞胎女儿。初为人母有很多不适应，好像自己的生活一下子重心倾斜了，原有的生活规律被打乱，有点迷茫又有些焦虑。

当时在场的席殊书屋的阎姐忽然微笑的说了一句话，把在坐所有人都震撼了。阎姐说：“刚才我们在一起读《专业主义》，书里有一句话‘我向上帝发誓，我将以此为职业’，每个人在生活中充当不同的角色，现在你的角色多了一个，那既然如此，我们为什么不以母亲这个角色为职业呢？”



其实每个人在自己的工作和生活中都扮演这不同的角色，每个角色都有自己需要做的事情，我们是社会的一员，是家庭的一员，是单位的一员。每个人都扮演着不同的社会角色、家庭角色、社群角色、岗位角色。在不同的时期，这些角色的重要程度总会有一个先后。

“自古忠孝不能两全”，当我们面临两件事情同样重要的时候，就要去思考，到底哪个角色对我最重要。

正能量挑战赛第3季已经开始了3周时间了，在这三周的时间中，大家通过计划与回顾，慢慢也摸到了一点门道，但是在计划执行的过程中，也遇到了不少的困难。有一天微信群里有一位朋友说：“大家有没有和我一样自己带孩子的，夜里要带宝宝，精神不好，白天计划执行的也不好，好大的挫败感，我该怎么办。”

这其实就涉及到最重要的事情了Most Important Things了。

如果两件事情都很重要，而你只能做一件，这时候你会如何抉择？你可能很难选择，但是却一定能在最后做出选择。明朝的时候，英宗土木堡之变被俘，这事儿传到京城，可是大事儿，皇帝被俘了，国家怎么办。皇帝的生死安危很重要，但是国家安危同样重要。敌人以此要挟。“民为重，社稷次之，君为轻。”当时的朝廷做出了艰难的决定，放弃了皇帝，另立新君。社稷为重君为轻，在两件事情同时重要的事情，职责就显得尤为重要。

列出最重要的三个角色

在年初制定计划的时候，我们都写了不少的任务清单吧，这些事情的程度需要有个排序，而在这之前，不妨先做这样两件事情

1、写出自己所有的角色



拿出一张纸，列出自己的所有角色，你可能是别人的上司、下属、子女、妻子/丈夫、父亲/母亲、社群领导者/参与者、社会服务者、学生、学习者等等

2、找出最重要的三个角色，然后进行排序



不同时期，人的角色不同，所需要履行的职责也不相同。不妨每年的时候都给自己的角色做一个排序，今年对于我来说，最重要的角色是什么，每个月的时候回顾一下，甚至当遇到你很难抉择的时候，问问自己的内心：哪个角色对我来说最重要。</description>
    </item>
    
    <item>
      <title>那么努力提高效率，节约下来时间做什么</title>
      <link>http://i-cooltea.github.io/posts/%E9%82%A3%E4%B9%88%E5%8A%AA%E5%8A%9B%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E8%8A%82%E7%BA%A6%E4%B8%8B%E6%9D%A5%E6%97%B6%E9%97%B4%E5%81%9A%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 18 Nov 2019 07:32:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E9%82%A3%E4%B9%88%E5%8A%AA%E5%8A%9B%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E8%8A%82%E7%BA%A6%E4%B8%8B%E6%9D%A5%E6%97%B6%E9%97%B4%E5%81%9A%E4%BB%80%E4%B9%88/</guid>
      <description>这是上周培训的时候，学员跟我提出的问题。这个问题问的挺有水平，也就是WHY的问题，为什么要学习时间管理，为什么要提高效率。省下来那些时间干嘛？慢慢悠悠一天也是过，专注高效一天也是过，有什么不一样？

一样吗？当然不一样，幸福感不一样。

上个星期有一天晚上，吃过晚饭，我们一家三口坐在地板上，拿了一盘水果，大晚上也不开灯，借着路灯看窗外，整整一个小时，就这么呆着，小朋友没觉得无聊，还很开心。忽然感觉，恩，人生巅峰，不过如此。坐这么一小时，一天的疲惫都消失不见了。

但转念一想，这时间是怎么来的。晚上接孩子回来已经6点多了，做饭，吃饭，刷碗，为了让这些事情做的快一点，足足练习了2年。从手忙脚乱到游刃有余，正是因为不断练习，我才能有时间在这里悠闲的乘凉吃水果。

这大体就是学习时间管理的意义吧。

学习时间管理是为了什么？

大多数人学习时间管理，是为了解决自己糟糕的现状，其实改变现状很容易，有时只需要一个开关，就像触发了水龙头一样，后面就是各种连锁反应。我自己刚接触时间管理的时候，一个日程表和一个OneNote，基本上就把我所有问题都解决了，工作效率提高了，做事情变的轻松了，心情也比以前平静了许多。

然后，你终于可以找到一点点属于自己的时间了，这点时间用来做什么呢。

思考人生

8年前，每周一早晨，半小时的早餐时间，一本手帐，我开始思考人生。说的有点复杂，其实就是在本子上写写画画，问问自己五年之后自己想做什么，都写下来。然后再写，我现在可以做什么。

那本手帐我现在还保存着，那是《小强升职记》作者邹鑫送给我的“梦想手帐”，也许是心理暗示，美好的名字总能给你带来美好的期待。至于怎么写，千万不要和现在手帐达人写的手帐结合起来，你现在看的话，不告诉你你以为是草稿纸。毫无章法，但是这是有决定意义的时刻。

所以你也可以试试，每周找半小时的时间，思考一下人生，一定要写下来，说不定人生就此改变了呢。

睡觉

两年前，我福福上幼儿园了，为了保证能给她一个规律的作息。我给她制定了一个日程表，然后把这个日程表当做一个目标习惯，慢慢培养。

其实，这个日程表是给我制定的，孩子是否按时睡觉，跟孩子没什么关系，主要是看家长做了什么。

到点喝奶，到点刷牙，然后洗澡睡觉。晚上上床时间从9点半向9点调整。为了达到这个目标，做事情真是争分夺秒，处处想着提高效率，看看如何能节约时间，保证晚上能让她既能有时间玩开心，又能早睡觉。

其实还挺难的，2年了，才稍微有点成效。晚上回家就已经6点多了，9点睡觉，8点半就要开始刷牙。2个小时中有1个小时陪玩，剩下的时间做饭、吃饭、洗碗。为了能提高在这段时间的效率，真是什么方法都用上了，刚开始的时候9点半能完成这些事情就不错了，经过一年多的努力，现在已经可以9点上床睡觉了。

这么努力的提高效率，为自己节约了至少两小时。以前我没有11点半是睡不了觉的，但是经过2年的努力，用各种方法节约了两小时的时间，然后我终于可以在晚上10点前睡觉了。

早睡晚起一年后，精神状态明显好转很多，早睡的这一年，我并没有早起，尤其是冬天，每天睡到快7点和小朋友一起起床。把睡觉时间和睡觉流程固定下来，想休息的时候就睡到7点。想早起就早起，出门永远早班机，早班车，4点起床也不会太困。

这是晚上的时间，中午的时间如果能重新规划一下，即使只有1小时午休时间，你也可以节约出来10-15分钟，然后，睡觉。

睡觉是一件投资回报率很高的事情，你做工作可以更高效，然后再节约出来时间做别的。

每天运动30分钟

让自己保持高效专注，有一个非常重要的目标，就是能节约下来时间做运动。运动的重要性不必说，至少从精力管理的角度来看，运动可以让我们的精力得到恢复，提高我们的身体机能。但是最主要的问题是，很多人没时间运动。工作时间经常侵占运动时间。

所以要让自己高效起来，把节约下来的时间用于运动。现在有很多研究表明，一次性运动1小时和分多次每次运动几分钟对身体的影响是一样的。所以如果没有大块的运动时间，就把运动时间切分一下，一次运动个10分钟，效果也很不错的。

如果你希望去健身房或者跑步，那更要精打细算了。前前后后至少需要1-2小时。想尽各种办法争分夺秒，节约时间，然后保证这段运动时间。

我曾听有去健身风锻炼习惯的朋友说，因为每周要去几次健身房，所以去健身的那几天，会特别注意工作效率。有人是中午去健身，上午工作效率就很高，下了班直接去健身房，健身，收拾，吃饭，安排的井井有条。晚上去健身时间宽裕，为了保证不加班，真是各种方法提高效率。

有时候，给自己找点事儿干真的挺好的。

培养点兴趣爱好

写作是我培养的第一个爱好，在我职业生涯最困惑和无助的时候，每天写作让我觉得这一天都很意义。我写作的时候，没有人说什么写作变现，写作赚钱，写作可以改变生活什么的。我只是单纯的写而已，这个兴趣爱好让我度过了很多美好的时光。

现在我的兴趣爱好变成了写手帐和画画。画画因为基础太差，只能从简笔画开始，不过因为画的简单，倒是让我找到了不少乐趣。

在外面看到那些简单的图形，就会拍一张照片，然后拿回来画。画的难看也没关系，反正我福福不管我画的如何都会夸我画的好看。把画画在手帐上，再配上点文字，就是一天的手帐。

我今年买了一日一页的Hobo，我每天只在上面写3只青蛙，其他的地方基本是空白。有大片可以发挥的空间。出门的时候，我会带旅行手帐，依然是写写画画。

做些和自己的工作和生活无关的事情，最大的作用是转换频道，从精力管理的角度上来说，我们每天的工作和学习，是消耗精力的事情，手机总用也会没电，这时候就需要充电。对我们来说，转换频道就是在为自己的电池充电。

如果有幸把兴趣作为了职业，那就要找点其他兴趣

我的一位高中同学从上Windows95时代就酷爱各类电脑游戏，没有她不玩的。她大学毕业后做了一名游戏设计师，当时我很羡慕她，把自己喜欢做的事情作为职业。但是她说：千万比把自己的爱好当做职业，当你的爱好成为职业，这件事情的意义就变了。</description>
    </item>
    
    <item>
      <title>正能量的毒与负能量的药效</title>
      <link>http://i-cooltea.github.io/posts/%E6%AD%A3%E8%83%BD%E9%87%8F%E7%9A%84%E6%AF%92%E4%B8%8E%E8%B4%9F%E8%83%BD%E9%87%8F%E7%9A%84%E8%8D%AF%E6%95%88/</link>
      <pubDate>Sun, 17 Nov 2019 01:32:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%AD%A3%E8%83%BD%E9%87%8F%E7%9A%84%E6%AF%92%E4%B8%8E%E8%B4%9F%E8%83%BD%E9%87%8F%E7%9A%84%E8%8D%AF%E6%95%88/</guid>
      <description>是药还是毒

在韩剧《大长今》中有这样一个场景：长今去参加医女训练，教授让他们写出各类药材中哪些是药材，哪些是毒材。长今非常明确的写出了药材和毒材，但是却没有通过。她的朋友没有写几条，却得到了最高分。

教授并没有给解释，不仅如此他还说长今自以为是，傲慢无礼。长今非常委屈，她带着疑惑开始了医女的实习。她遇到一个妇女肚子疼，便按照自己的观察对症进行治疗，但是这位病号的病情一直没有得到好转。而她的朋友却在她的身边，一直问这位病号问题，从饮食到生活习惯，到最近遇到的事情，然后把病号说的话都记录了下来。

在她的朋友做这些事情的时候，她忽然领悟到，原来自己一直都做错了。她以为自己基础扎实，所以看到病号就根据自己的推测给病号看病，并没有仔细询问病号的其他情况，也忽然明白了为什么教授说她“以为自己懂一点浅薄的医学知识就心怀傲慢。”

长今忽然领悟，其实教授所说的药材和毒材其实是没有明显界限的。一种药，用到对的地方就是药，用在错误的地方就是毒。不同的时机，不同的人，情况都不同，需要根据实际情况来判断。她刚开始的时候把药材和毒材区分的很清楚，就是没有领悟到这一点。太自以为是，却忽略了基本功。而她的朋友，虽然写的不多，却把每一种药可以治什么病以及有什么副作用写出来，所以她得到了高分。

正能量的副作用

和药材一样，我们周围的正能量也不一定在任何时候都是好的。上周Weekly前一晚，刚做完预告，一个小伙伴在群里说：“老师，为什么我列了清单，却总是完成不了呢，明明看到清单就在那里，就是不想做。这种情况已经三天了，不知道该怎么办。”

我当时在群里说：“今天我早晨起来也列了一堆清单，包括青蛙在内，不过目前我也什么都没有做。”

我接着说：放轻松，你这个反应就像非典的时候，白岩松说的一种大家的恐惧心理：“我现在都36度9了，我是不是得非典了。”

只是3天没有按计划执行而已，原因可能有很多，可能是身体原因，可能是情绪原因，也可能是因为某些心理因素造成对要做事情的抵触，也可能是其他我们不知道的原因，当我们的计划没有被执行的时候，我们需要分析一下这其中的原因。如果没有思考就上纲上线说自己没有执行力，写了清单也不做，那就像长今一样，过于武断了。

对于我来说，可能就是单纯的累了，想休息而已。列了清单没有做，因为精力达不到了，虽然对要做的事情满怀期待，但是却“心有余而力不足”了。

在你疲惫，焦虑的时候，正能量的群体可能不会给你带来帮助，反而会带来更大的压力和焦虑。你看着社群中的其他小伙伴今天跑了多少公里，锻炼了多少分钟，看了多少本书，写了多少字，这些看似是能量，但会给你带来困惑，最大的副作用是自我否定。你看别人都做的这么好，但是我却列了一堆清单，一样都没有做。我有拖延症，我执行力不强，然后就是更大的焦虑。

有时候负面反馈也是一剂良药

正能量挑战赛进行到了第7个年头，在今年我们看到了很多可喜的变化。大家在追求成长的过程中，开始注意在做一件事情中遇到的困难。不仅愿意分享自己的成就，也愿意分享自己遇到的困难。

印象最深的是一次周回顾晨会，往常大家都会说在过去的一周我做了什么，有什么成果和收获。结果那天好几个小伙伴不约而同的说上周效率很低，大量的时间用来看网络小说，青蛙任务完成率低，该锻炼但是却没锻炼等各类情况。

但是当大家说出来的时候，反而觉得轻松了。而随着大家把自己遇到的困难说出来的时候，其他的小伙伴开始一起出主意。我忽然发现，一个标榜“正能量”的社群，在愿意接受负能量的时候，才变得更加真实和完整。而这种看上去的负能量，反而会给人力量。

大家在抱团一起向前走的过程中，需要动力，需要成就，需要方法，同时，我们也需要自我接纳，接受自己的不完美，接受一定次数的失败和不达标，这样才能在成长的道路上走的更远。

再谈持续目标和累积目标

有一年的元旦，我在早晨6点听了《哪有没时间这回事儿》的作者纪元老师的一节早起课，让我印象特别深刻。我觉得纪元老师是一个特别顺应人性的老师，他当时问听课的学员：“你们是不是觉得我是一个习惯早起，4点起床的高效人士呢？”大家回答是的，然后纪元老师说：“我也是这样认为的，但是并不意味着我每天都4点起床。一年中我大概有超过250天时间早晨4点起床，我是一个4点起床的高效人士吗？”我想了想，答案还是肯定的，我也一直是这样认为的。

纪元老师继续说，但是如果反过来想，一年有365天，我有100天的时间没有在早晨4点起床。

这应该是对我印象比较深刻的一次培训开场白，你会觉得很真实，也忽然了悟，我们在坚持做一件事情的过程中，应该采取什么样的态度。

接纳每一次成功的行动和每一次失败的行动，关注累积目标，我们的内心才会变的更加坚定，也会在持续的行动中积累更多的经验。

史蒂芬.金在《On Writing》中提到自己对看到“烂电影”和“烂书”的看法。他认为电影没有绝对的好坏，好电影可以学习到优秀的经验，而烂电影可以学到失败的经验。可以学习到为什么觉得不好，自己以后可以如何防止错误发生。

对我们来说，失败的经验也给了我们一个分析原因的机会。例如今天没有早起，今天没有持续运动，是什么原因造成的，有什么方法可以改善，让自己的下一次行动能够成功。这样的失败远比耗费意志力咬牙坚持要值得，更比失败后自暴自弃，上纲上线自我否定要聪明。

结语

医学上有“同病异治，异病同治”的讲究，看上去相同的症状，引发的原因不同，需要不同的治疗方法。而看上去症状不同，但是引发的原因相同，很可能治疗的方法相似甚至相同。每个人都是不同的个体，即使我们面对的问题一样，也需要根据实际情况，用不同的方法解决问题，在这个过程中，需要我们加入更多大卫观察，而不是轻易下结论，这其中的经验，还需要我们慢慢体会。


 </description>
    </item>
    
    <item>
      <title>一团混乱？那就开始分类吧！</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%80%E5%9B%A2%E6%B7%B7%E4%B9%B1%E9%82%A3%E5%B0%B1%E5%BC%80%E5%A7%8B%E5%88%86%E7%B1%BB%E5%90%A7/</link>
      <pubDate>Fri, 15 Nov 2019 19:32:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%80%E5%9B%A2%E6%B7%B7%E4%B9%B1%E9%82%A3%E5%B0%B1%E5%BC%80%E5%A7%8B%E5%88%86%E7%B1%BB%E5%90%A7/</guid>
      <description>最近上海的朋友都在讨论垃圾分类的问题，而随着上海开始全面推广垃圾分类，各类媒体，公众号也在一波一波的推送有关垃圾分类的文章，其实不止是垃圾要分类，分类是建立一切秩序的基础。今天我们就来聊聊分类。

物品的分类

据有文字记载，我是从2013年开始进行物品整理的，受近藤麻理惠《怦然心动的人生整理魔法》的启发，开始对自己的物品进行整理，不过除了扔东西外，并没有太多成果。很多人认为整理就是断舍离，其实这只是刚刚开始。

近藤麻理惠提出了一个整理的终极目标：只需要整理一次，一辈子都不会乱。

到现在提出来，都会有很多人不信。信不信我不说，你自己做了自然就知道。我把这个目标叫做：整理的终点。

为了到达整理的终点，你需要做到以下几点：

1.每个物品有固定存放的位置
2.东西从哪里来，放回哪里去
3.把以上两点养成习惯

我的整理走了很多弯路，从2013年到2017年，一直在整理，只是东西少一点，但并没有达到理想的境界，找东西依然找不到。

我当时非常困惑，所有的物品有固定存放的位置，怎么做呀，根本做不到呀。

这个问题直到2017年才得到解决，我又看了一遍《怦然心动的人生整理魔法》，发现一个关键点我没有get到：如果做到所有物品有固定存放的位置，就需要把物品进行分类，然后将同一类物品放在一起，固定位置。

拿衣服举例，衣服先按家庭成员分大类，然后就是衣服的种类，裤子，上衣，裙子，外套，内衣，袜子，其他。然后按照类别，给这些类别找到固定的位置。

自从做了这个分类，我家再也没有整理过衣服，再也没有出现找不到衣服的情况。我小时候，家里一到换季就会折腾一次衣服，但是按类别整理后，从此再无换季之说。

比如我的裤子，冬天穿，夏天也穿。有薄的，厚的，毛裤，棉裤，秋裤，运动裤，短裤，种类繁多。管他什么时候穿，反正都是裤子，两个整理箱，全都扔进去，放在衣柜里。刚开始我还会区分一下冬天和夏天的，后来就直接混起来放了，反正就这两个小箱子，因为固定物品固定位置，根本就不会乱。

这就是分类的重大意义。当分类清晰了，把物品固定位置，就是一个特别简单的事情了。后来我还根据这种方法，改造了橱柜，起居室，我福福的玩具，我自己的书，文具，固定了位置，然后从哪里来放回哪里去就成了一个理所当然的事情，永远不会错，以后自然也就不需要整理了。

事情的分类

很多人熟悉的事情的分类方法是按照事情的轻重缓急进行分类，四象限区分事情的重要和紧急，这其实并不是事情本来的面貌。这种分类方式就好像你把衣服分成了“上班穿”，“逛街穿”，“约会穿”，而不是“裤子”，“裙子”这样的类别，这其实不是物品根本的分类方式，容易出现分类模糊，就像一件事情是否重要，很难界定清楚 。分类模糊，无论是物品还是事情，都会混乱。

戴维.艾伦在《搞定》中提出的清空收集箱的方式，很好的将事务进行了区分，在收集箱掌握事情总量的前提下，除了delete不做，do两分钟内立刻做，delegate授权给别人做，defer搁置暂时不做的事情，其他的就是我们要做的任务清单。

当你把事情按照这种方式梳理后，再按照时间，职责或关注点再进行细分，我们就拥有了一张张的清单，因为把事情的性质判定清楚了，清单就建立清晰了，我们对照清单做事情，自然不会乱。

这就是对事情分类的意义。

垃圾分类

如果不把垃圾分类，那我们就只能把垃圾一股脑的填埋了，那我们的地球早晚会变成垃圾场。我们扔出去的垃圾就好像是收集箱一样，这是垃圾的总量，因为不同类型的垃圾处理方式不同，有些可以废物利用，有些在处理后可以以更好的形式存在，所以只有对垃圾进行分类才能有序。这些工作在我们生活条件还不太好的时候还顾不上提上日程，现在我们的生活变得越来越好了，这件事情也会慢慢提到日程来了。

最近很多公众号会拿日本垃圾分类来举例子，说这个民族很可怕什么的，我倒不这么认为，只不过是他们的社会文明进步到这个层面了，经济发达了，文明程度就会慢慢提升。在韩剧里看到的那些垃圾分类场景，其实并不是人家要展示什么，这些都是基本日常，人家每天都是这么做的，进步到这个层面了，这些都是基本。就像几年前我根本无法想象，自己过一条没有信号灯的人行横道，来往的车辆会自动停下来给你让路。刚开始发布机动车要礼让过马路的行人，违规罚款50元条款的时候，司机们都会调侃和抱怨，但是现在却习以为常了，开车见到行人就会减速让行人先走。以前看到日本小学生过人行横道的时候旁边车会自动停下来会觉得很不一样，但现在我们也是这样做的。

总要先开始行动

事情的整理分类是最容易的，选择一款清单工具，建好清单，按照4D原则判断事情的性质，把事情放进对应的清单，对照清单做事情。

整理物品我们需要整理箱，文件夹，文件袋和收纳袋，把不同类别的物品放进去，然后固定位置。整理物品不会一蹴而就，需要时间，但只要你开始了，就会慢慢到达整理的终点。

垃圾分类实现起来要难一些，因为以前没有这个习惯。即使你分好了垃圾也要有基础配套设施。比如分类垃圾箱，垃圾处理厂的改造，垃圾处理工艺，收垃圾的流程，扔垃圾的时间，可能这些对我们的生活习惯会有很大的改变，不过总要开始行动。

我自己地处三线城市，垃圾处理远没有大城市发达，我所在的小区一直都是垃圾堆成山的阶段，旧式垃圾箱，扔不进去，垃圾很容易丢在外面臭气熏天。但是今年年初，小区废掉了以前旧的垃圾箱，每个楼前换成了那种可抬走的塑料垃圾箱，大家扔垃圾明显方便了，不会扔到外面，我觉得这就是一种进步吧。

而我们自己也总要开始行动才是。福福小朋友小一点的时候我教她东西不可以乱丢，要扔到垃圾箱里。现在喝完的矿泉水瓶，我会问她这个是什么垃圾，应该扔到什么地方。遇到带分类标志的垃圾桶，也会教她扔到正确的地方。吃完的苹果核，不能直接扔在垃圾桶，她慢慢也知道这个是厨余垃圾，要单独处理。

至于你把垃圾分好类，垃圾处理站怎么处理，我们就等待就好了。现在我们国家的垃圾分类刚刚起步，会慢慢变好的。上个月回天津的时候，我发现我们小区门口就多了几个绿色的厨余垃圾桶，我也期待着我住的小区慢慢能够改善。

《流浪地球》带给我的启发

过年的时候去看了《流浪地球》，我的关注点在这个流浪地球计划本身，这个计划需要100代人的努力，历时2500年，你终其一生，都不会看到结果，但是还是要做。

有些事情，现在做，真的可能在短期看不到任何结果，但是在可以预见的未来3年，5年，10年，20年，你现在所做的一切，将会看到效果，你会因为你所做的一切，得到回报，（不好的事情就是报应）

我们能做的，就是持续的做那些应该做的事情而已。

努力做好眼前事，然后静待一切发生。</description>
    </item>
    
    <item>
      <title>先解决有没有，再看好不好——每日计划</title>
      <link>http://i-cooltea.github.io/posts/%E5%85%88%E8%A7%A3%E5%86%B3%E6%9C%89%E6%B2%A1%E6%9C%89%E5%86%8D%E7%9C%8B%E5%A5%BD%E4%B8%8D%E5%A5%BD%E6%AF%8F%E6%97%A5%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 14 Nov 2019 13:32:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%85%88%E8%A7%A3%E5%86%B3%E6%9C%89%E6%B2%A1%E6%9C%89%E5%86%8D%E7%9C%8B%E5%A5%BD%E4%B8%8D%E5%A5%BD%E6%AF%8F%E6%97%A5%E8%AE%A1%E5%88%92/</guid>
      <description>每年年底到下一年的年初，“年度计划”这个词都会蹭一段时间的热度，很多人都忙着写下一年的年度计划，忘记了去年这个时候自己曾经立过什么Flag。绝不夸张，2018年初正能量挑战赛第6季开始的时候，我写了个帖子，让大家在后面写今年的计划，今年就有小伙伴问我，今年怎么不出这个帖子了呢？我说别着急啊，大伙先去去年的帖子下面打个脸，看看去年自己写的什么，再说今年的计划吧。

不是年度计划不重要，而是我们在年初的时候往往比较兴奋，想要做的事情太多了，恨不得把好几年做的事情都写在今年的计划里，结果真正做的时候就知道深浅了。如果没有良好的计划体系支撑，我们这一年一年下来，基本都是稀里糊涂的。

如果你从来没做过计划，一上来就要建立计划总结体系，很多人完美主义小恶魔就要跑出来了，不建立好体系，誓不罢休。然后这时间就一天天过去了。

我们不妨换个思路，先把握好今天，毕竟早晨一睁眼，新的一天就到来了。在建立计划体系前，先把今天计划做好了再说。

我知道我以前说过，每天拍脑门写To do List，如果没有周计划和月目标，日计划是没有意义的。但是还没来得及做周计划和月计划，新的一天就到来了，这新的一天要怎么计划？

所以，既然大家都知道列 To do List，我们就先从日计划开始说起。做完每日计划，你就会慢慢发现这里面还缺少什么，自然会开始后面的行动。

每日计划的几个雷区


很多人在列每日计划的时候会脱离清单系统，所以会有很多人说列了计划，还是没办法实现，所以一定要避免这几个雷区：

1、列计划拍脑门


每天开始的时候写下To do list，多么有效率的事情啊。当然能做到这点已经比不做计划要好很多了，但是你做的计划要建立在列清单的基础上，至少也要建立在周计划的基础上。

拍脑门做计划最大的问题在于可能对自己估计过高，列了一大堆感觉自己都可以做完，其实根本就做不完。

2、只列清单不规划时间


还是那句，你能列清单已经比不列要好了，总比每天见招拆招好。但是如果只列出计划，不规划时间，不把他们安排在具体的时间段内，那计划的效果是大打折扣的。

只列清单不规划时间最大的问题在于，因为不知道下面到来的时间内我要做什么， 就容易陷入到别人给我安排什么事情我就做什么事情，响应几次，时间就这么过去了，一天过去了，发现自己什么都没有完成。

3、日计划没依据


能做日计划其实已经不错了，在做了一段时间日计划后，你需要周计划和月计划。“欲穷千里目，更上一层楼”，只有站得更高，才会看得更远。在列日计划一段时间后，日计划至少要站在一周计划的基础上，这样才能更好的把控我们所做事情的进度。

相关阅读：
你以为自己在做计划，其实只是列清单而已——计划与清单系统

日计划的组成部分


1、日程表


日计划需要先从时间层面进行计划规划，首先是明确日程。所谓日程，就是那些已经计划好，被占用的时间。例如上课、培训、约见、会议等。日程表代表我们的不可支配时间，明确了哪些时间我们不可以支配，剩下的就是我们的可支配时间。

相关阅读
从TFBOYS王俊凯的一日日程表学时间管理
优雅过生活——用日程表管好自己的档期

2、列青蛙清单：今日最重要的3件事


先吃掉那只青蛙，列出今天最重要的三件事情。如果这件事情没有办法在30分钟内完成，你就需要对这些事情进行拆分了。如果你每天被干扰的时间比较多，比较容易被打断，你可能需要把需要做的事情拆分成更小的单元。

拆分这件事情非常重要，有些事情无法启动，和我们内心的抗拒有关，我们会觉得完成这件事情很困难，从而产生抗拒心理，然后就一拖再拖，拖到最后，Deadline就是生产力。把事情切割成比较容易完成的单元，不要追求完美，要么不做，要么就一口气做完这种思想会让你迟迟无法启动要做的事情。

所以你不妨在列计划的时候做如下改变：

将“做策划方案PPT”改为“做策划方案10页”或“做策划方案25分钟”
将“写课程大纲”改为“写课程大纲第1部分”</description>
    </item>
    
    <item>
      <title>转载-详解SSH原理</title>
      <link>http://i-cooltea.github.io/posts/%E8%BD%AC%E8%BD%BD-%E8%AF%A6%E8%A7%A3ssh%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 13 Nov 2019 07:32:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E8%BD%AC%E8%BD%BD-%E8%AF%A6%E8%A7%A3ssh%E5%8E%9F%E7%90%86/</guid>
      <description>转载 原文出自果冻想 https://www.jellythink.com/archives/555
前言 在实际日常运维工作中，肯定是离不开SSH的，每天都在不停的使用SSH登陆这个主机，或者那个主机去处理各种问题。每天用的也很舒服，但是对于SSH后面的原理却不甚了解，最近在看Ansible时，发现自己对SSH还有很多的迷惑点，对于我来说，一般不常用的迷惑点，我也就糊弄糊弄就过去了，毕竟对每个知识点进行放大，那都是一本学不完的天书，有些内容我们了解就好了，但是对于SSH，本想着也糊弄糊弄就过去吧，但是后来发现这样行不通，这里面好多的知识点直接影响着我日后的运维工作。于是乎，觉的有必要整理这样的一篇文章来把SSH的原理好好的学习一下，也好让后续自己的运维工作更得心应手，又或在教小弟时也能有点资本。
SSH是什么？ 简单一点来说，SSH就是一种网络协议，用于在网络主机之间进行加密的一种协议。结合我们的日常工作来说，如果我从一台服务器使用SSH协议登陆另一台服务器，我们就认为这样的登陆是安全的，即使我们的登陆信息在中间被人截获了，我们的密码也不会被泄露。
为什么要搞这么个协议呢？其实，很久很久以前，互联网通信都是明文的，一旦在中间环节被某些中间商截获了，我们的通信内容就暴漏无疑。所以呢，芬兰就有这么一位叫做Tatu Ylonen的人设计了SSH协议，将信息加密，这样就像上面说的，即使我们的登陆信息在中间被人截获了，我们的密码也不会被泄露。目前SSH协议已经在全世界广泛被使用，且已经在成为各个Linux发行版的标配。
原理解析 至于SSH的一些简单用法，我这里就不细说了，先通过一副时序图看看SSH的密码登陆原理。
![](http://resource.i-can.xyz/image/20191113153619.png) 从上图中，可以看到我们使用SSH进行登陆时，主要分为以下几步：
 用户使用ssh user@host命令对远程主机发起登陆； 远程主机将自己的公钥返回给请求主机； 请求主机使用公钥对用户输入的密码进行加密； 请求主机将加密后的密码发送给远程主机； 远程主机使用私钥对密码进行解密； 最后，远程主机判断解密后的密码是否与用户密码一致，一致就同意登陆，否则反之。  这个过程乍一看没有任何问题，但是在实际工作中，却是存在风险漏洞的。由于SSH不像https协议那样，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。这就导致如果有人截获了登陆请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪，用户再通过伪造的公钥加密密码，再发送给冒充主机，此时冒充的主机就可以获取用户的登陆密码了，那么SSH的安全机制就荡然无存了，这也就是我们常说的中间人攻击。
既然存在这种问题，SSH就想了一个办法来绕开这个问题，也就是我接下来要总结的known_hosts文件的作用。
known_hosts文件的作用 我们在使用SSH登陆远程主机的时候，有时会看到这样的提示：
Theauthenticity of host &#39;192.168.1.4 (192.168.1.4)&#39;can&#39;t be established. ECDSA key fingerprint is SHA256:YMLLk0vyfeoY4rbRTnkMSxY11arS2S4qgVgvnwWpBFw. ECDSA key fingerprint is MD5:82:75:be:8e:e7:26:ea:18:73:aa:fc:10:44:c8:4f:c3. Are you sure you want to continue connecting (yes/no)?  上面这段话的意思是，无法确认192.168.1.4主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？这样我们就可以看到，SSH是将这个问题抛给了SSH使用者，让SSH使用者自己来确定是否相信远程主机。但是这样对于用户来说，就存在一个难题，用户怎么知道远程主机的公钥指纹是多少；这的确是一个问题，此时就需要远程主机必须公开自己的公钥指纹，以便用户自行核对。
在经过用户的风险衡量以后，用户只需要输入yes来决定接受这个远程主机的公钥。紧接着，系统会出现以下这样的一句提示，表示远程主机已经得到认可：
Warning:Permanentlyadded &#39;192.168.1.4&#39;(ECDSA)to the list of known hosts. 接下来，用户输入远程主机密码即可完成整个登陆。那这个和我这里要总结的known_hosts文件有什么关系呢？请听我慢慢道来。
当远程主机的公钥被接受以后，它就会被保存在文件~/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。
但是由于known_hosts这个机制的存在，也会引起一些问题，比如远程主机的重新装操作系统了，远程主机就会重新生成公钥，如果我们再登陆远程主机时，由于我们本地的known_hosts文件中记录了原来的公钥，此时就会提示指纹认证失败的错误，这个时候我们只需要删除本地的known_hosts文件即可。又比如，我们经常会写一些自动化的脚本，会自动的登陆到远程主机上去，但是这个known_hosts机制却必须要我们手动输入yes才能完成远程登陆，这样整个自动化登陆就无法完成了，但是我们可以通过修改/etc/ssh/ssh_config配置文件，跳过这个known_hosts的询问机制，将# StrictHostKeyChecking ask修改为StrictHostKeyChecking no即可。
公钥免密登录 在我们日常工作中，总是会挂很多的自动化脚本，比如自动的登陆到一台远程主机上进行一些操作，又比如Ansible就可以配置自动登陆到远程主机，但是上面说到的SSH，都需要密码登陆，那如何让SSH免密登陆，实现我们的自动登陆需求呢？这就是这里要将的公钥免密登陆。</description>
    </item>
    
    <item>
      <title>个人成长之路No.7 我从高级总监身上学的职场素质</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFno.7-%E6%88%91%E4%BB%8E%E9%AB%98%E7%BA%A7%E6%80%BB%E7%9B%91%E8%BA%AB%E4%B8%8A%E5%AD%A6%E7%9A%84%E8%81%8C%E5%9C%BA%E7%B4%A0%E8%B4%A8/</link>
      <pubDate>Fri, 11 Oct 2019 12:53:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFno.7-%E6%88%91%E4%BB%8E%E9%AB%98%E7%BA%A7%E6%80%BB%E7%9B%91%E8%BA%AB%E4%B8%8A%E5%AD%A6%E7%9A%84%E8%81%8C%E5%9C%BA%E7%B4%A0%E8%B4%A8/</guid>
      <description>在职场中，榜样的力量是最强的，找到一个让你佩服的同行，见贤思齐，勤加努力，也许有一 天，你也会做到“慢慢成长最崇拜的人“。
 为了能够让总结的素质适用于各个方向，我总结出了和工作方向关系不太大的素质清单。
1. 勤思考 懒得思考的人，不会受到大家的欢迎。有些人不仅懒得思考，连搜索一下相关的问题都懒。工程师的话，连看一眼编译等的出错信息都懒，直接问别人怎么搞。 不使用英文搜索也是懒的表现。 没有VPN，只能使用百度或者搜索进行搜索，也是懒的表现。不少工程师因为养成了使用百度搜索的“坏毛病”，哪怕公司里能使用Google进行搜索，也懒得切换，毕竟惯性在这，坏毛病总是不好改。
开会之前，应该做好充分的思考，你要讨论的问题是什么？目前业界有什么解决方案？你自己有什么思路？你的几个方案各有什么利弊，你的选择困难症在哪里？
2. 负责任 几乎所有的管理者都提到了负责任这个关键词。负责任的人，大家觉得靠谱，不负责任的人，大家以后不会再找他。
工作中典型的不负责任的做法： a). 一件事交给你，你应该有始有终，而不是开始的时候说好，图了个新鲜，碰到难题了，卡住了，马上后退，交给别人。 b). 一个工作交给你，你挑挑拣拣，有意思的自己做了，把脏活累活都给别人。 c) 哦，对了，那个太难了，我调研了下发现没法做，或者cost太高。我还有很多别的事情忙，先就搁置下了。
负责人的人，对工作负责的同事，就是对公司负责，更是对自己负责。
3. 爱学习 我看到的所有优秀的同事，都热爱学习，有一颗追求卓越的心。 他们喜欢挑战，工作如何缺乏挑战了，他们会主要找领导沟通，换项目或者是换岗。如果在公司觉得没什么挑战了，个人瓶颈了，这类人很可能第一个离职。 爱学习的人，在工作中遇到问题，总喜欢问个明白。有好奇心的人，开会的时候碰到不明白的结论，看到不过准确的数据，总是能第一时间问出来。 爱学习的人，业余时间也在学习。 爱学习的人，不断学习新的领域。比如工程师，学会了写代码，也得花点时间学管理。级别上去了，还得想怎么去改进产品，提高公司的竞争力，想新的商业机会等。 爱学习的人，往往认为学习和变革自己的认识，是最快乐的事情。
4. 结果驱动 一件事情交给你，要的是结果，而不是你的过程。 也许你为了这个项目，加了很多班，但是如果结果很糟糕，你的绩效不会好。原因很简单，职场上结果好才能打胜战。一个诸葛亮，顶好几个臭皮匠。工程师里则流行一个说法，一个好的工程师，能顶10个工程师。 公司给你钱，买的不是你的时间，而是你的产出。
一旦你有了结果驱动的心态，你的一切就会围绕着结果去优化。为了结果，你需要做什么，你需要哪些资源，你需要克服什么难题，如果结果不及预期，你是否需要加把劲？
不结果驱动，则容易松散，也容易自我感动。看，我多努力啊，天天“混”到十点才下班。
其实Performance Review的意思，就是考察你的绩效，而不是你的汗水。加薪之类的，固然和市场行情有关，但是不好意思，你没有出好的结果，公司也不会为你的“行情价”买单。
5. 关注事情 没有能力的人关注领导，而有能力的人则关注事情。 大部分职场人士都有一种不安全感，Leader好久没找我聊了怎么办？Leader有什么喜好呢，我怎么才能投其所好？ 有时候，Leader抽烟，下属也会养成抽烟的习惯，原因就是一起抽烟可以混个脸熟。
一旦关注事情了，你所有的精力才会放在事情本身，想着怎么才能把事情做好，而不是耗在拍马溜须和人事斗争上。
Leader一般都不会傻子，傻子才会让傻子平步青云。追求卓越的人，喜欢有挑战的事情，而挑战本身，需要更强大的团队。激励团队，非常重要的一点则在于，让最优秀的团队成员，得到最好的回报。
6. 高效开会 大家知道开一个会议花费的机会成本是多少呢？假如8个人一起开会的话，Package年薪在70万，加上五险一金等摊销成本，估计在100万左右。假如开会一个小时，一天的工作按照8个小时算，一年有效工作时间为5/7的话（实际没有那么多，因为有各种法定节假日和年假等），那么成本大概是：
1000000/(365 *(5&amp;frasl;7)) = 3835 看起来只有四千的成本，还不算太多，但是假如十几个人一起开会，连开几个小时也没有个结论，那么成本就是好几万了。
开会看起来很简单，从小打大谁没有开会大大小小几十几百次会议？不过开会基本功做足的却不太多。比如
你对这个会议有贡献么？ 你在会议上能学习到东西么？ 这个会议是否需要提前准备？ 拖堂严重了，谁来把控时间？ 会议有产品什么action list么？谁来跟进？
如果你是一位工程师，可以参考下我之前写过的一篇文章： 《职场成长记：从开会这档子事说起》，也许对你有帮助。
7. 顺畅沟通 沟通一般分几种，和领导沟通，和平级同事沟通，和下属沟通。沟通的对象不同，技巧和准备工作也不同。 沟通和开会一样，忌讳的是没有效率，浪费彼此的时间。那怎么才能有效率呢？
不打没有准备的仗。比如如果每个月和Leader有定期的沟通，不妨准备下你有什么问题，而不是现场瞎想，沟通结束了才突然想起来有个事情，也是效率低下的表现。
注意沟通的频率和场景。沟通太少，就是老朋友也容易陌生。常见的职场问题是，你的诉求没有表达清楚，导致你走出离职的那一步，但是其实不少人离职后才发现，其实前公司挺好的。</description>
    </item>
    
    <item>
      <title>我从高级总监身上学的职场素质</title>
      <link>http://i-cooltea.github.io/posts/%E6%88%91%E4%BB%8E%E9%AB%98%E7%BA%A7%E6%80%BB%E7%9B%91%E8%BA%AB%E4%B8%8A%E5%AD%A6%E7%9A%84%E8%81%8C%E5%9C%BA%E7%B4%A0%E8%B4%A8/</link>
      <pubDate>Fri, 11 Oct 2019 12:53:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%88%91%E4%BB%8E%E9%AB%98%E7%BA%A7%E6%80%BB%E7%9B%91%E8%BA%AB%E4%B8%8A%E5%AD%A6%E7%9A%84%E8%81%8C%E5%9C%BA%E7%B4%A0%E8%B4%A8/</guid>
      <description>在职场中，榜样的力量是最强的，找到一个让你佩服的同行，见贤思齐，勤加努力，也许有一 天，你也会做到“慢慢成长最崇拜的人“。
 为了能够让总结的素质适用于各个方向，我总结出了和工作方向关系不太大的素质清单。
1. 勤思考 懒得思考的人，不会受到大家的欢迎。有些人不仅懒得思考，连搜索一下相关的问题都懒。工程师的话，连看一眼编译等的出错信息都懒，直接问别人怎么搞。 不使用英文搜索也是懒的表现。 没有VPN，只能使用百度或者搜索进行搜索，也是懒的表现。不少工程师因为养成了使用百度搜索的“坏毛病”，哪怕公司里能使用Google进行搜索，也懒得切换，毕竟惯性在这，坏毛病总是不好改。
开会之前，应该做好充分的思考，你要讨论的问题是什么？目前业界有什么解决方案？你自己有什么思路？你的几个方案各有什么利弊，你的选择困难症在哪里？
2. 负责任 几乎所有的管理者都提到了负责任这个关键词。负责任的人，大家觉得靠谱，不负责任的人，大家以后不会再找他。
工作中典型的不负责任的做法： a). 一件事交给你，你应该有始有终，而不是开始的时候说好，图了个新鲜，碰到难题了，卡住了，马上后退，交给别人。 b). 一个工作交给你，你挑挑拣拣，有意思的自己做了，把脏活累活都给别人。 c) 哦，对了，那个太难了，我调研了下发现没法做，或者cost太高。我还有很多别的事情忙，先就搁置下了。
负责人的人，对工作负责的同事，就是对公司负责，更是对自己负责。
3. 爱学习 我看到的所有优秀的同事，都热爱学习，有一颗追求卓越的心。 他们喜欢挑战，工作如何缺乏挑战了，他们会主要找领导沟通，换项目或者是换岗。如果在公司觉得没什么挑战了，个人瓶颈了，这类人很可能第一个离职。 爱学习的人，在工作中遇到问题，总喜欢问个明白。有好奇心的人，开会的时候碰到不明白的结论，看到不过准确的数据，总是能第一时间问出来。 爱学习的人，业余时间也在学习。 爱学习的人，不断学习新的领域。比如工程师，学会了写代码，也得花点时间学管理。级别上去了，还得想怎么去改进产品，提高公司的竞争力，想新的商业机会等。 爱学习的人，往往认为学习和变革自己的认识，是最快乐的事情。
4. 结果驱动 一件事情交给你，要的是结果，而不是你的过程。 也许你为了这个项目，加了很多班，但是如果结果很糟糕，你的绩效不会好。原因很简单，职场上结果好才能打胜战。一个诸葛亮，顶好几个臭皮匠。工程师里则流行一个说法，一个好的工程师，能顶10个工程师。 公司给你钱，买的不是你的时间，而是你的产出。
一旦你有了结果驱动的心态，你的一切就会围绕着结果去优化。为了结果，你需要做什么，你需要哪些资源，你需要克服什么难题，如果结果不及预期，你是否需要加把劲？
不结果驱动，则容易松散，也容易自我感动。看，我多努力啊，天天“混”到十点才下班。
其实Performance Review的意思，就是考察你的绩效，而不是你的汗水。加薪之类的，固然和市场行情有关，但是不好意思，你没有出好的结果，公司也不会为你的“行情价”买单。
5. 关注事情 没有能力的人关注领导，而有能力的人则关注事情。 大部分职场人士都有一种不安全感，Leader好久没找我聊了怎么办？Leader有什么喜好呢，我怎么才能投其所好？ 有时候，Leader抽烟，下属也会养成抽烟的习惯，原因就是一起抽烟可以混个脸熟。
一旦关注事情了，你所有的精力才会放在事情本身，想着怎么才能把事情做好，而不是耗在拍马溜须和人事斗争上。
Leader一般都不会傻子，傻子才会让傻子平步青云。追求卓越的人，喜欢有挑战的事情，而挑战本身，需要更强大的团队。激励团队，非常重要的一点则在于，让最优秀的团队成员，得到最好的回报。
6. 高效开会 大家知道开一个会议花费的机会成本是多少呢？假如8个人一起开会的话，Package年薪在70万，加上五险一金等摊销成本，估计在100万左右。假如开会一个小时，一天的工作按照8个小时算，一年有效工作时间为5/7的话（实际没有那么多，因为有各种法定节假日和年假等），那么成本大概是：
1000000/(365 *(5&amp;frasl;7)) = 3835 看起来只有四千的成本，还不算太多，但是假如十几个人一起开会，连开几个小时也没有个结论，那么成本就是好几万了。
开会看起来很简单，从小打大谁没有开会大大小小几十几百次会议？不过开会基本功做足的却不太多。比如
你对这个会议有贡献么？ 你在会议上能学习到东西么？ 这个会议是否需要提前准备？ 拖堂严重了，谁来把控时间？ 会议有产品什么action list么？谁来跟进？
如果你是一位工程师，可以参考下我之前写过的一篇文章： 《职场成长记：从开会这档子事说起》，也许对你有帮助。
7. 顺畅沟通 沟通一般分几种，和领导沟通，和平级同事沟通，和下属沟通。沟通的对象不同，技巧和准备工作也不同。 沟通和开会一样，忌讳的是没有效率，浪费彼此的时间。那怎么才能有效率呢？
不打没有准备的仗。比如如果每个月和Leader有定期的沟通，不妨准备下你有什么问题，而不是现场瞎想，沟通结束了才突然想起来有个事情，也是效率低下的表现。
注意沟通的频率和场景。沟通太少，就是老朋友也容易陌生。常见的职场问题是，你的诉求没有表达清楚，导致你走出离职的那一步，但是其实不少人离职后才发现，其实前公司挺好的。</description>
    </item>
    
    <item>
      <title>个人成长之路No.6 高级程序员到底是什么样子的？</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFno.6-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/</link>
      <pubDate>Fri, 27 Sep 2019 09:33:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFno.6-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/</guid>
      <description>这篇文章主题很简单，就是一个很常见的话题
“什么是高级程序员？”。  我们的中国文化，对“面子”看的特别重，所以你会发现身边到处都是高级XXX 听着倍儿有面子，程序员也不例外。 但是你真要问每个人，你认为的高级XXX是什么样子的。估计每个人都有不同的回答。
 我还记得在我刚开始从事编程工作的时候，对坐在边上不远的那位我心目中的高级程序员的印象是：
工作至少有6、7年以上，能写一个用起来很方便、看起来很牛逼、但是不太容易让初级人员看懂的框架。
前两天，我把这个问题丢到群里，大家给出的答案中，占比最高的是以下几个。
 有 N 年以上编程经验（大部分都说5年以上） 有出版过技术图书 对某领域内对常用框架原理有了解，并且实际使用超过2年 可以随时随地快速写出常见的一些算法 至少封装过一个被全局使用的开发框架 写出来的代码，阅读起来很好理解 能带领其他人员成功完成项目   这件事对大家来说就是常说的，“一千个人眼中有一千个哈姆雷特”。 不过这也正常，毕竟像初级、中级、高级这种高度抽象的词汇， 想要得到一个可描述的定义与人交流，必然需要夹杂着个人的主观因素。
 但是很多行业都在这么进行分类，自然有它的道理和好处。
我觉得其中最大的一个好处恰好是「主观」的附属品——「弹性」。
比如，我现在想招一位高级程序员，面试的时候不管是通过还是不通过， 我都有理由来解释我对“高级”的定义。如此一来，我对陌生人的判断就有了更大的「弹性」。
这其实是面试官的一种权利，也是长期以来面试者总在面试中处于下峰的原因之一。
事物总是有两面性的，我们在对陌生人弹性的同时，间接的也对内部的人弹性了， 会导致内部的一些人才培养出现问题。
比如，你觉得内部的高级程序员不够，希望能在外部招聘的同时，从内部也培养一些出来。 但是此时，你又面临了需要定义什么是“高级”的问题。
如果没法定义一个能够达成共识的标准，又如何指导培养的方向呢？只能是一句空话。
长期以往会导致更严重的问题： 真正的高级程序员不够，只能让中级程序员顶上。 顶替的时间长了，会让一些中级程序员误以为自己已经达到了高级水平。
在我平时的面试中，这样的案例屡见不鲜。网上流传的工作10年 = 1年重复10次的段子是真实存在的。
下面我来聊聊我对「什么是高级程序员」的个人看法，欢迎你和我一起探讨。
不管是什么行业，什么岗位，在这个高度分工协作的现代社会，所需的能力主要分为三个维度。
 专业能力 连接能力 领导能力  我对程序员在这三个维度的理解大致是以下这个样子。
先卖个关子，文章的最后我会将这三个维度组合起来，你会发现一片新的天地。 根据这三个维度的水平差异，我们对初级程序员、中级程序员、高级程序员做一个简要的描述。
01 初级程序员 - 知道有事要做 处在初级阶段的时候，我们的精力大多只会专注在专业能力的提升上。这个时候「领导能力」和「连接能力」是很弱的。
所以，这个时候哪怕你有强烈的好奇心也无法很好的表达出来，大多只能被动的接受工作安排。
在这个时期做事情需要依赖一些教程、文档，只能“依样画葫芦”，几乎不能在不借助外部信息的情况下解决之前从未遇到过的新问题，所以百度、Google就成了他们唯一的选择。
你可以在你的身边观察一下，如果经常有以下这些场景出现，大多是初级程序员的表现。
很难提出正确的问题，大多会直接问别人这个功能应该怎么做。如果你清楚地向他解释，他就会完全按你说的去做，甚至你写的示例代码都会copy过去。因为在他们的世界里，只有编译成功和编译失败，任务完成和任务未完成。
经常犯错误，所以会预留过多“弹性时间”，以便有时间在到期日之前重做。所以总会抱怨“没时间”。
对与自己有工作交集的人员的职能没有认识。比如，对测试人员总是充满敌意的，因为他们发现了错误，“阻碍”了自己完成工作。
还没注意养成一些好习惯，比如习惯性的提炼重复代码、编写风格一致的代码、自测等等。
很遗憾，看似很初级的阶段，并不只是刚踏入工作的程序员所属，在实际工作中，也有不少工作多年的人还处在这个阶段。
02 中级程序员 - 知道如何做某事 对人群按照单一维度进行划分，大多数时候都是符合正态分布的，这里也不例外。中级程序员是我们身边最多的，包括那些不得不穿上高级程序员马甲的中级程序员。</description>
    </item>
    
    <item>
      <title>高级程序员到底是什么样子的？</title>
      <link>http://i-cooltea.github.io/posts/%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/</link>
      <pubDate>Fri, 27 Sep 2019 09:33:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/</guid>
      <description>这篇文章主题很简单，就是一个很常见的话题
“什么是高级程序员？”。  我们的中国文化，对“面子”看的特别重，所以你会发现身边到处都是高级XXX 听着倍儿有面子，程序员也不例外。 但是你真要问每个人，你认为的高级XXX是什么样子的。估计每个人都有不同的回答。
 我还记得在我刚开始从事编程工作的时候，对坐在边上不远的那位我心目中的高级程序员的印象是：
工作至少有6、7年以上，能写一个用起来很方便、看起来很牛逼、但是不太容易让初级人员看懂的框架。
前两天，我把这个问题丢到群里，大家给出的答案中，占比最高的是以下几个。
 有 N 年以上编程经验（大部分都说5年以上） 有出版过技术图书 对某领域内对常用框架原理有了解，并且实际使用超过2年 可以随时随地快速写出常见的一些算法 至少封装过一个被全局使用的开发框架 写出来的代码，阅读起来很好理解 能带领其他人员成功完成项目   这件事对大家来说就是常说的，“一千个人眼中有一千个哈姆雷特”。 不过这也正常，毕竟像初级、中级、高级这种高度抽象的词汇， 想要得到一个可描述的定义与人交流，必然需要夹杂着个人的主观因素。
 但是很多行业都在这么进行分类，自然有它的道理和好处。
我觉得其中最大的一个好处恰好是「主观」的附属品——「弹性」。
比如，我现在想招一位高级程序员，面试的时候不管是通过还是不通过， 我都有理由来解释我对“高级”的定义。如此一来，我对陌生人的判断就有了更大的「弹性」。
这其实是面试官的一种权利，也是长期以来面试者总在面试中处于下峰的原因之一。
事物总是有两面性的，我们在对陌生人弹性的同时，间接的也对内部的人弹性了， 会导致内部的一些人才培养出现问题。
比如，你觉得内部的高级程序员不够，希望能在外部招聘的同时，从内部也培养一些出来。 但是此时，你又面临了需要定义什么是“高级”的问题。
如果没法定义一个能够达成共识的标准，又如何指导培养的方向呢？只能是一句空话。
长期以往会导致更严重的问题： 真正的高级程序员不够，只能让中级程序员顶上。 顶替的时间长了，会让一些中级程序员误以为自己已经达到了高级水平。
在我平时的面试中，这样的案例屡见不鲜。网上流传的工作10年 = 1年重复10次的段子是真实存在的。
下面我来聊聊我对「什么是高级程序员」的个人看法，欢迎你和我一起探讨。
不管是什么行业，什么岗位，在这个高度分工协作的现代社会，所需的能力主要分为三个维度。
 专业能力 连接能力 领导能力  我对程序员在这三个维度的理解大致是以下这个样子。
先卖个关子，文章的最后我会将这三个维度组合起来，你会发现一片新的天地。 根据这三个维度的水平差异，我们对初级程序员、中级程序员、高级程序员做一个简要的描述。
01 初级程序员 - 知道有事要做 处在初级阶段的时候，我们的精力大多只会专注在专业能力的提升上。这个时候「领导能力」和「连接能力」是很弱的。
所以，这个时候哪怕你有强烈的好奇心也无法很好的表达出来，大多只能被动的接受工作安排。
在这个时期做事情需要依赖一些教程、文档，只能“依样画葫芦”，几乎不能在不借助外部信息的情况下解决之前从未遇到过的新问题，所以百度、Google就成了他们唯一的选择。
你可以在你的身边观察一下，如果经常有以下这些场景出现，大多是初级程序员的表现。
很难提出正确的问题，大多会直接问别人这个功能应该怎么做。如果你清楚地向他解释，他就会完全按你说的去做，甚至你写的示例代码都会copy过去。因为在他们的世界里，只有编译成功和编译失败，任务完成和任务未完成。
经常犯错误，所以会预留过多“弹性时间”，以便有时间在到期日之前重做。所以总会抱怨“没时间”。
对与自己有工作交集的人员的职能没有认识。比如，对测试人员总是充满敌意的，因为他们发现了错误，“阻碍”了自己完成工作。
还没注意养成一些好习惯，比如习惯性的提炼重复代码、编写风格一致的代码、自测等等。
很遗憾，看似很初级的阶段，并不只是刚踏入工作的程序员所属，在实际工作中，也有不少工作多年的人还处在这个阶段。
02 中级程序员 - 知道如何做某事 对人群按照单一维度进行划分，大多数时候都是符合正态分布的，这里也不例外。中级程序员是我们身边最多的，包括那些不得不穿上高级程序员马甲的中级程序员。</description>
    </item>
    
    <item>
      <title>个人成长之路No.5  巴比伦的骆驼商人</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFno.5-%E5%B7%B4%E6%AF%94%E4%BC%A6%E7%9A%84%E9%AA%86%E9%A9%BC%E5%95%86%E4%BA%BA/</link>
      <pubDate>Tue, 17 Sep 2019 16:10:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AFno.5-%E5%B7%B4%E6%AF%94%E4%BC%A6%E7%9A%84%E9%AA%86%E9%A9%BC%E5%95%86%E4%BA%BA/</guid>
      <description>&amp;ldquo;你的债务就是你的敌人，它们迫使你逃离巴比伦，你把它们留在那里，它们就会越变越强大，强大到你根本无力应对。&amp;rdquo;
人越饿的时候，头脑就会越清晰，对食物的气味也会越敏感。 阿祖尔的儿子塔卡德对这个说法坚信不疑。 整整两天，他几乎都没吃过什么东西，只吃了两颗从别人家的花园里偷摘的小无花果。 他还没来得及再摘一颗，一个妇人就发现了他，生气地向他跑过去， 大骂了他一顿，并把他赶到了街上。 直到他慌不择路逃到市集上，远处传来的妇人尖声叫骂依然充斥在他耳内，在他脑海中不断回响，这使得他断绝了不安分的念头。
市集上的女商贩拎着篮子，篮子里装着甜美诱人的水果，塔卡德忍不住把手伸了过去想偷拿几个，可是一想起那个妇人尖刻的话语，他又把手缩了回来。 以前塔卡德从不觉得巴比伦的市场上有那么多可吃的东西，并且如此美味，香气诱人。 离开市集后，他经过小旅店，在一家餐馆前面徘徊，他心想在那里也许能遇上个认识的人，可以借到一枚铜币。 有了这么慷慨的馈赠，就能从冷淡的店主那里换来一点微笑。 他深知没钱是多么招人鄙视。 正想着，一张他唯恐避之不及的面孔忽然出现在他面前。 来人瘦高个子，正是骆驼商人达巴希尔。
在塔卡德所有借过小钱的债主里，达巴希尔是最让他难堪的一个，因为他没能按照承诺及时地把欠债还给他。 见到塔卡德，达巴希尔眼前一亮：“啊哈，是塔卡德啊！可算是找到你了！一个月前我借给你的那两个铜币，你该还给我了吧？还有再之前你借的那枚银币，也该还了吧？遇上你真是太好了，正好我今天等这些钱用。 现在就还吧，小伙子，你说怎样？” 塔卡德脸涨得通红，说话也开始结结巴巴。 他肚子里空空荡荡，已经没有力气向心直口快的达巴希尔辩解了。 “真是抱歉，十分过意不去。 ”他嗫嚅着，“但今天我实在是没有铜板也没有银币可以还给你。 ” “那就去挣啊！”达巴希尔坚持要他今天就还，“赶紧去挣几个铜币和银币还给你父亲的老朋友吧，我可是在你最需要的时候伸出过援手啊！” “我霉运缠身，阻碍重重，实在是还不起。 ” “霉运缠身？你自己软弱无能竟然还怪罪于神灵！对那些借债多还钱少的家伙们来说，霉运当然一直跟着他。 过来吧，孩子，我饿了，要去吃点东西，顺便给你讲个故事。 ” 达巴希尔直言不讳，一针见血，塔卡德有些害怕，不敢跟着他。 但是如果没有这个邀请，塔卡德是怎么也不可能有机会走进餐馆，吃上一顿渴望已久的饭菜。 于是他战战兢兢，窘迫地跟在达巴希尔身后走进了餐馆。 达巴希尔把他推到远处的角落里，坐在一块小地毯上。 餐馆老板考斯科尔满面笑容地走过来招待，达巴希尔像往常一样毫无顾忌地对他开着玩笑：“沙漠里的肥蜥蜴，给我来一只美味多汁的羊腿，再来点面包，配上各种蔬菜，我饿极了，要大吃一顿。 别忘了我这儿还有一位朋友，给他来一壶水吧，要冷的，这天气实在太热。 ” 塔卡德的心往下一沉，难道达巴希尔的意思是要让自己坐在旁边喝着凉水看着他吃完一整只羊腿吗？他无言以对，脑子里一片空白。 对于他的沉默，达巴希尔可不会想那么多。 他笑着，友善地朝店里其他的客人招手寒暄。 达巴希尔交游广阔，客人们几乎都认识他。 达巴希尔接着对塔卡德说话了。 “我在一个从乌尔法旅行回来的人那里听说过一个故事。 那里有个有钱人，他有一块切割得非常薄的石头，薄到可以透过它看到别的东西，他把它装在自家房子的窗户上挡雨。 据那个旅客说，那块石头是黄色的，在主人的允许下，他曾透过石头往外看，他看到外面的世界呈现出一种奇怪的状态，跟真实的世界大不一样。 塔卡德，你是怎么想的？你能想象出一个人眼里的世界会与真实世界的颜色完全不同吗？” “我不好说。 ”年轻人回答，他显然对达巴希尔面前那只肥美的羊腿更感兴趣。 “好吧，我觉得这是真的，因为我也曾经看见过一个与真实世界完全不同颜色的世界。 接下来我要讲的是一个我怎么重新看到世界的真实色彩的故事。 ” “达巴希尔要讲故事了。 ”邻座的客人们开始窃窃私语，纷纷把自己的地毯拖过来，还有的人把吃的东西挪过来，大家围成一个半圆形坐到达巴希尔身边。 他们啃着肉骨头，在塔卡德面前坐下，喧闹嬉笑着。 塔卡德是其中唯一一个没有东西吃的人。 达巴希尔完全不准备跟他分享任何食物，甚至连从硬面包上掉下来的一小块都懒得示意与他分享，直接把面包屑从盘子里撒到了地上。 达巴希尔开始说话了。 “我要讲的这个故事，”他停了一下，咬了一大口羊腿，“说的是我早年怎么成为一个骆驼商人的事。 有没有人知道我曾经在叙利亚当过奴隶？” 听众们低声诧异，这全在达巴希尔意料当中，他满意地微笑着，聆听着大家的私语。 “我年轻的时候，”达巴希尔又狠狠地咬了一口羊腿，接着说，“曾跟着我的父亲学习怎么做生意，他是一个做马鞍的工匠。 我在他的店里干活，然后又结了婚。 因为年轻，手艺又不熟练，我挣的钱很少，刚刚够我和妻子的家用。 我渴求那些我根本买不起的好东西。 很快我发现店老板们竟然愿意让我赊账买东西，我可以不给钱就拿走货物，只要过段时间再把钱补上就好。 “因为年轻不懂事，又毫无生活经验，当时我并不知道那些入不敷出的人实际上是在把自己置于不必要的放纵之中，如此一来，他得到的必将是巨大的麻烦和耻辱。 我一发不可收拾，纵容自己对锦衣华服的欲望，为妻子、为我们这个家买了很多超过我们购买能力的奢侈品。 “开始的时候一切都还在我可以控制的范围之内，但一段时间之后我就发现我挣到的钱根本不够维持我们的生活，更不用说偿还债务了。 债主们开始向我追讨我因过度购买而产生的欠账，我的生活变得一团糟。 我向朋友借钱还债，但欠下他们的钱我还是没法偿还。 情况变得越来越糟，我的妻子不得不离开我回了娘家，屈辱地在父兄的荫庇下生活。 于是我决定离开巴比伦，去一个能给年轻人更好机会的别的什么城市。 “之后有两年的时间我都在为一个沙漠商队工作，颠沛流离，居无定所，却还是碌碌无为一事无成。 然后，我加入了一伙强盗的队伍，在沙漠里抢劫那些手无寸铁的商队。 我的所作所为让我无脸回去见我的父亲，我透过有色的石头看着这个世界，完全没有意识到自己已经堕落到这个地步。 “我们这个强盗团伙的第一次行动十分成功。 我们劫到了一大笔黄金、丝绸和贵重的货物。 我们把这些东西带到吉尼尔，很快就挥霍一空。 “可是第二次我们就没那么幸运了。 我们刚刚得手就遭遇了当地一群持矛武士的袭击，那些武士受雇于商队，保护商队的安全。 我们的两个头儿被杀，剩下的被押到了大马士革，在那里我们被扒光衣服当做奴隶卖了。 “我被一个叙利亚沙漠酋长用两枚银币买下，剪去了头发，仅留一条缠腰布裹身，和其他奴隶没有什么两样。 作为一个胆大鲁莽的年轻人，我依然把这一切看做是一场冒险，直到有一天主人把我带到他的四个妻子面前，说要把我阉了来服侍她们。 “顿时我觉得一切都完了，彻底绝望了。 这些沙漠里的人又凶残又好斗，我受制于人，又没有武器，根本逃不出去。 “四个女人打量了我一番，我心惊胆颤地站在那里，希望能博得她们的怜悯。 酋长的大老婆希拉比另外几个女人年纪要大一些，她上下打量我的时候一脸冷漠，我只好无望地扭过头。 接下来是一个傲慢的美女，她不无鄙夷地看着我，就像看一条地上的虫子。 剩下两个年轻点的嗤嗤笑着，把一切都看做是个笑话。 “我很长时间地站在那里，等着女人们对我的宣判。 每个女人都在等着别人做决定，她们都没说话。 最后，希拉冷冷地发话了。 “‘我们已经有很多阉人服侍了，但是看骆驼的却没有几个，而且他们还都是些不中用的东西。 我母亲病了，发着烧，我正准备今天去看望她。 我没有信得过的奴隶来给我牵骆驼，问问这个奴隶他会不会干这活。 ’ “于是主人问我：‘你了解骆驼吗？’ “我极力隐藏着我的欣喜，尽量不动声色地回答说：‘我能让骆驼跪下，能让它们驮运货物，还能带着它们长途跋涉而不让它们感觉疲累。 如果有需要的话，我还能修理它们的鞍鞯和装饰。 ’ “‘这奴隶说得够多了，’主人说，‘如果你想要，就让他去给你照看骆驼吧，希拉。 ’ “于是我被转交给希拉。 当天我就带领她的骆驼走了很远的路去看望她生病的母亲。 我找了个机会感谢她为我说情，并告诉她我并非生来就是奴隶，我的父亲是一个自由民，在巴比伦城是一个诚实可靠受人尊重的马鞍工匠。 我还告诉她许多我的事情。 她的反应让我感到尴尬而不安，事后很久我都在仔细思考她对我说的那些话。 “‘你的软弱无能已经把你带到现在这种地步，你怎么还能说自己是个自由民呢？不管一个人出身如何，如果他的灵魂是奴隶，他就是个奴隶，正如水往低处流。 就算遭遇再多的厄运和不幸，如果一个人灵魂里是自由民，他都能在他的城市里得到荣誉，受到众人的尊敬。 ’ “我当了一年多的奴隶，与真正的奴隶们生活在一起，但是我并没有变成跟他们一样。 有一天，希拉问我：‘当其他的奴隶们聚在一起享受他们的欢乐时，你为什么独自一个人坐在帐篷里？’ “我回答她说：‘我在思索你对我说过的那些话。 我想知道我是不是真的有一个奴隶的灵魂，我不能融入他们，因此我必须一个人呆着。 ’ “‘我跟你一样，必须一个人呆着。 ’她向我吐露了秘密，‘我的嫁妆很庞大，酋长跟我结婚就是为了它。 但是他并不爱我。 每个女人都渴望被爱。 因为他不爱我，也因为我没能为他生下一男半女，所以我只能独自一人。 如果我是个男人，我情愿去死也不愿意当奴隶，但这个部落的习俗就是把女人当做奴隶。 ’‘现在你怎么看我？’我忽然问她，‘我的灵魂是自由民还是奴隶？’ “‘你想还清你在巴比伦的那些债务吗？’她回避了我的问题，反问我。 “‘是的，我很想。 但是我没办法还。 ’ “‘如果你就这么让时间溜走，而不为还债做任何努力，那么你就有一个可鄙的奴隶灵魂。 不尊重自己的人，没有人会尊重他。 不愿意老老实实还清债务的人，同样也没有人愿意尊重他。 ’ “‘可作为一个叙利亚的奴隶我又能做些什么呢？’ “‘那就继续在叙利亚当奴隶，你这个懦夫！’ “‘我不是懦夫。 ’我极力否认。 “‘那就证明给人看。 ’ “‘怎么证明？’ “‘你们伟大的巴比伦国王不是想尽一切办法、动用一切力量来抵御外敌吗？你的债务就是你的敌人，它们迫使你逃离巴比伦，你把它们留在那里，它们就会越变越强大，强大到你根本无力应对。 像个男人一样去跟它们战斗吧！你本来可以打败它们并获得市民们的尊重的。 但是你根本没有心思去与它们作战，你眼睁睁看着自尊被打垮，甘心沦落到叙利亚做奴隶。 ’ “我仔细思索着她毫不留情的斥责，并想出了很多理由来辩解，好向她证明我内心并非奴隶，但是我没有机会对她说这些话。 三天后，希拉的女仆把我带到她的面前。 “‘我的母亲又病重了，’她说，‘去我丈夫的驼群里挑两匹最好的骆驼，给它们上好鞍鞯，系好装水的皮囊和褡裢，要足够长途使用。 女仆会带你去厨房拿一些食物。 ’我给骆驼上好了行李，心想女仆给我的东西是不是太多了，因为她母亲就住在离这里不到一天路程的地方。 我牵着女主人的骆驼走在前面，女仆骑着骆驼跟在后面，当我们到达她母亲的居所时，天正好黑下来了。 希拉把女仆打发走，然后对我说： “‘达巴希尔，你拥有的究竟是一个自由民的灵魂，还是一个奴隶的灵魂？’ “‘我有一个自由民的灵魂。 ’我坚定地回答。 “‘现在你有机会去证明了。 你的主人已经喝得不省人事，他的头领们也醉醺醺的。 带上这些骆驼逃吧，这个包袱里装着你主人的一些衣服，你穿上它乔装一下。 我会告诉他们，在我看望我母亲的路上，你偷走骆驼跑了。 ’ “‘你有着王后一样的高贵灵魂。 ’我对她说，‘你跟我走吧，希望我会带给你幸福！’ “她回答说：‘跟人私奔到远方，满眼都是陌生人，这样的生活是不会幸福的。 你自己走吧。 路途遥远，缺水少食，愿沙漠中的诸神保佑你！’ “我不再勉强她跟我一起走，深深感谢过她之后，我离开她向前走去，走进了茫茫的黑夜里。 我对这个地方完全陌生，只知道通往巴比伦的大概方向。 我鼓起勇气穿越沙漠，翻过大山，朝着那个方向坚定向前跋涉。 我骑着一头骆驼，另一头我把它牵在手上，让它跟在旁边。 我知道偷了主人东西逃走的奴隶会遭受怎样残酷的惩罚，会有怎样的悲惨命运，这让我害怕，也激励着我不分昼夜不眠不休地向前奔逃。 “第二天傍晚的时候，我到达一个跟沙漠一样贫瘠的荒丘，锋利粗糙的岩石无情地磨损着骆驼的脚掌，很快它们的脚步就慢了下来，只能痛苦而又小心翼翼地向前行走。 我没遇上人，也看不到野兽，也完全能理解为什么它们根本不来这里。 “接下去的那段路几乎很少有人能活着走完。 我骑着骆驼，一天接一天地缓慢跋涉。 食物和水都用光了，毒日头狠狠地折磨着我。 在第九天就要结束的时候，我爬上了山顶，随即又滚了下来，再也没有力气重新爬上去，我感觉自己就要死了：我将会在这个被遗弃的地方孤单死去。 “我绝望地躺在地上，伸直了自己的身躯，沉沉睡去，直到清晨的第一道阳光把我唤醒。 “早晨的空气很凉爽，我坐起来调整着身体和气息，骆驼无精打采地趴在不远处。 四周山峦起伏，广阔荒凉，满是岩石和沙砾，荆棘遍布，没有水，也没有可吃的东西。 “难道我真的要在这片宁静的荒野死去？这时我的神智前所未有的清醒。 糟糕的身体状况已经变得无关紧要，我那开裂流血的嘴唇，干燥肿胀的舌头，空空荡荡的胃，此时似乎没有了头一天那令人难以忍受的巨大痛楚。 “我朝着那令人生厌的远方望去，脑海里又浮现出那个问题：‘我的灵魂到底是一个自由民，还是奴隶？’随即我清楚地认识到，如果我所拥有的是一个奴隶的灵魂，那么我大可以就此放弃，躺倒在这沙漠上静静等待死亡的来临，这正是一个逃亡奴隶的最后下场。 “但如果我拥有的是一个自由民的灵魂呢？会发生些什么？我当然会想尽办法回到巴比伦，把那些相信我、愿意借钱给我的人的欠债全部还清，接回深爱我的妻子，重新让她过上幸福的生活，让我的父母为此而感到安心和满足。 “希拉曾经对我说过：‘你的债务就是你的敌人。 ’的确如此。 为什么我不能像一个真正的男人一样顶天立地地活着呢？为什么我会使我的妻子不得不回娘家呢？ “接着，奇妙的事情发生了。 整个世界的颜色变得跟原来完全不同，以前我透过有色石头看到的那个世界忽然不见了。 我终于看到了这个世界真正的价值所在，发现了生命的真谛。 “在沙漠里死去？绝不！在这个全新的视野里，我看到了接下来我必须要做的事情。 首先，我要回到巴比伦，勇敢地面对我的每一个债主，我会告诉他们，在多年的颠沛流离之后，我终于回来偿还我的债务了。 在诸神的庇佑下，我必将尽快地还清所有的债务。 然后我要重新给我的妻子一个温暖的家，并努力成为能让我的父母骄傲自豪的人。 “我的债务就是我的敌人，但我的债主们却都是我的朋友，因为他们都曾信任我。 “我虚弱地站起来，步履蹒跚地向前走去。 饥饿算得了什么？口渴又能怎样？它们只是前进道路上的一点点小障碍。 我体内的那个自由民的灵魂苏醒了，崛起了，他会回去击倒他的敌人、报答他的朋友。 我热血沸腾，浑身充满了力量。 “骆驼听到了我沙哑的呐喊声，它们黯淡的眼神也亮了起来。 经过不断的努力，多次尝试之后，骆驼们终于站了起来，坚持着朝着北方向前走去。 我内心有个声音在告诉我，我们一定会回到巴比伦！我们找到了水。 我们找到了一块丰饶的土地，那里生长着青草和水果。 我们还找到了一条通往巴比伦的小路。 自由民的灵魂把生活看作是一串接一串等待解决的问题，然后他们会逐一地去解决。 而奴隶的灵魂面对这一切，只会哀哀抱怨：‘我只是个奴隶，我又能怎么办？’ “你呢，塔卡德？饥饿有没有使你的头脑变得清醒？你准备好去找回你的自尊了吗？你看到世界真实的颜色了吗？你有没有渴望去偿还你所有的欠债，不管它们数目有多少？然后在巴比伦重新获得人们的尊重？” 年轻人塔卡德的眼睛湿润了。 他跪在地上，热切地直起了身子，感谢父亲的老朋友达巴希尔：“你为我展现了一个新的世界，我已经感受到一个自由民的灵魂在我内心涌现。 ” “你返回巴比伦之后，又发生了些什么呢？”一个对他的故事很感兴趣的听众问达巴希尔。 “有志者，事竟成。 ”达巴希尔回答说，“我知道我有那个决心，于是我着手开始寻找一个解决问题的办法。 首先我去拜访了每一个我曾经向他借过钱的朋友，乞求他们的原谅，恳请他们能宽限一段时间，好让我能赚到足够的钱还给他们。 大多数的朋友见到我都很高兴，也有一些见到我就狠狠地骂了我一顿，但还有一些朋友他们不但答应了我的请求，还又一次帮助了我。 有一个朋友也确实给了我当时最需要的帮助，他就是放债人马松。 在得知我曾在叙利亚当过骆驼工之后，马松把我介绍给了骆驼商人老内巴图，他正受命于我们的国王，为国王的远征军购买一批强壮的骆驼。 跟着老内巴图，我对骆驼的了解派上了大用场。 渐渐地，我有能力还清我欠下的每一个钱了。 到最后，我终于昂首挺胸抬起头做人了，成为了一个和大家一样受人尊重的人。 ” 达巴希尔又开始注意起自己的食物了。 “考斯科尔你这只蜗牛！”他大声叫着，催促正在厨房忙碌的店老板，“我的饭菜都凉了。 给我再来一些现烤的肉，然后给我老朋友的儿子塔卡德也来上一大份。 他可饿坏了，这回可以和我一起享用美食了。 ” 巴比伦骆驼商人达巴希尔的故事讲完了。 当他找到先贤们早已洞悉和运用的真理，并能深刻理解这些真理的精髓时，他就找到了自己的灵魂所在。 从古至今，人们从这个真理中受益，它带领人们走出困境，获得成功。 将来，它也依然会指导那些有智慧领悟到它神奇力量的人。 人们都应该看到这句话： 有决心，就能找到出路。 **</description>
    </item>
    
    <item>
      <title>巴比伦的骆驼商人</title>
      <link>http://i-cooltea.github.io/posts/%E5%B7%B4%E6%AF%94%E4%BC%A6%E7%9A%84%E9%AA%86%E9%A9%BC%E5%95%86%E4%BA%BA/</link>
      <pubDate>Tue, 17 Sep 2019 16:10:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%B7%B4%E6%AF%94%E4%BC%A6%E7%9A%84%E9%AA%86%E9%A9%BC%E5%95%86%E4%BA%BA/</guid>
      <description>&amp;ldquo;你的债务就是你的敌人，它们迫使你逃离巴比伦，你把它们留在那里，它们就会越变越强大，强大到你根本无力应对。&amp;rdquo;
人越饿的时候，头脑就会越清晰，对食物的气味也会越敏感。 阿祖尔的儿子塔卡德对这个说法坚信不疑。 整整两天，他几乎都没吃过什么东西，只吃了两颗从别人家的花园里偷摘的小无花果。 他还没来得及再摘一颗，一个妇人就发现了他，生气地向他跑过去， 大骂了他一顿，并把他赶到了街上。 直到他慌不择路逃到市集上，远处传来的妇人尖声叫骂依然充斥在他耳内，在他脑海中不断回响，这使得他断绝了不安分的念头。
市集上的女商贩拎着篮子，篮子里装着甜美诱人的水果，塔卡德忍不住把手伸了过去想偷拿几个，可是一想起那个妇人尖刻的话语，他又把手缩了回来。 以前塔卡德从不觉得巴比伦的市场上有那么多可吃的东西，并且如此美味，香气诱人。 离开市集后，他经过小旅店，在一家餐馆前面徘徊，他心想在那里也许能遇上个认识的人，可以借到一枚铜币。 有了这么慷慨的馈赠，就能从冷淡的店主那里换来一点微笑。 他深知没钱是多么招人鄙视。 正想着，一张他唯恐避之不及的面孔忽然出现在他面前。 来人瘦高个子，正是骆驼商人达巴希尔。
在塔卡德所有借过小钱的债主里，达巴希尔是最让他难堪的一个，因为他没能按照承诺及时地把欠债还给他。 见到塔卡德，达巴希尔眼前一亮：“啊哈，是塔卡德啊！可算是找到你了！一个月前我借给你的那两个铜币，你该还给我了吧？还有再之前你借的那枚银币，也该还了吧？遇上你真是太好了，正好我今天等这些钱用。 现在就还吧，小伙子，你说怎样？” 塔卡德脸涨得通红，说话也开始结结巴巴。 他肚子里空空荡荡，已经没有力气向心直口快的达巴希尔辩解了。 “真是抱歉，十分过意不去。 ”他嗫嚅着，“但今天我实在是没有铜板也没有银币可以还给你。 ” “那就去挣啊！”达巴希尔坚持要他今天就还，“赶紧去挣几个铜币和银币还给你父亲的老朋友吧，我可是在你最需要的时候伸出过援手啊！” “我霉运缠身，阻碍重重，实在是还不起。 ” “霉运缠身？你自己软弱无能竟然还怪罪于神灵！对那些借债多还钱少的家伙们来说，霉运当然一直跟着他。 过来吧，孩子，我饿了，要去吃点东西，顺便给你讲个故事。 ” 达巴希尔直言不讳，一针见血，塔卡德有些害怕，不敢跟着他。 但是如果没有这个邀请，塔卡德是怎么也不可能有机会走进餐馆，吃上一顿渴望已久的饭菜。 于是他战战兢兢，窘迫地跟在达巴希尔身后走进了餐馆。 达巴希尔把他推到远处的角落里，坐在一块小地毯上。 餐馆老板考斯科尔满面笑容地走过来招待，达巴希尔像往常一样毫无顾忌地对他开着玩笑：“沙漠里的肥蜥蜴，给我来一只美味多汁的羊腿，再来点面包，配上各种蔬菜，我饿极了，要大吃一顿。 别忘了我这儿还有一位朋友，给他来一壶水吧，要冷的，这天气实在太热。 ” 塔卡德的心往下一沉，难道达巴希尔的意思是要让自己坐在旁边喝着凉水看着他吃完一整只羊腿吗？他无言以对，脑子里一片空白。 对于他的沉默，达巴希尔可不会想那么多。 他笑着，友善地朝店里其他的客人招手寒暄。 达巴希尔交游广阔，客人们几乎都认识他。 达巴希尔接着对塔卡德说话了。 “我在一个从乌尔法旅行回来的人那里听说过一个故事。 那里有个有钱人，他有一块切割得非常薄的石头，薄到可以透过它看到别的东西，他把它装在自家房子的窗户上挡雨。 据那个旅客说，那块石头是黄色的，在主人的允许下，他曾透过石头往外看，他看到外面的世界呈现出一种奇怪的状态，跟真实的世界大不一样。 塔卡德，你是怎么想的？你能想象出一个人眼里的世界会与真实世界的颜色完全不同吗？” “我不好说。 ”年轻人回答，他显然对达巴希尔面前那只肥美的羊腿更感兴趣。 “好吧，我觉得这是真的，因为我也曾经看见过一个与真实世界完全不同颜色的世界。 接下来我要讲的是一个我怎么重新看到世界的真实色彩的故事。 ” “达巴希尔要讲故事了。 ”邻座的客人们开始窃窃私语，纷纷把自己的地毯拖过来，还有的人把吃的东西挪过来，大家围成一个半圆形坐到达巴希尔身边。 他们啃着肉骨头，在塔卡德面前坐下，喧闹嬉笑着。 塔卡德是其中唯一一个没有东西吃的人。 达巴希尔完全不准备跟他分享任何食物，甚至连从硬面包上掉下来的一小块都懒得示意与他分享，直接把面包屑从盘子里撒到了地上。 达巴希尔开始说话了。 “我要讲的这个故事，”他停了一下，咬了一大口羊腿，“说的是我早年怎么成为一个骆驼商人的事。 有没有人知道我曾经在叙利亚当过奴隶？” 听众们低声诧异，这全在达巴希尔意料当中，他满意地微笑着，聆听着大家的私语。 “我年轻的时候，”达巴希尔又狠狠地咬了一口羊腿，接着说，“曾跟着我的父亲学习怎么做生意，他是一个做马鞍的工匠。 我在他的店里干活，然后又结了婚。 因为年轻，手艺又不熟练，我挣的钱很少，刚刚够我和妻子的家用。 我渴求那些我根本买不起的好东西。 很快我发现店老板们竟然愿意让我赊账买东西，我可以不给钱就拿走货物，只要过段时间再把钱补上就好。 “因为年轻不懂事，又毫无生活经验，当时我并不知道那些入不敷出的人实际上是在把自己置于不必要的放纵之中，如此一来，他得到的必将是巨大的麻烦和耻辱。 我一发不可收拾，纵容自己对锦衣华服的欲望，为妻子、为我们这个家买了很多超过我们购买能力的奢侈品。 “开始的时候一切都还在我可以控制的范围之内，但一段时间之后我就发现我挣到的钱根本不够维持我们的生活，更不用说偿还债务了。 债主们开始向我追讨我因过度购买而产生的欠账，我的生活变得一团糟。 我向朋友借钱还债，但欠下他们的钱我还是没法偿还。 情况变得越来越糟，我的妻子不得不离开我回了娘家，屈辱地在父兄的荫庇下生活。 于是我决定离开巴比伦，去一个能给年轻人更好机会的别的什么城市。 “之后有两年的时间我都在为一个沙漠商队工作，颠沛流离，居无定所，却还是碌碌无为一事无成。 然后，我加入了一伙强盗的队伍，在沙漠里抢劫那些手无寸铁的商队。 我的所作所为让我无脸回去见我的父亲，我透过有色的石头看着这个世界，完全没有意识到自己已经堕落到这个地步。 “我们这个强盗团伙的第一次行动十分成功。 我们劫到了一大笔黄金、丝绸和贵重的货物。 我们把这些东西带到吉尼尔，很快就挥霍一空。 “可是第二次我们就没那么幸运了。 我们刚刚得手就遭遇了当地一群持矛武士的袭击，那些武士受雇于商队，保护商队的安全。 我们的两个头儿被杀，剩下的被押到了大马士革，在那里我们被扒光衣服当做奴隶卖了。 “我被一个叙利亚沙漠酋长用两枚银币买下，剪去了头发，仅留一条缠腰布裹身，和其他奴隶没有什么两样。 作为一个胆大鲁莽的年轻人，我依然把这一切看做是一场冒险，直到有一天主人把我带到他的四个妻子面前，说要把我阉了来服侍她们。 “顿时我觉得一切都完了，彻底绝望了。 这些沙漠里的人又凶残又好斗，我受制于人，又没有武器，根本逃不出去。 “四个女人打量了我一番，我心惊胆颤地站在那里，希望能博得她们的怜悯。 酋长的大老婆希拉比另外几个女人年纪要大一些，她上下打量我的时候一脸冷漠，我只好无望地扭过头。 接下来是一个傲慢的美女，她不无鄙夷地看着我，就像看一条地上的虫子。 剩下两个年轻点的嗤嗤笑着，把一切都看做是个笑话。 “我很长时间地站在那里，等着女人们对我的宣判。 每个女人都在等着别人做决定，她们都没说话。 最后，希拉冷冷地发话了。 “‘我们已经有很多阉人服侍了，但是看骆驼的却没有几个，而且他们还都是些不中用的东西。 我母亲病了，发着烧，我正准备今天去看望她。 我没有信得过的奴隶来给我牵骆驼，问问这个奴隶他会不会干这活。 ’ “于是主人问我：‘你了解骆驼吗？’ “我极力隐藏着我的欣喜，尽量不动声色地回答说：‘我能让骆驼跪下，能让它们驮运货物，还能带着它们长途跋涉而不让它们感觉疲累。 如果有需要的话，我还能修理它们的鞍鞯和装饰。 ’ “‘这奴隶说得够多了，’主人说，‘如果你想要，就让他去给你照看骆驼吧，希拉。 ’ “于是我被转交给希拉。 当天我就带领她的骆驼走了很远的路去看望她生病的母亲。 我找了个机会感谢她为我说情，并告诉她我并非生来就是奴隶，我的父亲是一个自由民，在巴比伦城是一个诚实可靠受人尊重的马鞍工匠。 我还告诉她许多我的事情。 她的反应让我感到尴尬而不安，事后很久我都在仔细思考她对我说的那些话。 “‘你的软弱无能已经把你带到现在这种地步，你怎么还能说自己是个自由民呢？不管一个人出身如何，如果他的灵魂是奴隶，他就是个奴隶，正如水往低处流。 就算遭遇再多的厄运和不幸，如果一个人灵魂里是自由民，他都能在他的城市里得到荣誉，受到众人的尊敬。 ’ “我当了一年多的奴隶，与真正的奴隶们生活在一起，但是我并没有变成跟他们一样。 有一天，希拉问我：‘当其他的奴隶们聚在一起享受他们的欢乐时，你为什么独自一个人坐在帐篷里？’ “我回答她说：‘我在思索你对我说过的那些话。 我想知道我是不是真的有一个奴隶的灵魂，我不能融入他们，因此我必须一个人呆着。 ’ “‘我跟你一样，必须一个人呆着。 ’她向我吐露了秘密，‘我的嫁妆很庞大，酋长跟我结婚就是为了它。 但是他并不爱我。 每个女人都渴望被爱。 因为他不爱我，也因为我没能为他生下一男半女，所以我只能独自一人。 如果我是个男人，我情愿去死也不愿意当奴隶，但这个部落的习俗就是把女人当做奴隶。 ’‘现在你怎么看我？’我忽然问她，‘我的灵魂是自由民还是奴隶？’ “‘你想还清你在巴比伦的那些债务吗？’她回避了我的问题，反问我。 “‘是的，我很想。 但是我没办法还。 ’ “‘如果你就这么让时间溜走，而不为还债做任何努力，那么你就有一个可鄙的奴隶灵魂。 不尊重自己的人，没有人会尊重他。 不愿意老老实实还清债务的人，同样也没有人愿意尊重他。 ’ “‘可作为一个叙利亚的奴隶我又能做些什么呢？’ “‘那就继续在叙利亚当奴隶，你这个懦夫！’ “‘我不是懦夫。 ’我极力否认。 “‘那就证明给人看。 ’ “‘怎么证明？’ “‘你们伟大的巴比伦国王不是想尽一切办法、动用一切力量来抵御外敌吗？你的债务就是你的敌人，它们迫使你逃离巴比伦，你把它们留在那里，它们就会越变越强大，强大到你根本无力应对。 像个男人一样去跟它们战斗吧！你本来可以打败它们并获得市民们的尊重的。 但是你根本没有心思去与它们作战，你眼睁睁看着自尊被打垮，甘心沦落到叙利亚做奴隶。 ’ “我仔细思索着她毫不留情的斥责，并想出了很多理由来辩解，好向她证明我内心并非奴隶，但是我没有机会对她说这些话。 三天后，希拉的女仆把我带到她的面前。 “‘我的母亲又病重了，’她说，‘去我丈夫的驼群里挑两匹最好的骆驼，给它们上好鞍鞯，系好装水的皮囊和褡裢，要足够长途使用。 女仆会带你去厨房拿一些食物。 ’我给骆驼上好了行李，心想女仆给我的东西是不是太多了，因为她母亲就住在离这里不到一天路程的地方。 我牵着女主人的骆驼走在前面，女仆骑着骆驼跟在后面，当我们到达她母亲的居所时，天正好黑下来了。 希拉把女仆打发走，然后对我说： “‘达巴希尔，你拥有的究竟是一个自由民的灵魂，还是一个奴隶的灵魂？’ “‘我有一个自由民的灵魂。 ’我坚定地回答。 “‘现在你有机会去证明了。 你的主人已经喝得不省人事，他的头领们也醉醺醺的。 带上这些骆驼逃吧，这个包袱里装着你主人的一些衣服，你穿上它乔装一下。 我会告诉他们，在我看望我母亲的路上，你偷走骆驼跑了。 ’ “‘你有着王后一样的高贵灵魂。 ’我对她说，‘你跟我走吧，希望我会带给你幸福！’ “她回答说：‘跟人私奔到远方，满眼都是陌生人，这样的生活是不会幸福的。 你自己走吧。 路途遥远，缺水少食，愿沙漠中的诸神保佑你！’ “我不再勉强她跟我一起走，深深感谢过她之后，我离开她向前走去，走进了茫茫的黑夜里。 我对这个地方完全陌生，只知道通往巴比伦的大概方向。 我鼓起勇气穿越沙漠，翻过大山，朝着那个方向坚定向前跋涉。 我骑着一头骆驼，另一头我把它牵在手上，让它跟在旁边。 我知道偷了主人东西逃走的奴隶会遭受怎样残酷的惩罚，会有怎样的悲惨命运，这让我害怕，也激励着我不分昼夜不眠不休地向前奔逃。 “第二天傍晚的时候，我到达一个跟沙漠一样贫瘠的荒丘，锋利粗糙的岩石无情地磨损着骆驼的脚掌，很快它们的脚步就慢了下来，只能痛苦而又小心翼翼地向前行走。 我没遇上人，也看不到野兽，也完全能理解为什么它们根本不来这里。 “接下去的那段路几乎很少有人能活着走完。 我骑着骆驼，一天接一天地缓慢跋涉。 食物和水都用光了，毒日头狠狠地折磨着我。 在第九天就要结束的时候，我爬上了山顶，随即又滚了下来，再也没有力气重新爬上去，我感觉自己就要死了：我将会在这个被遗弃的地方孤单死去。 “我绝望地躺在地上，伸直了自己的身躯，沉沉睡去，直到清晨的第一道阳光把我唤醒。 “早晨的空气很凉爽，我坐起来调整着身体和气息，骆驼无精打采地趴在不远处。 四周山峦起伏，广阔荒凉，满是岩石和沙砾，荆棘遍布，没有水，也没有可吃的东西。 “难道我真的要在这片宁静的荒野死去？这时我的神智前所未有的清醒。 糟糕的身体状况已经变得无关紧要，我那开裂流血的嘴唇，干燥肿胀的舌头，空空荡荡的胃，此时似乎没有了头一天那令人难以忍受的巨大痛楚。 “我朝着那令人生厌的远方望去，脑海里又浮现出那个问题：‘我的灵魂到底是一个自由民，还是奴隶？’随即我清楚地认识到，如果我所拥有的是一个奴隶的灵魂，那么我大可以就此放弃，躺倒在这沙漠上静静等待死亡的来临，这正是一个逃亡奴隶的最后下场。 “但如果我拥有的是一个自由民的灵魂呢？会发生些什么？我当然会想尽办法回到巴比伦，把那些相信我、愿意借钱给我的人的欠债全部还清，接回深爱我的妻子，重新让她过上幸福的生活，让我的父母为此而感到安心和满足。 “希拉曾经对我说过：‘你的债务就是你的敌人。 ’的确如此。 为什么我不能像一个真正的男人一样顶天立地地活着呢？为什么我会使我的妻子不得不回娘家呢？ “接着，奇妙的事情发生了。 整个世界的颜色变得跟原来完全不同，以前我透过有色石头看到的那个世界忽然不见了。 我终于看到了这个世界真正的价值所在，发现了生命的真谛。 “在沙漠里死去？绝不！在这个全新的视野里，我看到了接下来我必须要做的事情。 首先，我要回到巴比伦，勇敢地面对我的每一个债主，我会告诉他们，在多年的颠沛流离之后，我终于回来偿还我的债务了。 在诸神的庇佑下，我必将尽快地还清所有的债务。 然后我要重新给我的妻子一个温暖的家，并努力成为能让我的父母骄傲自豪的人。 “我的债务就是我的敌人，但我的债主们却都是我的朋友，因为他们都曾信任我。 “我虚弱地站起来，步履蹒跚地向前走去。 饥饿算得了什么？口渴又能怎样？它们只是前进道路上的一点点小障碍。 我体内的那个自由民的灵魂苏醒了，崛起了，他会回去击倒他的敌人、报答他的朋友。 我热血沸腾，浑身充满了力量。 “骆驼听到了我沙哑的呐喊声，它们黯淡的眼神也亮了起来。 经过不断的努力，多次尝试之后，骆驼们终于站了起来，坚持着朝着北方向前走去。 我内心有个声音在告诉我，我们一定会回到巴比伦！我们找到了水。 我们找到了一块丰饶的土地，那里生长着青草和水果。 我们还找到了一条通往巴比伦的小路。 自由民的灵魂把生活看作是一串接一串等待解决的问题，然后他们会逐一地去解决。 而奴隶的灵魂面对这一切，只会哀哀抱怨：‘我只是个奴隶，我又能怎么办？’ “你呢，塔卡德？饥饿有没有使你的头脑变得清醒？你准备好去找回你的自尊了吗？你看到世界真实的颜色了吗？你有没有渴望去偿还你所有的欠债，不管它们数目有多少？然后在巴比伦重新获得人们的尊重？” 年轻人塔卡德的眼睛湿润了。 他跪在地上，热切地直起了身子，感谢父亲的老朋友达巴希尔：“你为我展现了一个新的世界，我已经感受到一个自由民的灵魂在我内心涌现。 ” “你返回巴比伦之后，又发生了些什么呢？”一个对他的故事很感兴趣的听众问达巴希尔。 “有志者，事竟成。 ”达巴希尔回答说，“我知道我有那个决心，于是我着手开始寻找一个解决问题的办法。 首先我去拜访了每一个我曾经向他借过钱的朋友，乞求他们的原谅，恳请他们能宽限一段时间，好让我能赚到足够的钱还给他们。 大多数的朋友见到我都很高兴，也有一些见到我就狠狠地骂了我一顿，但还有一些朋友他们不但答应了我的请求，还又一次帮助了我。 有一个朋友也确实给了我当时最需要的帮助，他就是放债人马松。 在得知我曾在叙利亚当过骆驼工之后，马松把我介绍给了骆驼商人老内巴图，他正受命于我们的国王，为国王的远征军购买一批强壮的骆驼。 跟着老内巴图，我对骆驼的了解派上了大用场。 渐渐地，我有能力还清我欠下的每一个钱了。 到最后，我终于昂首挺胸抬起头做人了，成为了一个和大家一样受人尊重的人。 ” 达巴希尔又开始注意起自己的食物了。 “考斯科尔你这只蜗牛！”他大声叫着，催促正在厨房忙碌的店老板，“我的饭菜都凉了。 给我再来一些现烤的肉，然后给我老朋友的儿子塔卡德也来上一大份。 他可饿坏了，这回可以和我一起享用美食了。 ” 巴比伦骆驼商人达巴希尔的故事讲完了。 当他找到先贤们早已洞悉和运用的真理，并能深刻理解这些真理的精髓时，他就找到了自己的灵魂所在。 从古至今，人们从这个真理中受益，它带领人们走出困境，获得成功。 将来，它也依然会指导那些有智慧领悟到它神奇力量的人。 人们都应该看到这句话： 有决心，就能找到出路。 **</description>
    </item>
    
    <item>
      <title>个人成长之路 No.4 工作&amp;amp;生活之间的取舍</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.4-%E5%B7%A5%E4%BD%9Camp%E7%94%9F%E6%B4%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8F%96%E8%88%8D/</link>
      <pubDate>Fri, 06 Sep 2019 12:55:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.4-%E5%B7%A5%E4%BD%9Camp%E7%94%9F%E6%B4%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8F%96%E8%88%8D/</guid>
      <description>转自 作者:陈蔚铭 2019-05-01 「工作与生活平衡」是骗人的！学会这4种方法，勉强可以达到工作与生活的「调和」
 现代社会工时越来越长，常让人忙到怀疑人生。 于是「工作与生活平衡」的概念被提出：工作和生活是翘翘板的两端， 当「工作」变重，就在「生活」加入一些休闲来恢复「平衡」状态。 但这种追求完美「平衡」的方式真能让我们变得更快乐吗？
 创新点： 定义自己的人生、寻求工作与生活的「调和」比盲目追求别人的「平衡」更重要。
本文三大重点：  用自己标准定义成功人生，别被「模范人生」困住。 提高效率、善用时间的四个方法。 学习贝佐斯和布兰森「调和」生活与工作。  ##1. 用自己标准定义成功人生，别被「模范人生」困住 生活中，每个人都身兼许多角色：职场中要当优良员工好好表现，回到家要当父母的好孩子、 另一半的「神队友」、子女的超能父母，时不时还得出席一些应酬的社交场合， 为了兼顾，往往需要牺牲其他部分。
于是，我们有了各种烦恼：眼看身材开始走样，该不该挤出时间上健身房？ 朋友工作钱多事少离家近，我的事情却永远忙不完？ 小孩的同学都在学才艺，不跟上会不会输在起跑点？
然而，这些烦恼都来自于比较。但每个人现实状况都不同，想活出充实人生， 光复制别人的习惯和行事历没用，而是要进一步了解自己、找到自己最适合的生活型态； 把成功人士的标准盲目地套用在自己身上只会产生压力。 更何况，你看到的很可能只是他们生活中的其中一个面向。
因此，若你常觉得事情做不完，别急着把时间硬挤出来完成待办清单， 最大的问题或许是一些不必要的琐事占据了你的时间，重点不在「分配」而是「简化」。 先衡量自己当下所有条件，把所有工作与生活相关的事情排出优先顺序，
像是： 关于工作，优先考虑薪水、工时、未来发展性？ 要参加下班之后的应酬，还是回家陪小孩？ 假日要待在家里补眠，还是全家出游？ 首先，诚实面对自己的价值观，或许你的工作内容非常有挑战， 而你也乐在其中不以为苦，当然可以全心投入，别怕被冠上「工作狂」的头衔； 如果你觉得尾牙应该要好好吃饭而不是扮演小丑，就勇敢说不。
(同场加映：要上班又要准备表演节目，吃个尾牙累爆了！ 上台表演，真的能培养「团队精神」？专家说：胡扯！ )
其次，避免事事都想亲自动手。 把家事或跑腿分配给家人，顺便也让他们学会这些习以为常的事需要每位成员一起分担； 在公司试着分出权力，能外包就外包。 因为每件事都有机会成本，若想贪心全拿，很可能到最后什么事都做不好。
最后，大部份会觉得自己忙，其实过度分心导致效率不好才是主因。在该保持专注时选择休息放松，会让做事的效率下降。虽然我们不该浪费时间把行事历塞满显示自己很忙，却也不应该在效率最好的时候选择休息。该怎么好好利用时间？下面一段告诉你。
2. 提高效率、善用时间的四个方法 现代生活步调飞快，我们常被推着向前，用更少的时间资源做得更多更好，想认真工作、认真生活，得好好善用时间规划。以下提供四种方法，让你在时间分配不变的前提之下提升做事效率。
（图片来源：Pixabay）
 A. 加入「目标」和「时间限制」  如果我想准时下班，怎么在上班时间把重要的事情做完？ 如果每天只有15分钟可以写作，怎么在截稿前写完文章？ 如果每周只有3小时可以运动，怎么安排训练项目减重？
 B. 找到最有效率的黄金时段  每个人生理时钟不同，有人白天精力充沛、有人晚上头脑清晰。找出自己状况最好的时段，把重要复杂的事集中解决。比方说，如果你晚上的状态绝佳，可以试着提早吃晚饭，稍做休息后再全力工作一个小时，效果或许会比待在公司三个小时还好。
 C. 两分钟规则  若一件事可以在两分钟内完成，就马上把它搞定，免得可观的「小事」累积成不得了的「大事」，影响其他部分的生活。</description>
    </item>
    
    <item>
      <title>工作&amp;amp;生活之间的取舍</title>
      <link>http://i-cooltea.github.io/posts/%E5%B7%A5%E4%BD%9Camp%E7%94%9F%E6%B4%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8F%96%E8%88%8D/</link>
      <pubDate>Fri, 06 Sep 2019 12:55:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%B7%A5%E4%BD%9Camp%E7%94%9F%E6%B4%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8F%96%E8%88%8D/</guid>
      <description>转自 作者:陈蔚铭 2019-05-01 「工作与生活平衡」是骗人的！学会这4种方法，勉强可以达到工作与生活的「调和」
 现代社会工时越来越长，常让人忙到怀疑人生。 于是「工作与生活平衡」的概念被提出：工作和生活是翘翘板的两端， 当「工作」变重，就在「生活」加入一些休闲来恢复「平衡」状态。 但这种追求完美「平衡」的方式真能让我们变得更快乐吗？
 创新点： 定义自己的人生、寻求工作与生活的「调和」比盲目追求别人的「平衡」更重要。
本文三大重点：  用自己标准定义成功人生，别被「模范人生」困住。 提高效率、善用时间的四个方法。 学习贝佐斯和布兰森「调和」生活与工作。  ##1. 用自己标准定义成功人生，别被「模范人生」困住 生活中，每个人都身兼许多角色：职场中要当优良员工好好表现，回到家要当父母的好孩子、 另一半的「神队友」、子女的超能父母，时不时还得出席一些应酬的社交场合， 为了兼顾，往往需要牺牲其他部分。
于是，我们有了各种烦恼：眼看身材开始走样，该不该挤出时间上健身房？ 朋友工作钱多事少离家近，我的事情却永远忙不完？ 小孩的同学都在学才艺，不跟上会不会输在起跑点？
然而，这些烦恼都来自于比较。但每个人现实状况都不同，想活出充实人生， 光复制别人的习惯和行事历没用，而是要进一步了解自己、找到自己最适合的生活型态； 把成功人士的标准盲目地套用在自己身上只会产生压力。 更何况，你看到的很可能只是他们生活中的其中一个面向。
因此，若你常觉得事情做不完，别急着把时间硬挤出来完成待办清单， 最大的问题或许是一些不必要的琐事占据了你的时间，重点不在「分配」而是「简化」。 先衡量自己当下所有条件，把所有工作与生活相关的事情排出优先顺序，
像是： 关于工作，优先考虑薪水、工时、未来发展性？ 要参加下班之后的应酬，还是回家陪小孩？ 假日要待在家里补眠，还是全家出游？ 首先，诚实面对自己的价值观，或许你的工作内容非常有挑战， 而你也乐在其中不以为苦，当然可以全心投入，别怕被冠上「工作狂」的头衔； 如果你觉得尾牙应该要好好吃饭而不是扮演小丑，就勇敢说不。
(同场加映：要上班又要准备表演节目，吃个尾牙累爆了！ 上台表演，真的能培养「团队精神」？专家说：胡扯！ )
其次，避免事事都想亲自动手。 把家事或跑腿分配给家人，顺便也让他们学会这些习以为常的事需要每位成员一起分担； 在公司试着分出权力，能外包就外包。 因为每件事都有机会成本，若想贪心全拿，很可能到最后什么事都做不好。
最后，大部份会觉得自己忙，其实过度分心导致效率不好才是主因。在该保持专注时选择休息放松，会让做事的效率下降。虽然我们不该浪费时间把行事历塞满显示自己很忙，却也不应该在效率最好的时候选择休息。该怎么好好利用时间？下面一段告诉你。
2. 提高效率、善用时间的四个方法 现代生活步调飞快，我们常被推着向前，用更少的时间资源做得更多更好，想认真工作、认真生活，得好好善用时间规划。以下提供四种方法，让你在时间分配不变的前提之下提升做事效率。
（图片来源：Pixabay）
 A. 加入「目标」和「时间限制」  如果我想准时下班，怎么在上班时间把重要的事情做完？ 如果每天只有15分钟可以写作，怎么在截稿前写完文章？ 如果每周只有3小时可以运动，怎么安排训练项目减重？
 B. 找到最有效率的黄金时段  每个人生理时钟不同，有人白天精力充沛、有人晚上头脑清晰。找出自己状况最好的时段，把重要复杂的事集中解决。比方说，如果你晚上的状态绝佳，可以试着提早吃晚饭，稍做休息后再全力工作一个小时，效果或许会比待在公司三个小时还好。
 C. 两分钟规则  若一件事可以在两分钟内完成，就马上把它搞定，免得可观的「小事」累积成不得了的「大事」，影响其他部分的生活。</description>
    </item>
    
    <item>
      <title>个人成长之路 No.3 高效沟通</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.3-%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A/</link>
      <pubDate>Sun, 25 Aug 2019 10:21:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.3-%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A/</guid>
      <description>美国著名成功学大师卡耐基这样说：一个人能够在公众面前进行有效沟通，是他走向成功的第一步。
美国著名学府普林斯顿大学对一万份人事档案进行分析， 结果发现：智慧、专业技术和经验只占成功因素的25%，
其余75%决定于良好的人际沟通。 这些都说明了沟通的重要性。
 那我们该如何去提升我们的有效沟通能力呢？
一、沟通概述 沟通就是人与人的接触。包含一对一和一对多的沟通。
一对一沟通就是两个人双向沟通； 一对多的沟通，就是一个人对两个以上的人的沟通。一对多的沟通一般是公众讲话。
二、沟通的过程 有效的沟通就是将自己的观点用对方可以接受的方式表达出来，在对方回应之后，我们能够提供出对方反馈的事实和背后的情感，并给予积极的反馈。
三、有效沟通的障碍  1、沟通前没有准备足够的资料和信息 2、表达不准确，或表达时紧张，词不达意 3、拒绝倾听 4、不反馈，不澄清 5、没有准确地理解对方 6、先入为主，缺乏信任 7、沟通目标不明确 8、时机不对 9、职责不清 10、情绪化 11、地位或思想、文化差异  这些障碍，会导致我们无法进行有效沟通。所以我们要尽量避免陷入这些沟通障碍之中。
四、沟通的漏斗原理 一个人知道的东西，最后表达出来的，受众可能只能记住他讲的10%， 这要求我们要提升我们的沟通能力，以提升受众的接受度。
沟通能力的提升 沟通能力包括两个要素：倾听和表达。所以我们要提升沟通能力，就必须从这个方面进行努力。
一、倾听能力提升 #####（一）倾听的障碍
 1、急于表达自己的观点 2、没有时间 3、自认为了解了 4、缺乏观察 5、先入为主 6、对话题无兴趣
绝大多数人天生就有听力，但听得懂别人说话的能力， 则是需要后天学习才会具备。这些倾听障碍我们该如何避免呢？这需要我们用到“3F倾听技巧”。   #####（二）3F倾听技巧
“3F倾听技巧” 就是事实（Facts），意图（Focus），感觉（Feeling）。 1、事实（Facts）：当对方说话时，不要急于你自己的想法或成见来判断，了解事实和真相
2、意图（Focus）：聆听对方时，听的同时要确定对方在这些愿望背后的真实想法和背后的意图。
3、感觉（Feeling）：把聆听到客户的真实意图与客户核对
另外，我们还有其他的技巧，也可以帮助我们提升倾听能力：
1、积极地倾听  （1）尊重、理解、集中精神 （2）不打断对方 （3）排除情绪，抱着友善和体谅的心情进行倾听 （4）保持目光交流  2、设身处地、理解真义  1）站在对方角度想问题 2）听清全部信息 3）整理关键点和细节 4）听出对方的情感 5）客服习惯性思维  3、确认、澄清  1）记笔记 2）提问，澄清问题 3）用自己的语言复述对方的话，并进行确认 4）积极回应</description>
    </item>
    
    <item>
      <title>高效沟通</title>
      <link>http://i-cooltea.github.io/posts/%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A/</link>
      <pubDate>Sun, 25 Aug 2019 10:21:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A/</guid>
      <description>美国著名成功学大师卡耐基这样说：一个人能够在公众面前进行有效沟通，是他走向成功的第一步。
美国著名学府普林斯顿大学对一万份人事档案进行分析， 结果发现：智慧、专业技术和经验只占成功因素的25%，
其余75%决定于良好的人际沟通。 这些都说明了沟通的重要性。
 那我们该如何去提升我们的有效沟通能力呢？
一、沟通概述 沟通就是人与人的接触。包含一对一和一对多的沟通。
一对一沟通就是两个人双向沟通； 一对多的沟通，就是一个人对两个以上的人的沟通。一对多的沟通一般是公众讲话。
二、沟通的过程 有效的沟通就是将自己的观点用对方可以接受的方式表达出来，在对方回应之后，我们能够提供出对方反馈的事实和背后的情感，并给予积极的反馈。
三、有效沟通的障碍  1、沟通前没有准备足够的资料和信息 2、表达不准确，或表达时紧张，词不达意 3、拒绝倾听 4、不反馈，不澄清 5、没有准确地理解对方 6、先入为主，缺乏信任 7、沟通目标不明确 8、时机不对 9、职责不清 10、情绪化 11、地位或思想、文化差异  这些障碍，会导致我们无法进行有效沟通。所以我们要尽量避免陷入这些沟通障碍之中。
四、沟通的漏斗原理 一个人知道的东西，最后表达出来的，受众可能只能记住他讲的10%， 这要求我们要提升我们的沟通能力，以提升受众的接受度。
沟通能力的提升 沟通能力包括两个要素：倾听和表达。所以我们要提升沟通能力，就必须从这个方面进行努力。
一、倾听能力提升 #####（一）倾听的障碍
 1、急于表达自己的观点 2、没有时间 3、自认为了解了 4、缺乏观察 5、先入为主 6、对话题无兴趣
绝大多数人天生就有听力，但听得懂别人说话的能力， 则是需要后天学习才会具备。这些倾听障碍我们该如何避免呢？这需要我们用到“3F倾听技巧”。   #####（二）3F倾听技巧
“3F倾听技巧” 就是事实（Facts），意图（Focus），感觉（Feeling）。 1、事实（Facts）：当对方说话时，不要急于你自己的想法或成见来判断，了解事实和真相
2、意图（Focus）：聆听对方时，听的同时要确定对方在这些愿望背后的真实想法和背后的意图。
3、感觉（Feeling）：把聆听到客户的真实意图与客户核对
另外，我们还有其他的技巧，也可以帮助我们提升倾听能力：
1、积极地倾听  （1）尊重、理解、集中精神 （2）不打断对方 （3）排除情绪，抱着友善和体谅的心情进行倾听 （4）保持目光交流  2、设身处地、理解真义  1）站在对方角度想问题 2）听清全部信息 3）整理关键点和细节 4）听出对方的情感 5）客服习惯性思维  3、确认、澄清  1）记笔记 2）提问，澄清问题 3）用自己的语言复述对方的话，并进行确认 4）积极回应</description>
    </item>
    
    <item>
      <title>PHP 拓扑排序</title>
      <link>http://i-cooltea.github.io/posts/php-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 20 Aug 2019 10:04:37 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/php-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</guid>
      <description>class TopologicalGraph { private $V; // 顶点个数 private $inDegree; // 记录每个顶点的入度 private $free = []; // 维护一个入度为0的集合 private $adj = []; // 邻接表 private $nodes = []; // 所有节点 /*public function __construct($V) { $this-&amp;gt;V = $V; for ($i = 0; $i &amp;lt; $V; ++$i) $this-&amp;gt;inDegree[$i] = 0; }*/ public function __construct(array $graph) { foreach ($graph as $line) { $from = $line[0]; $to = $line[1]; $this-&amp;gt;addEdge($from, $to); } $this-&amp;gt;nodes = array_unique($this-&amp;gt;nodes); $this-&amp;gt;V = count($this-&amp;gt;nodes); } public function addEdge($from, $to) { if (!</description>
    </item>
    
    <item>
      <title>个人成长之路 No.2 番茄工作法</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.2-%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/</link>
      <pubDate>Fri, 16 Aug 2019 10:41:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.2-%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/</guid>
      <description>经过 1700 个番茄时间，番茄工作法改变了我什么
番茄工作法 番茄工作法是简单易行的时间管理方法，
是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。 使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作， 中途不允许做任何与该任务无关的事，直到番茄时钟响起， 然后在纸上画一个X短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。 番茄工作法极大地提高了工作的效率，还会有意想不到的成就感。  原则 1）一个番茄时间（25分钟）不可分割，不存在半个或一个半番茄时间 2） 一个番茄时间内如果做与任务无关的事情，则该番茄时间作废。 3）永远不要在非工作时间内使用&amp;rdquo;番茄工作法&amp;rdquo;。 （例如：用3个番茄时间陪儿子下的棋、用5个番茄时间钓鱼，等等。） 4）不要拿自己的番茄数据与他人的番茄数据比较。 5）番茄的数量不可能决定任务最终的成败。 6）必须有一份适合自己的作息时间表。
优点 番茄工作法是一套简单的工具和流程，其优点如下： 1、减轻时间焦虑 2、提升集中力和注意力，减少中断 3、增强决策意识 4、唤醒激励和持久激励 5、巩固达成目标的决心 6、完善预估流程，精确地保质保量 7、改进工作学习流程 8、强化决断力，快刀斩乱麻
一周回顾 第一周的数据 83.5 hour 的专注时间 规则很简单 但是想要养成这个习惯却十分困难 - 总是很难让自己在时间到之后停下手中的事情 - 总会有各种想不到的事情 打断手中事情 - 出现效率低下的情况
调整: 拉长番茄时钟 调整为1.5小时 休息5分钟 遇到中断 记得及时停止时钟的计时 对特定情况 开始重新计时 指定番茄 需完成的具体目标 尽量细化到较小颗粒度</description>
    </item>
    
    <item>
      <title>番茄工作法</title>
      <link>http://i-cooltea.github.io/posts/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/</link>
      <pubDate>Fri, 16 Aug 2019 10:41:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/</guid>
      <description>经过 1700 个番茄时间，番茄工作法改变了我什么
番茄工作法 番茄工作法是简单易行的时间管理方法，
是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。 使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作， 中途不允许做任何与该任务无关的事，直到番茄时钟响起， 然后在纸上画一个X短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。 番茄工作法极大地提高了工作的效率，还会有意想不到的成就感。  原则 1）一个番茄时间（25分钟）不可分割，不存在半个或一个半番茄时间 2） 一个番茄时间内如果做与任务无关的事情，则该番茄时间作废。 3）永远不要在非工作时间内使用&amp;rdquo;番茄工作法&amp;rdquo;。 （例如：用3个番茄时间陪儿子下的棋、用5个番茄时间钓鱼，等等。） 4）不要拿自己的番茄数据与他人的番茄数据比较。 5）番茄的数量不可能决定任务最终的成败。 6）必须有一份适合自己的作息时间表。
优点 番茄工作法是一套简单的工具和流程，其优点如下： 1、减轻时间焦虑 2、提升集中力和注意力，减少中断 3、增强决策意识 4、唤醒激励和持久激励 5、巩固达成目标的决心 6、完善预估流程，精确地保质保量 7、改进工作学习流程 8、强化决断力，快刀斩乱麻
一周回顾 第一周的数据 83.5 hour 的专注时间 规则很简单 但是想要养成这个习惯却十分困难 - 总是很难让自己在时间到之后停下手中的事情 - 总会有各种想不到的事情 打断手中事情 - 出现效率低下的情况
调整: 拉长番茄时钟 调整为1.5小时 休息5分钟 遇到中断 记得及时停止时钟的计时 对特定情况 开始重新计时 指定番茄 需完成的具体目标 尽量细化到较小颗粒度</description>
    </item>
    
    <item>
      <title>个人成长之路</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Wed, 14 Aug 2019 13:49:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</guid>
      <description>No1. 如何更有条理地工作&amp;amp;学习? 对每个职场人来说,总会面临同时处理多项繁琐事务的情况. 而有条理地工作学习就是我们必须掌握的一项技能 他能帮助我们提高自身的工作效率 避免自己陷入漫无目的低效瞎忙状态 是初入职场新人必备技能之一.
1. 确定每日的工作内容 目的? 选择? 顺序? 每天早上上班的第一件事 先想好自己一天内需要完成的工作事项 确定好必要的事项 选择性的放弃或延后一些不重要的 把最重要的,最复杂的事情放到最高的优先级
2. 想清楚再行动 事项计划 没有做好充分的准备，未了解清楚情况，有很大的几率是需要重头再来过的。 为了避免白费力气，在接到每项工作任务的时候可以先理清楚。 工作事项的最终目的是什么、需要做到什么、考虑哪些因素、从什么步骤开始、 要点是什么、需要做好什么准备等等等。先大概做一个规划，便于更好、更快的完成工作。
2019.5.25</description>
    </item>
    
    <item>
      <title>个人成长之路 No.1 如何更有条理地工作&amp;amp;学习?</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.1-%E5%A6%82%E4%BD%95%E6%9B%B4%E6%9C%89%E6%9D%A1%E7%90%86%E5%9C%B0%E5%B7%A5%E4%BD%9Camp%E5%AD%A6%E4%B9%A0-/</link>
      <pubDate>Wed, 14 Aug 2019 13:49:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-no.1-%E5%A6%82%E4%BD%95%E6%9B%B4%E6%9C%89%E6%9D%A1%E7%90%86%E5%9C%B0%E5%B7%A5%E4%BD%9Camp%E5%AD%A6%E4%B9%A0-/</guid>
      <description>对每个职场人来说,总会面临同时处理多项繁琐事务的情况. 而有条理地工作学习就是我们必须掌握的一项技能 他能帮助我们提高自身的工作效率 避免自己陷入漫无目的低效瞎忙状态 是初入职场新人必备技能之一.
 1. 目的 确定每日的工作内容 目的? 选择? 顺序? 每天早上上班的第一件事 先想好自己一天内需要完成的工作事项 确定好必要的事项 选择性的放弃或延后一些不重要的 把最重要的,最复杂的事情放到最高的优先级
2. 计划 想清楚再行动 &amp;mdash; 运筹帷幄 决胜千里 没有做好充分的准备，未了解清楚情况，有很大的几率是需要重头再来过的。 为了避免白费力气，在接到每项工作任务的时候可以先理清楚。 工作事项的
 最终目的是什么? 需要做到什么? 考虑哪些因素? 从什么步骤开始? 要点是什么? 需要做好什么准备.  先大概做一个规划，便于更好、更快的完成工作。
3.回顾 &amp;mdash; 自我反思 择其善者而从之 其不善者而改之 一天结束时，花点时间回顾当天表现如何， 问问自己：我做得好吗？我哪里做得不好？ 为什么有些事情没有照计画完成？ 明天怎么做会更好？ 诚实正视自己的问题所在，才能大幅增加目标达成率。
2019.5.25</description>
    </item>
    
    <item>
      <title>如何更有条理地工作&amp;amp;学习?</title>
      <link>http://i-cooltea.github.io/posts/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%9C%89%E6%9D%A1%E7%90%86%E5%9C%B0%E5%B7%A5%E4%BD%9Camp%E5%AD%A6%E4%B9%A0-/</link>
      <pubDate>Wed, 14 Aug 2019 13:49:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%9C%89%E6%9D%A1%E7%90%86%E5%9C%B0%E5%B7%A5%E4%BD%9Camp%E5%AD%A6%E4%B9%A0-/</guid>
      <description>对每个职场人来说,总会面临同时处理多项繁琐事务的情况. 而有条理地工作学习就是我们必须掌握的一项技能 他能帮助我们提高自身的工作效率 避免自己陷入漫无目的低效瞎忙状态 是初入职场新人必备技能之一.
 1. 目的 确定每日的工作内容 目的? 选择? 顺序? 每天早上上班的第一件事 先想好自己一天内需要完成的工作事项 确定好必要的事项 选择性的放弃或延后一些不重要的 把最重要的,最复杂的事情放到最高的优先级
2. 计划 想清楚再行动 &amp;mdash; 运筹帷幄 决胜千里 没有做好充分的准备，未了解清楚情况，有很大的几率是需要重头再来过的。 为了避免白费力气，在接到每项工作任务的时候可以先理清楚。 工作事项的
 最终目的是什么? 需要做到什么? 考虑哪些因素? 从什么步骤开始? 要点是什么? 需要做好什么准备.  先大概做一个规划，便于更好、更快的完成工作。
3.回顾 &amp;mdash; 自我反思 择其善者而从之 其不善者而改之 一天结束时，花点时间回顾当天表现如何， 问问自己：我做得好吗？我哪里做得不好？ 为什么有些事情没有照计画完成？ 明天怎么做会更好？ 诚实正视自己的问题所在，才能大幅增加目标达成率。
2019.5.25</description>
    </item>
    
    <item>
      <title>MySQL 常见问题汇总</title>
      <link>http://i-cooltea.github.io/posts/mysql-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Mon, 29 Jul 2019 07:01:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/mysql-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>[TOC]
Q1. 忘记 MySQL 的 root 密码  登录到数据库所在的服务器，手工 kill 掉 mysql 进程。   (1) 登录到数据库所在的服务器，手工 kill 掉 MySQL 进程：
root@bogon:/data/mysql# kill `cat ./mysql.pid`   其中，mysql.pid 指的是 MySQL 数据目录下的 pid 文件，它记录了 MySQL 服务的进程号。
 (2) 使用 &amp;ndash;skip-grant-tables 选项重启 MySQL 服务：
zj@bogon:/data/mysql$ sudo /usr/local/mysql/bin/mysqld --skip-grant-tables --user=root &amp;amp;   --skip-grant-tables 选项意思是启动 MySQL 服务时跳过权限表认证。 启动后，连接到 MySQL 的 root 将不需要口令。
 (3) 用空密码的 root 用户连接到 mysql ，并且更改 root 口令：
[zj@bogon:/usr/local/mysql/bin$] mysql -uroot Welcome to the MySQL monitor.</description>
    </item>
    
    <item>
      <title>vim 插件管理神器 vundle</title>
      <link>http://i-cooltea.github.io/posts/vim-%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8-vundle/</link>
      <pubDate>Fri, 19 Jul 2019 06:31:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/vim-%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8-vundle/</guid>
      <description>一、 Vim 的配置文件 在用户目录里面，有一个 .vimrc 文件。vim 在启动的时候会按照这个文件的内容来配置 vim。 通过执行 cd ~ 进入用户目录； 通过执行 ls -a 查看是否存在该文件，如果没有则通过 touch .vimrc 创建。 在以下内容中，我们会多次编辑这个文件。  二、 让装插件简单一点 其实本来装和管理 Vim 的插件是比较的，但 Vundle 使其变得简单。简单到什么程度呢？ 在 Vim 里面运行命令 PluginSearch 插件名称 ，按 Enter ； 在弹出的列表中选中某个搜索结果，按 i 就能安装 PS ： 不过下面会使用复制到配置文件的方式 它在 GitHub 的地址为：https://github.com/VundleVim/Vundle.vim  三、 Vundle 的下载、安装 虽然按照官方的说法用 Git 来安装 Vundle 看起来好像比较麻烦，但其实更简单些。
（1）安装 Git
可以点击 这里 查看如何安装。 通常用的系统有两个： Ubuntu ：在命令行（terminal 终端）上执行 sudo apt-get install git； CentOS ：执行 sudo yum install git 。 实在不行，还能按照教程通过源码安装。  （2）安装 Vundle</description>
    </item>
    
    <item>
      <title>更新系统 切换VPC网络</title>
      <link>http://i-cooltea.github.io/posts/%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F-%E5%88%87%E6%8D%A2vpc%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Thu, 27 Jun 2019 06:38:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F-%E5%88%87%E6%8D%A2vpc%E7%BD%91%E7%BB%9C/</guid>
      <description>Q1 hostname与原主机不一致 rabbitmq账号数据等配置信息丢失  更换主机hostname
[root@monitor 11:45 /var/lib/rabbitmq/mnesia] # ls backup rabbit@monitor rabbit@monitor.pid rabbit@monitor-plugins-expand [root@monitor 11:46 /var/lib/rabbitmq/mnesia] # hostname monitor # hostname {NEW_HOSTNAME} // 输入文件夹的hostname 使主机名与文件夹名称一致 vim /etc/hosts 0 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 1 127.0.0.1 monitor.mysoft.net.cn monitor vim /etc/sysconfig/network 1 NETWORKING=yes 0 HOSTNAME=monitor.mysoft.net.cn 1 NETWORKING_IPV6=no 2 PEERNTP=no 3 GATEWAY=10.111.10.253 重启  OR rabbitmq 从新配置账号 添加
  Q2 mysql &amp;amp; ssh 无法访问其他机器 配置rds 的安全组 将新主机的ip加入白名单 配置主机 添加key  Q3 jenkins 服务器 无法连接 xxx</description>
    </item>
    
    <item>
      <title>ubuntu 下安装可视化 &amp;amp; 远程登录</title>
      <link>http://i-cooltea.github.io/posts/ubuntu-%E4%B8%8B%E5%AE%89%E8%A3%85%E5%8F%AF%E8%A7%86%E5%8C%96-amp-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</link>
      <pubDate>Sun, 09 Jun 2019 07:14:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/ubuntu-%E4%B8%8B%E5%AE%89%E8%A3%85%E5%8F%AF%E8%A7%86%E5%8C%96-amp-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</guid>
      <description>参考 腾讯云服务器Gnome桌面安装与配置
#!/bin/bash # 1.安装图形界面 sudo apt-get install -y xinit sudo apt-get install -y gdm sudo apt-get install -y ubuntu-desktop # 2. 安装VNC sudo apt-get install -y xauth xterm x11-common x11-xkb-utils xfonts-base xfonts-encodings xfonts-utils xserver-common sudo apt-get install -y xvfb sudo apt-get install -y x11vnc # 3. 安装xrdp,vncserver sudo apt-get install xrdp vnc4server xbase-clients # 4. 配置xrdp 设置 echo unity&amp;gt;~/.xsession sudo service xrdp restart # shutdown -r now  使用https://repo.fdzh.org/作为chrome的源，使用apt安装</description>
    </item>
    
    <item>
      <title>chrome插件逆天神器-cvim功能介绍</title>
      <link>http://i-cooltea.github.io/posts/chrome%E6%8F%92%E4%BB%B6%E9%80%86%E5%A4%A9%E7%A5%9E%E5%99%A8-cvim%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 27 May 2019 10:00:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/chrome%E6%8F%92%E4%BB%B6%E9%80%86%E5%A4%A9%E7%A5%9E%E5%99%A8-cvim%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</guid>
      <description>cVim是一款类似Vimium的插件，让你能够使用键盘控制你的浏览器。 下载路径
快捷键介绍 内容导航 | 按键 | 作用 | | :-: | :- | | j,s | 向下滚动 | | k,w | 向上滚动| |h|向左滚动| |l|向右滚动| |d|向下滚动半页| |u,e|向上滚动半页| |gg|滚动到页面顶部| |G|滚动到页面底部| |0|滚动到页面最左侧| |$|滚动到页面最右侧| |gi|将焦点移动到第一个输入框| |gI|将焦点移动到最后一个输入框|
链接提示 | 按键 | 作用 | | :-: | :- | |f|在当前标签页打开链接| |F|在新的标签页打开链接| |W|在新的窗口打开链接| |mr|使用google图片检索引擎检索图片| |gr|使用google图片检索引擎检索图片|
快速标记 | 按键 | 作用 | | :-: | :- | | M&amp;lt;&amp;gt; |创建&amp;lt;&amp;gt;标记| |go&amp;lt;&amp;gt;|在当前标签页打开&amp;lt;&amp;gt;标记 |gn&amp;lt;&amp;gt; |在新的标签页打开&amp;lt;&amp;gt;标记 |gw&amp;lt;&amp;gt; |在新的窗口打开&amp;lt;&amp;gt;标记
杂项 | 按键 | 作用 | | :-: | :- | |a|&amp;rdquo;:tabnew google&amp;rdquo;的别名 |.</description>
    </item>
    
    <item>
      <title>Vim 搜索模式</title>
      <link>http://i-cooltea.github.io/posts/vim-%E6%90%9C%E7%B4%A2%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 24 May 2019 08:15:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/vim-%E6%90%9C%E7%B4%A2%E6%A8%A1%E5%BC%8F/</guid>
      <description>本文介绍如何使用Vim的搜索模式。
&amp;nbsp;
搜索单词 Vim中使用 &amp;amp;lt; 和 &amp;amp;gt; 分别表示单词的开头和结尾，例如查找单词 i 而不是字母 i ，在正常模式下，按下 / 启动搜索模式，输入 &amp;amp;lt;i&amp;amp;gt; ，敲击回车即可。
要查找当前光标覆盖的单词，敲击 * ，Vim会自动启动搜索模式，光标移动到该单词下一个现身位置。
&amp;nbsp;
搜索当前单词并连续修改 假定当前光标覆盖的单词为 foo，按下 * 键，Vim 会搜索并跳转到下一个 foo 的位置，按下 ciw 组合键，意思是 change inner word ，此时 foo 会被删除，在原位置输入 bar ，然后按下 Escape 键。这就完成了一次搜索并修改，接下来按 n 键继续搜索，如果还需要修改，则按下 . 键表示重复修改动作，如此反复完成连续搜索与修改。
&amp;nbsp;
搜索连续重复单词 有时你可能会连续重复输入同一个单词而不自知，例如以下文本：
1 hello hello 2 world world 3 thank 4 thank 搜索模式：
\(\&amp;lt;\w\+\&amp;gt;\)\_s*\1  以上搜索模式会匹配文本中的1-4行。在Vim中，使用 ( 和 ) 包括的部分视为一个原子，其中 (&amp;amp;lt;\w+&amp;amp;gt;) 匹配一个单词原子，\s 匹配空格符和tab符， _s 匹配空格符、tab符和换行符， _s* 匹配0次或多次。</description>
    </item>
    
    <item>
      <title>vim 搜索模式</title>
      <link>http://i-cooltea.github.io/posts/vim-%E6%90%9C%E7%B4%A2%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 24 May 2019 08:15:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/vim-%E6%90%9C%E7%B4%A2%E6%A8%A1%E5%BC%8F/</guid>
      <description>本文介绍如何使用Vim的搜索模式。
&amp;nbsp;
搜索单词 Vim中使用 &amp;amp;lt; 和 &amp;amp;gt; 分别表示单词的开头和结尾，例如查找单词 i 而不是字母 i ，在正常模式下，按下 / 启动搜索模式，输入 &amp;amp;lt;i&amp;amp;gt; ，敲击回车即可。
要查找当前光标覆盖的单词，敲击 * ，Vim会自动启动搜索模式，光标移动到该单词下一个现身位置。
&amp;nbsp;
搜索当前单词并连续修改 假定当前光标覆盖的单词为 foo，按下 * 键，Vim 会搜索并跳转到下一个 foo 的位置，按下 ciw 组合键，意思是 change inner word ，此时 foo 会被删除，在原位置输入 bar ，然后按下 Escape 键。这就完成了一次搜索并修改，接下来按 n 键继续搜索，如果还需要修改，则按下 . 键表示重复修改动作，如此反复完成连续搜索与修改。
&amp;nbsp;
搜索连续重复单词 有时你可能会连续重复输入同一个单词而不自知，例如以下文本：
1 hello hello 2 world world 3 thank 4 thank 搜索模式：
\(\&amp;lt;\w\+\&amp;gt;\)\_s*\1  以上搜索模式会匹配文本中的1-4行。在Vim中，使用 ( 和 ) 包括的部分视为一个原子，其中 (&amp;amp;lt;\w+&amp;amp;gt;) 匹配一个单词原子，\s 匹配空格符和tab符， _s 匹配空格符、tab符和换行符， _s* 匹配0次或多次。</description>
    </item>
    
    <item>
      <title>我的软考之路</title>
      <link>http://i-cooltea.github.io/posts/%E6%88%91%E7%9A%84%E8%BD%AF%E8%80%83%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Thu, 16 May 2019 15:36:21 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%88%91%E7%9A%84%E8%BD%AF%E8%80%83%E4%B9%8B%E8%B7%AF/</guid>
      <description> 耦合类型  一般模块之间可能的连接方式有七种，构成耦合性的七种类型。它们之间的关系为（耦合性性由强到弱）： 内容 &amp;gt; 公共 &amp;gt; 外部 &amp;gt; 控制 印记 &amp;gt; 数据 &amp;gt; 非直接
  内容耦合(Content Coupling)
如果发生下列情形，两个模块之间就发生了内容耦合。
 一个模块直接访问另一个模块的内部数据； 一个模块不通过正常入口转到另一模块内部； 两个模块有一部分程序代码重叠(只可能出现在汇编语言中)； 一个模块有多个入口。  公共耦合(Common Coupling) 若一组模块都访问同一个公共数据环境，则它们之间的耦合就称为公共耦合。 公共的数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等。
 **外部耦合(External Coupling) ** 一组模块都访问同一全局简单变量而不是同一全局数据结构， 而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。
 **控制耦合(Control Coupling) ** 如果一个模块通过传送开关、标志、名字等控制信息， 明显地控制选择另一模块的功能，就是控制耦合。
 **印记耦合(Stamp Coupling) ** 如果一组模块通过参数表传递记录信息，就是标记耦合。 它是某一数据结构的子结构，而不是简单变量。
 **数据耦合(Data Coupling) ** 如果一个模块访问另一个模块时，彼此之间是通过数据参数(不是控制参数、 公共数据结构或外部变量)来交换输入、输出信息的，则称这种耦合为数据耦合。
 **非直接耦合(Nondirect Coupling) ** 如果两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的，
这就是非直接耦合。这种耦合的模块独立性最强。 
  </description>
    </item>
    
    <item>
      <title>php yum 安装</title>
      <link>http://i-cooltea.github.io/posts/php-yum-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 18 Mar 2019 03:49:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/php-yum-%E5%AE%89%E8%A3%85/</guid>
      <description> yum install http://rpms.remirepo.net/enterprise/remi-release-6.rpm yum install php71-php.x86_64 php71-php-cli.x86_64 php71-php-common.x86_64 php71-php-devel.x86_64 php71-php-fpm.x86_64 php71-php-gd.x86_64 php71-php-ldap.x86_64 php71-php-mbstring.x86_64 php71-php-mcrypt.x86_64 php71-php-mysqlnd.x86_64 php71-php-opcache.x86_64 php71-php-pdo.x86_64 php71-php-pear.noarch php71-php-pecl-igbinary.x86_64 php71-php-pecl-jsond.x86_64 php71-php-pecl-memcache.x86_64 php71-php-pecl-zip.x86_64 php71-php-pecl-xdebug.x86_64 php71-php-pecl-redis.x86_64 php71-php-soap.x86_64 php71-php-mysqlnd.x86_64 php71-php-pecl-imagick.x86_64 php71-php-pecl-rdkafka.x86_64 php71-php-pecl-mongodb.x86_64 php71-php-pecl-rdkafka.x86_64 php71-php-pecl-memcached.x86_64 php71-php-pgsql.x86_64  </description>
    </item>
    
    <item>
      <title>Supervisor 使用说明</title>
      <link>http://i-cooltea.github.io/posts/supervisor-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 09 Nov 2018 08:21:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/supervisor-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>  一个进程管理工具，通过fork/exec的方式将这些被管理的进程当作supervisor的子进程来启动，只需要将要管理进程路径添加到配置文件中。被管理进程视为supervisor的子进程，若子进程异常中断，则父进程可以准确获取子进程中断的信息，自动对其进行重启 。
 安装  # pip 安装 curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py pip install supervisor  配置  mkdir /etc/supervisor/conf.d # 复制配置文件 echo_supervisord_conf &amp;gt; /etc/supervisor/supervisord.conf vim /etc/supervisor/supervisord.conf [inet_http_server] port=*:9011 username=user password=123Yk [include] files = /etc/supervisord/conf.d/*.ini  常见操作 启动 supervisord -c /etc/supervisor/supervisord.conf  重启 pkill supervisord supervisord -c /etc/supervisor/supervisord.conf  更新 supervisorctl update  </description>
    </item>
    
    <item>
      <title>Linux修改Shell命令提示符及颜色</title>
      <link>http://i-cooltea.github.io/posts/linux%E4%BF%AE%E6%94%B9shell%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E5%8F%8A%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Tue, 06 Nov 2018 06:24:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux%E4%BF%AE%E6%94%B9shell%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E5%8F%8A%E9%A2%9C%E8%89%B2/</guid>
      <description>###1.Linux登录过程中加载配置文件顺序：
/etc/profile → /etc/profile.d/*.sh → ~/.bash_profile → ~/.bashrc → [/etc/bashrc] 可查看默认的~/.bashrc文件如下： [root@~/wade/codeReview/redis-2.8.17] cat ~/.bashrc # .bashrc # User specific aliases and functions # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi  ###2.Shell命令提示符及颜色是由PS1来配置：
[root@/etc/init.d] echo $PS1 [\[\e[32;40m\]\u@\w] 其中PS1常用的参数含义如下： \d ：#代表日期，格式为weekday month date，例如：&amp;quot;Mon Aug 1&amp;quot; \H ：#完整的主机名称 \h ：#仅取主机的第一个名字 \t ：#显示时间为24小时格式，如：HH：MM：SS \T ：#显示时间为12小时格式 \A ：#显示时间为24小时格式：HH：MM \u ：#当前用户的账号名称 \v ：#BASH的版本信息 \w ：#完整的工作目录名称 \W ：#利用basename取得工作目录名称，所以只会列出最后一个目录 \# ：#下达的第几个命令 \$ ：#提示字符，如果是root时，提示符为：# ，普通用户则为：$  ###3.</description>
    </item>
    
    <item>
      <title>Sublime配置Terminal插件</title>
      <link>http://i-cooltea.github.io/posts/sublime%E9%85%8D%E7%BD%AEterminal%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 17 Oct 2018 09:31:53 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/sublime%E9%85%8D%E7%BD%AEterminal%E6%8F%92%E4%BB%B6/</guid>
      <description>windows环境下： 对未安装package control的sublime:
 ctrl+shift+p 打开package control 输入 intsall package  输入Terminal  Preferences=&amp;gt;Package setting=&amp;gt;Terminal=&amp;gt;Setting -User
 输入：
{ &amp;quot;terminal&amp;quot;: &amp;quot;C:\\windows\\system32\\cmd.exe&amp;quot;, &amp;quot;parameters&amp;quot;: [&amp;quot;/START&amp;quot;,&amp;quot;%CWD%&amp;quot;] }   在编辑的文件目录打开cmd：ctrl+shift+t 输入任何一个命令均发现不是命令：
1）首先确认是否在windows环境变量配置了相关路径
2）配置好terminal后应重启subime，这一步是关键。
作者：underdogs 来源：CSDN 原文：https://blog.csdn.net/underdogs/article/details/78322639?utm_source=copy 版权声明：本文为博主原创文章，转载请附上博文链接！</description>
    </item>
    
    <item>
      <title>2NF 和 3NF 的区别</title>
      <link>http://i-cooltea.github.io/posts/2nf-%E5%92%8C-3nf-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 12 Oct 2018 12:59:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/2nf-%E5%92%8C-3nf-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description> 2NF 完全函数依赖 (非部分函数依赖) 设有一个勤工俭学的记录 的关系模式如下 R(学号,工作类别,班级,学生名,收入) R(sid,type,class,name,money) 其中 (sid,type) 是唯一标识 (sid,type) -&amp;gt; money (即主码 ,主属性集合 : 用户定义的可以唯一区分每一条记录) 如果存可以直接用这个集合里的一部分推导出来的属性 就是 部分函数依赖 即 sid -&amp;gt; name  3NF (非传递函数依赖) 设有一个学生信息表如下 R(学号,学生名,班级ID,班级名称) R(sid,name,classId,className) 其中 (sid) 是唯一标识 (即主码 ,主属性集合 : 用户定义的可以唯一区分每一条记录) 如果存可以用非该个集合里 推导出来的属性 就是 传递函数依赖 即 classId -&amp;gt; className  </description>
    </item>
    
    <item>
      <title>Node.js 知识点汇总</title>
      <link>http://i-cooltea.github.io/posts/node.js-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</link>
      <pubDate>Mon, 03 Sep 2018 02:46:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/node.js-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</guid>
      <description>安装包下载(国内)
安装 Linux 上安装 Node.js 直接使用已编译好的包 Node 官网已经把 linux 下载版本更改为已编译好的版本了，我们可以直接下载解压后使用：
# wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz // 下载 # tar xf node-v10.9.0-linux-x64.tar.xz // 解压 # cd node-v10.9.0-linux-x64/ // 进入解压目录 # ./bin/node -v // 执行node命令 查看版本 v10.9.0  解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接：
ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ln -s /usr/software/nodejs/bin/node /usr/local/bin/  NPM国内镜像 http://npm.hacknodejs.com/ http://registry.npmjs.vitecho.com/ https://registry.npm.taobao.org/ 永久使用镜像命令： npm config set registry https://registry.npm.taobao.org 临时使用镜像命令： npm --registry &amp;quot;http://npm.hacknodejs.com/&amp;quot; install underscore  Webpack 常用命令总结 // 全局安装webpack npm install webpack -g // 初始化默认的package.</description>
    </item>
    
    <item>
      <title>CentOS 6.x/7.x上安装git及最新版</title>
      <link>http://i-cooltea.github.io/posts/centos-6.x-7.x%E4%B8%8A%E5%AE%89%E8%A3%85git%E5%8F%8A%E6%9C%80%E6%96%B0%E7%89%88/</link>
      <pubDate>Sun, 02 Sep 2018 03:48:25 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/centos-6.x-7.x%E4%B8%8A%E5%AE%89%E8%A3%85git%E5%8F%8A%E6%9C%80%E6%96%B0%E7%89%88/</guid>
      <description>源码包安装
步骤1. 安装依赖包 # yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel # yum install gcc perl-ExtUtils-MakeMaker  步骤2. 卸载旧的git版本（如果之前有安装rpm包） # yum remove git  步骤3. 下载&amp;amp;解压 # cd /usr/src # wget https://www.kernel.org/pub/software/scm/git/git-2.5.0.tar.gz # tar -zxvf git-2.5.0.tar.gz 或 # wget https://github.com/git/git/archive/v2.5.0.tar.gz 下载  步骤4. 编译安装 # cd git-2.5.0 # make prefix=/usr/local/git all # make prefix=/usr/local/git install # echo &amp;quot;export PATH=$PATH:/usr/local/git/bin&amp;quot; &amp;gt;&amp;gt; /etc/bashrc # source /etc/bashrc  步骤5. 检查git版本 # git --version git version 2.</description>
    </item>
    
    <item>
      <title>vim插件  目录插件NERDTree安装 </title>
      <link>http://i-cooltea.github.io/posts/vim%E6%8F%92%E4%BB%B6-%E7%9B%AE%E5%BD%95%E6%8F%92%E4%BB%B6nerdtree%E5%AE%89%E8%A3%85-/</link>
      <pubDate>Fri, 24 Aug 2018 06:51:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/vim%E6%8F%92%E4%BB%B6-%E7%9B%AE%E5%BD%95%E6%8F%92%E4%BB%B6nerdtree%E5%AE%89%E8%A3%85-/</guid>
      <description>引用链接: CSDN vim插件 NERDTree安装 和 使用
vim 插件管理神器 vundle
安装 NERDTree插件的官方地址如下，可以从这里获取最新的版本 https://github.com/scrooloose/nerdtree 下载zip安装包 或者使用下面官网源文件安装方法
安装方法很简单，先把压缩文件下载下来，解压后 将plugin目录下的NERD_tree.vim 拷贝~/.vim/plugin 以及doc目录下的NERD_tree.txt拷贝到~/.vim/doc.
## NERDTree 5.0 wget https://www.vim.org/scripts/download_script.php?src_id=23731 -O NERDTree.zip  wget https://www.vim.org/scripts/download_script.php?src_id=17123 -O NERDTree.zip unzip NERDTree.zip -d NERDTree mkdir -p ~/.vim/{plugin,doc} cp plugin/NERD_tree.vim ~/.vim/plugin/ cp doc/NERD_tree.txt ~/.vim/doc/  安装好后，命令行中输入vim，打开vim后，在vim中输入:NERDTree，你就可以看到NERDTree的效果了。
为了方便起见，我们设置一下快捷键， 在~/.vimrc 文件中添加下面内容，只要按键盘上的F10就可以显示和隐藏NERDTree。
配置文件 set nu set ruler set autoindent set cursorline set paste set ts=4 set tabstop=4 set expandtab set smartindent set shiftwidth=4 set softtabstop=4 let NERDTreeAutoCenter=1 let NERDTreeBookmarksFile=$VIM.</description>
    </item>
    
    <item>
      <title>Yii URL中 省略index.php </title>
      <link>http://i-cooltea.github.io/posts/yii-url%E4%B8%AD-%E7%9C%81%E7%95%A5index.php-/</link>
      <pubDate>Tue, 14 Aug 2018 03:23:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/yii-url%E4%B8%AD-%E7%9C%81%E7%95%A5index.php-/</guid>
      <description>###添加.htaccess 文件 内容如下 在/app/backend/web目录中 (index.php同级目录)
Options +FollowSymLinks IndexIgnore */* RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . index.php  </description>
    </item>
    
    <item>
      <title>Linux 常见问题汇总</title>
      <link>http://i-cooltea.github.io/posts/linux-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 24 Jul 2018 02:43:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>[TOC]

Q1. linux 操作系统语言更改  有时候我们的服务器在安装时安装的默认语言不支持中文 导致程序、文档中的汉子显示乱码， 从而使系统报一些莫名其妙的错误，这是可以更改操作系统的默认语言
  echo $LANG 查看当前操作系统的语言
 临时更改默认语言(关闭当前会话失效) export LANG=en_US.UTF-8
 永久生效,编辑文件保存并退出vi /etc/sysconfig/i18n 修改为 LANG=&amp;quot;en_US.UTF-8&amp;quot;
  使其立即生效 source /etc/sysconfig/i18n
  注意：centos7的环境对应的配置文件为： /etc/locale.con

Q2. linux centos 系统时区 时间同步  修改时区为中国时区 Asiz/Shanghai 同步当前的的时间  cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
ntpdate us.pool.ntp.org

Q3. linux 计划任务 &amp;amp; crontab 配置不成功  初步排除命令错误 检查命令是否存在问题
 crontab 规则 命令后面添加 &amp;gt;&amp;gt; xx.log 将执行结果输出到指定文件 可查看语句执行结果
  0 6 * * * $HOME/for_crontab/createTomorrowTables &amp;gt;&amp;gt; $HOME/for_crontab/mylog.</description>
    </item>
    
    <item>
      <title>Docker 常用命令</title>
      <link>http://i-cooltea.github.io/posts/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 20 Jul 2018 02:26:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看 docker images # 列出所有镜像(images) docker ps # 列出正在运行的容器(containers) docker ps -a # 列出所有的容器 docker pull centos # 下载centos镜像 docker top &amp;lt;container&amp;gt; # 查看容器内部运行程序  容器 docker stop &amp;lt;container&amp;gt; # 停止一个正在运行的容器，&amp;lt;container&amp;gt;可以是容器ID或名称 docker start &amp;lt;container&amp;gt; # 启动一个已经停止的容器 docker restart &amp;lt;container&amp;gt; # 重启容器 docker rm &amp;lt;container&amp;gt; # 删除容器 docker run -i -t -p :80 LAMP /bin/bash # 运行容器并做http端口转发 docker exec -it &amp;lt;container&amp;gt; /bin/bash # 进入ubuntu类容器的bash docker exec -it &amp;lt;container&amp;gt; /bin/sh # 进入alpine类容器的sh docker rm `docker ps -a -q` # 删除所有已经停止的容器 FOR /f &amp;quot;tokens=*&amp;quot; %i IN (&#39;docker ps -a -q&#39;) DO docker rm %i # windows系统，用上面的命令会出错：unknown shorthand flag: &#39;a&#39; in -a docker kill $(docker ps -a -q) # 杀死所有正在运行的容器，$()功能同``  提交/导出 # 建立映像文件。–rm 选项是告诉Docker， # 在构建完成后删除临时的Container， # Dockerfile的每一行指令都会创建一个临时的Container， # 一般这些临时生成的Container是不需要的 docker build --rm=true -t hjue/lamp # 提交你的变更，并且把容器保存成镜像，命名为mynewimage，3a09b2588478为容器的ID docker commit 3a09b2588478 mynewimage # 把 mynewimage 镜像保存成 tar 文件 docker save mynewimage | bzip2 -9 -c&amp;gt; /home/save.</description>
    </item>
    
    <item>
      <title>个人收集 有用的链接 [持续更新]</title>
      <link>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%94%B6%E9%9B%86-%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 18 Jul 2018 02:47:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%B8%AA%E4%BA%BA%E6%94%B6%E9%9B%86-%E6%9C%89%E7%94%A8%E7%9A%84%E9%93%BE%E6%8E%A5-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</guid>
      <description> PHP 收集常用的PHP类库
docker Docker 仓库 - 阿里巴巴开源镜像站
Docker 中文文档 —— 从入门到实践
Docker快速搭建LNMP（入门教程，高手绕行）
Docker 问答录（100 问）
Windows PowerShell 在线教程
Linux </description>
    </item>
    
    <item>
      <title>VirtualBox 共享文件夹</title>
      <link>http://i-cooltea.github.io/posts/virtualbox-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Tue, 17 Jul 2018 02:12:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/virtualbox-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>参考来源
在windows下新建一个文件夹，作为共享文件夹的windows端（尽量不要用中文）
####设置共享文件夹 打开VirtualBOX 虚拟机的设置 共享文件夹
选择固定分配，点击右边的添加按钮 共享文件夹路径是你刚刚新建的文件夹路径。 共享文件夹名称可以自定义一个，记住它，后面会用到。是否与新建的文件夹同名无所谓 不要点自动挂载，勾选固定分配即可 添加共享文件夹
####挂载文件夹 进入linux，在挂载点目录mnt添加一个自定义的目录（同上，我这里叫myshare，你可以叫其他的名字）
使用增强功能将共享名VMshare的文件映射到你自定义的目录 代码如下：
mkdir /mnt/myshare mount -t vboxsf VMshare /mnt/myshare  大功告成，分别在宿主机和虚拟机中创建文件后，切换系统看看是否共享成功吧</description>
    </item>
    
    <item>
      <title>Vagrant box 增加磁盘容量方法</title>
      <link>http://i-cooltea.github.io/posts/vagrant-box-%E5%A2%9E%E5%8A%A0%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 10 Jul 2018 07:31:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/vagrant-box-%E5%A2%9E%E5%8A%A0%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%96%B9%E6%B3%95/</guid>
      <description>来源 www.madcoder.cn
一直以来都是以vagrant+docker作为开发环境，可是久而久之， 原Box自带的8G容量就捉襟见肘了。时不时需要手动删除一些东西。 Virtualbox 本身只支持vdi硬盘文件格式的扩容， 对vmdk 格式的却不支持。但是却提供vmdk到vdi格式的转化， 正好可以利用这一功能进行扩容。  1. 关闭虚拟机 从Virtualbox页面查看硬盘文件地址（选中虚拟机-&amp;gt;右键-&amp;gt;设置-&amp;gt;存储）。进到文件所在目录后执行：
$ VBoxManage clonehd box-disk1.vmdk box-disk1.vdi --format VDI  2. 给vdi格式硬盘文件扩容 $ VBoxManage modifyhd box-disk1.vdi --resize 20480  3. 从Virutalbox存储界面删除原硬盘文件，然后再加入新的VDI格式硬盘文件 4. vagrant up启动虚拟机，然后vagrant ssh进入 5. 利用cfdisk工具创建主分区，谨记选择格式为Linux LVM (8e) $ sudo cfdisk /dev/sda cfdisk  cfdisk 分区方法
6. 利用pvcreate命令给新的分区创建物理卷 $ sudo pvcreate /dev/sda3 successfully created  7. 查看VG Name，我自己的VG Name是centos $ sudo pvdisplay | grep &amp;quot;VG Name&amp;quot; VG Name centos  8.</description>
    </item>
    
    <item>
      <title>Yii2 Github 开源的项目整理</title>
      <link>http://i-cooltea.github.io/posts/yii2-github-%E5%BC%80%E6%BA%90%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 04 Jul 2018 15:13:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/yii2-github-%E5%BC%80%E6%BA%90%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%95%B4%E7%90%86/</guid>
      <description>论坛 Star:330 getyii 论坛 
电商 Star: 590 dotplant2 来自俄罗斯的电子商务CMS
Star: 1,844 Fecshop 全称为 Fancy ECommerce Shop，是基于 PHP Yii2框架之上开发的一款优秀的开源电商系统
CMS Star:553 luya 基于Yii2 CMS的编程框架 
Star:276 Feehi CMS 国产CMS</description>
    </item>
    
    <item>
      <title>Git基本命令和GitFlow工作流</title>
      <link>http://i-cooltea.github.io/posts/git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%92%8Cgitflow%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Wed, 04 Jul 2018 09:52:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%92%8Cgitflow%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>来源 : myqianlan 本篇博客讲解了git的一些基本的团队协作命令，和GitFlow工作流指南 git 团队协作的一些命令
1.开分支 git branch 新分支名 例如，在master分支下，新开一个开发分支： git branch dev  2.切换到新分支 git checkout 分支名 例如，在master分支下，切换到新开的dev： git checkout dev  3.开分支和切换分支合并到一个命令 git checkout -b 新分支名 例如，新开一个开发分支，并立即切换到该分支： git checkout -b dev  4.切换回原分支 git checkout 原分支名 例如，切换回master git checkout master 注意：当前分支有修改，还未commit的时候，会切换失败，应当先commit，但可以不用push  5.合并分支 git merge 需要合并的分支名 例如，刚刚已经切换回master，现在需要合并dev的内容： git merge dev 建议在GitLab(或者其他git系统)上面创建merge request的形式来进行分支的合并和代码审核。  6.查看本地分支列表 git branch -a 前面带remotes/origin 的，是远程分支  7.查看远程分支列表 git branch -r  8.向远程提交本地新开的分支 git push origin 新分支名 例如，刚刚在master下新开的dev分支： git push origin dev  9.</description>
    </item>
    
    <item>
      <title>PhpStudy 升级 MySQL 版本到5.7</title>
      <link>http://i-cooltea.github.io/posts/phpstudy-%E5%8D%87%E7%BA%A7-mysql-%E7%89%88%E6%9C%AC%E5%88%B05.7/</link>
      <pubDate>Tue, 03 Jul 2018 02:03:39 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/phpstudy-%E5%8D%87%E7%BA%A7-mysql-%E7%89%88%E6%9C%AC%E5%88%B05.7/</guid>
      <description>1. 备份当前数据库数据、 最好是导成 SQL 文件 2. 备份 PhpStudy 下的 MySQL 文件夹、以防升级失败、还可以使用旧版本的数据库 3. 下载MySQL5.7、解压、然后放在 PhpStudy 下的 MySQL 文件夹下 地址：https://dev.mysql.com/downloads/file/?id=467269
4. 复制一份my-default.ini，改名为my.ini、打开my.ini加上： basedir=&amp;quot;E:/phpStudy/MySQL/&amp;quot; datadir=&amp;quot;E:/phpStudy/MySQL/data/&amp;quot;  这两项，这两个地址都改成自己对应的phpstudy里的mysql目录和数据库目录。
5. 在系统path中添加： ;E:\phpstudy\MySQL\bin //这里的地址根据自己的情况写 6. 然后以管理员的身份运行cmd、进入MySQL目录、如图所示表示成功、执行如下:  mysqld &amp;ndash;initialize mysqld -install
 7. 重新启动 phpstudy即可、 注意进入MySQL可能会遇到密码错误的问题、 报错：
ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.
翻译：
错误1862(HY000):你的密码已经过期。登录必须改变它使用一个客户端,支持过期的密码。
原网站 http://blog.vpupv.com:88/index.php/archives/17/
###Windows解决该问题：
1.首先：任务管理器&amp;ndash;》关闭mysqld.exe进程； 2.先进入mysql的bin目录下，运行如下：  mysqld &amp;ndash;skip-grant-tables 变为不可操作状态、然后再新打开一个命令窗；</description>
    </item>
    
    <item>
      <title>Docker 操作指南</title>
      <link>http://i-cooltea.github.io/posts/docker-%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 01 Jul 2018 03:40:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/docker-%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</guid>
      <description>docker &amp;amp; docker-compose 安装 1、安装 Docker
# 安装依赖 sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 # 添加docker下载仓库 sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo # 安装docker-ce sudo yum install docker-ce # 启动docker-ce sudo systemctl start docker # 验证 sudo docker --version sudo docker run hello-world  2、安装 docker-compose
sudo curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version  *参考： docker CE 阿里云镜像 安装 docker-compose 安装 docker 镜像加速  *</description>
    </item>
    
    <item>
      <title>composer安装</title>
      <link>http://i-cooltea.github.io/posts/composer%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 25 Jun 2018 06:14:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/composer%E5%AE%89%E8%A3%85/</guid>
      <description>###linux 安装 官网下载：https://getcomposer.org/ 得到一个composer.phar文件。
###全局安装 将下载下来的composer.phar文件移动到/usr/local/bin/目录下。
###局部安装 将下载下来的composer.phar文件移动到项目文件内。
###win 安装 找到并进入 PHP 的安装目录（和你在命令行中执行的 php 指令应该是同一套 PHP）。 将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。 在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。运行bat文件。 @php &amp;ldquo;%~dp0composer.phar&amp;rdquo; %*
###composer速度慢 使用国内镜像。国内镜像地址：http://pkg.phpcomposer.com/ 使用方式：
composer config -g repo.packagist composer https://packagist.phpcomposer.com
上面命令执行之后会在composer.json里面添加镜像的配置信息。
&amp;quot;repositories&amp;quot;: { &amp;quot;packagist&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;https://packagist.phpcomposer.com&amp;quot; } }  测试镜像可用，速度可。</description>
    </item>
    
    <item>
      <title>数据库并发操作会带来哪些问题及原因</title>
      <link>http://i-cooltea.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C%E4%BC%9A%E5%B8%A6%E6%9D%A5%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E5%8E%9F%E5%9B%A0/</link>
      <pubDate>Sat, 23 Jun 2018 09:30:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%93%8D%E4%BD%9C%E4%BC%9A%E5%B8%A6%E6%9D%A5%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E5%8E%9F%E5%9B%A0/</guid>
      <description>##丢失更新
当两个或多个事物读入同一数据并修改，会发生丢失更新问题，即后一个事物更新的结果被前一事务所做更新覆盖 即当事务A和B同事进行时，事务A对数据已经改变但并未提交时B又对同一数据进行了修改（注意此时数据是A还未提交改变的数据），到时A做的数据改动丢失了
##不可重复读
当两个数据读取某个数据后，另一事务执行了对该数据的更新，当前一事务再次读取该数据（希望与第一次读取的是相同的值）时，得到的数据与前一次的不一样，这是由于第一次读取数据后，事务B对其做了修改，导致再次读取数据时与第一次读取的数据不想同
##读‘脏数据’
当一个事务修改某个数据后，另一事务对该数据进行了读取，由于某种原因前一事务撤销了对改数据的修改，即将修改过的数据恢复原值，那么后一事务读到的数据与数据可得不一致，称之为读脏数据
注意：还有一个叫“幽灵数据” 幽灵数据与脏数据类似，不过幽灵数据是指事务提交之后读到的数据，但是在读取之后又进行了对前一事务的恢复，而脏数据是指并未提交前读取的数据</description>
    </item>
    
    <item>
      <title>linux管理多个ssh公钥密钥</title>
      <link>http://i-cooltea.github.io/posts/linux%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAssh%E5%85%AC%E9%92%A5%E5%AF%86%E9%92%A5/</link>
      <pubDate>Thu, 21 Jun 2018 04:21:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAssh%E5%85%AC%E9%92%A5%E5%AF%86%E9%92%A5/</guid>
      <description>很多网上免ssh密码使用git的命令都没有考虑到多个公钥密钥的情况， 这里搜集并整理一下管理多个ssh公钥密钥的步骤。
1. ssh 公钥密钥生成 首先生成公钥和密钥，默认情况公钥的文件名比密钥末尾多.pub， 下面以管理coding.net和github.com两个git仓库的ssh公钥密钥为例 （如果是在windows下，请安装git客户端然后使用git bash来键入下面的命令； 如果是在linux下，则直接使用终端即可）
ssh-keygen -t rsa -f ~/.ssh/id_rsa.coding -C &amp;quot;Key for coding.net&amp;quot; ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &amp;quot;Key for GitHub stuff&amp;quot;  这个命令直接通过-f参数指定了密钥和公钥的文件名， 比如-f ~/.ssh/id_rsa.coding，其生产的密钥为~/.ssh/id_rsa.coding， 公钥为~/.ssh/id_rsa.coding.pub，生成好了公钥和密钥后， 把公钥文件中的内容追加到~/.ssh/authorized_keys文件的末尾， 同理github的公钥密钥的生成方式类似。
注意追加前authorized_keys文件的末尾需要有个换行符。
2. ssh 公钥密钥内容 ssh-rsa AAAAB3NzaC1yc2EAAaaaaaaupeyE1NMMrb121244DwhwFLsPFiFr Fb1QUwQtX2m/YSi8ELn3Vga/5AhfKKPWG+nOczWZxi0XguiyAslRiiowXaUj BYei5NHHBcAy+GiZWs4u8h3ZU7uGvwmQlqHf8tQ/I0J1RNR6nQ8Ra9882398 akk23h9Hhp63EagSbpkefg7qScroq0+VZ2yfLyjUCLgxhb+Eah+r9EqQ4l%H EF;asd8hLQw449W1SzKz3hCwxFAJFKbj/n+J50vNXB3fLNeTNiq@OOIkn324 n802Do5jIZGFzNrYsIRFbJVbHvIsodyXDmz6Qbqlx87xmEQ== admaaa@163.com ssh-rsa AAAAB3NzaC1yc2EAAAaa2#@8923n(&amp;amp;@hfg2- hg9002nkglsdfPCBUhDN185+jyoJQRwLImRr6IOwh/LS BS1N22pO#NG3434ng90u32n@0)@#NKDLHWO:@_jqtUIB r8UzWzliM5Zcn9U/DjSjuAiP/SFg1JEoXfWSFToWQpYN bGS9VFwU83MH1iGGDUeaeHY5mAMWy57ym/+Jm/hPs1I3 E+OtDT9+K1RyIGr44Ur7aWpKZ/PMgiuPUc6qfGFVP4xvRw== myyyy@gmail.com  **同时把这个公钥添加到git仓库ssh key管理的地方，比如github是在Settings–&amp;gt;SSH Keys里面
3. 多密钥管理 ~/.ssh/config 当有多个ssh密钥需要管理时，一定要修改config文件的权限，否则你配置后仍然时无效的**
touch ~/.ssh/config chmod 600 ~/.ssh/config  ~/.</description>
    </item>
    
    <item>
      <title>Windows 下 Chrome 快捷键大全</title>
      <link>http://i-cooltea.github.io/posts/windows-%E4%B8%8B-chrome-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</link>
      <pubDate>Sat, 16 Jun 2018 06:20:41 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/windows-%E4%B8%8B-chrome-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</guid>
      <description>##常规 | 序号 | 说明 | | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | | 1 | Ctrl+N 打开新窗口。 | | 2 | Ctrl+T 打开新标签页。 | | 3 | Ctrl+Shift+N 在隐身模式下打开新窗口。 | | 4 | Ctrl+Shift+T 重新打开上次关闭的标签页。GoogleChrome浏览器可记住最近关闭的10个标签页。 | | 5 | Ctrl+9 切换到最后一个标签页。 | | 6 | Ctrl+Tab 切换到下一个标签页。 | | 7 | Ctrl+PgDown 切换到下一个标签页。 | | 8 | Ctrl+Shift+Tab 切换到上一个标签页。 | | 9 | Ctrl+PgUp 切换到上一个标签页。 | | 10 | Alt+F4 关闭当前窗口。 | | 11 | Ctrl+W 关闭当前标签页或弹出窗口。 | | 12 | Ctrl+F4 关闭当前标签页或弹出窗口。 | | 13 | Alt+Home 在当前窗口打开主页。 | | 14 | Ctrl+P 打印当前网页。 | | 15 | Ctrl+S 保存当前网页。 | | 16 | F5 重新载入当前网页。 | | 17 | Ctrl+R 重新载入当前网页。 | | 18 | Esc 停止载入当前网页。 | | 19 | Ctrl+F 打开查找栏。 | | 20 | Ctrl+G 在查找栏中查找下一条与输入内容相匹配的内容 | | 21 | F3 在查找栏中查找下一条与输入内容相匹配的内容。 | | 22 | Ctrl+Shift+G 在查找栏中查找上一条与输入内容相匹配的内容。 | | 23 | Shift+F3 在查找栏中查找上一条与输入内容相匹配的内容。 | | 24 | Shift+Enter 在查找栏中查找上一条与输入内容相匹配的内容。 | | 25 | Ctrl+F5 重新载入当前网页，忽略缓存的内容。 | | 26 | Shift+F5 重新载入当前网页，忽略缓存的内容。 | | 27 | Ctrl+U 打开当前网页的源代码。 | | 28 | Ctrl+D 将当前网页保存为书签。 | | 29 | Ctrl+Shift+D 将所有打开的网页以书签的形式保存在新文件夹中。 | | 30 | F11 在全屏模式下打开网页。再按一次F11可退出全屏模式。 | | 31 | Home 转至网页顶部。 | | 32 | End 转至网页底部。 | | 33 | Ctrl+0 将网页上的所有内容都恢复到正常大小。 | | 34 | Space 向下滚动网页。 | | 35 | Ctrl+C 将突出显示的内容复制到剪贴板中。 | | 36 | Shift+Insert 从剪贴板中粘贴内容。 | | 37 | Ctrl+V 从剪贴板中粘贴内容。 | | 38 | Ctrl+Shift+V 从剪贴板中粘贴内容(不带格式)。 | | 39 | Shift+Delete 删除突出显示的内容并将其复制到剪贴板中。 | | 40 | Ctrl+X 删除突出显示的内容并将其复制到剪贴板中。 | | 41 | Alt+F 打开“工具”菜单，用该菜单可自定义和控制GoogleChrome浏览器中的设置。 | | 42 | Alt+E 打开“工具”菜单，用该菜单可自定义和控制GoogleChrome浏览器中的设置。 | | 43 | Ctrl+Shift+B 打开和关闭书签栏。 | | 44 | Ctrl+H 打开“历史记录”页面。 | | 45 | Ctrl+J 打开“下载内容”页面。 | | 46 | Shift+Esc 打开任务管理器。 | | 47 | Shift+Alt+T 依次打开最近关闭的网页 | | 48 | Shift+F10 可打开相关右键菜单(例如，“后退”按钮关联的浏览历史记录)。 | | 49 | Esc 可将焦点从工具栏移回到网页上。 | | 50 | Ctrl+Shift+J 打开开发人员工具。 | | 51 | Ctrl+Shift+Delete 打开“清除浏览数据”对话框。 | | 52 | F1 在新标签页中打开帮助中心(首选方式)。 | | 53 | F6 将焦点切换到下一个键盘可访问的窗格 | | 54 | Shift+F6 将焦点切换到下一个键盘可访问的窗格 | | 55 | ↓ 导航元素 | | 56 | ↑ 导航元素 | | 57 | ← 展开元素 | | 58 | → 收起元素 | | 59 | Enter 输入属性 | | 60 | H 隐藏属性 | | 61 | F2 | | 62 | TabShift+Tab 下一个属性 | | 63 | ↑ 增加值 | | 64 | ↓ 减少值 | | 65 | PageUp 增加10 | | 66 | PageDown 减少10 | | 67 | Shift+↑ 增加10 | | 68 | Shift+↓ 减少10 | | 69 | Shift+PageUp 增加100 | | 70 | Shift+PageDown 减少100 | | 71 | Alt+↑ 增加0.</description>
    </item>
    
    <item>
      <title>GIT实现自动拉取代码 （实现自动部署）</title>
      <link>http://i-cooltea.github.io/posts/git%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 13 Jun 2018 06:54:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/git%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
      <description>###一、利用crontab定时任务
编辑用户的定时任务： crontab -e 在用户定时任务文件里写入定时命令 每过1分钟执行后面的命令 ： */1 * * * * cd /home/wwwroot/default/GIT/autoload;/usr/local/bin/git pull cd /../autoload 表示进入到git项目目录 /../git pull 进入项目目录后拉取代码  ###二、利用PHP脚本拉取（git服务器有提示功能的可以用此方法）
php文件里的代码内容（前提是需要支持exec函数）： exec(&amp;quot;cd /home/wwwroot/default/GIT/autoload;/usr/local/bin/git pull&amp;quot;);  </description>
    </item>
    
    <item>
      <title>Linux 下常用命令 持续更新~</title>
      <link>http://i-cooltea.github.io/posts/linux-%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0~/</link>
      <pubDate>Mon, 11 Jun 2018 06:39:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux-%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0~/</guid>
      <description>1.ls [选项] [目录名 | 列出相关目录下的所有目录和文件 -a 列出包括.a开头的隐藏文件的所有文件 -A 通-a，但不列出&amp;rdquo;.&amp;ldquo;和&amp;rdquo;..&amp;rdquo; -l 列出文件的详细信息 -c 根据ctime排序显示 -t 根据文件修改时间排序 &amp;mdash;color[=WHEN] 用色彩辨别文件类型 WHEN 可以是’never’、’always’或’auto’其中之一 白色：表示普通文件 蓝色：表示目录 绿色：表示可执行文件 红色：表示压缩文件 浅蓝色：链接文件 红色闪烁：表示链接的文件有问题 黄色：表示设备文件 灰色：表示其它文件
2.mv [选项] 源文件或目录 目录或多个源文件 | 移动或重命名文件 -b 覆盖前做备份 -f 如存在不询问而强制覆盖 -i 如存在则询问是否覆盖 -u 较新才覆盖 -t 将多个源文件移动到统一目录下，目录参数在前，文件参数在后 eg: mv a /tmp/ 将文件a移动到 /tmp目录下 mv a b 将a命名为b mv /home/zenghao test### 1.txt test### 2.txt test### 3.txt
3.cp [选项] 源文件或目录 目录或多个源文件 | 将源文件复制至目标文件，或将多个源文件复制至目标目录。 -r -R 递归复制该目录及其子目录内容 -p 连同档案属性一起复制过去 -f 不询问而强制复制 -s 生成快捷方式 -a 将档案的所有特性都一起复制</description>
    </item>
    
    <item>
      <title>Linux 下 NFS 服务权限问题解决  Permission denied</title>
      <link>http://i-cooltea.github.io/posts/linux-%E4%B8%8B-nfs-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-permission-denied/</link>
      <pubDate>Sat, 09 Jun 2018 15:09:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux-%E4%B8%8B-nfs-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-permission-denied/</guid>
      <description>[TOC]
##前言 &amp;gt;NFS 是一种分布式文件系统，允许客户端主机可以像访问本地存储一样通过网络访问服务器端文件。同时，NFS 协议也是开放的，基于 ONC RPC 协议的一个标准 RFC 协议。凡是实现 NFS 标准的软件（客户端或者服务端）都可以互相兼容。 使用
Linux 内置的 mount 命令就支持 NFS，仅仅运行：
&amp;gt; mount -t nfs ${server_ip}:${server_nfs_dir} ${local_dir}  即可将远程的网络目录挂载到本地，就如同操作本地文件一样。并且一般来讲 应用程序对 NFS 挂载点的访问及使用和本地目录没有区别。
例： &amp;gt; mount -t nfs 10.10.2.140:/data/ABC /data/ABC  NFS 权限问题 假如你当前登录在客户端系统上的用户 UID 为 1000， 那么你对 NFS 文件的操作权限就对应 NFS 服务器的 UID:1000 用户的权限。 因为客户端用户对应服务端用户，变相的相当于“你在用服务器上你的身份操作NFS服务器的文件”。 因为这个原因，对于系统管理员和客户端使用人员而言， 可能对 NFS 的权限配置就省了很大的一笔功夫了。 那么问题就来了：客户端系统的用户ID和服务器的用户ID不是一一对应的，可能会出现各种异常问题，常见：  &amp;gt; echo &amp;quot;abc&amp;quot;&amp;gt;/data/ABC/1.txt &amp;gt; bash: 1.txt: Permission denied  ###NFS 权限问题解决思路 方案一：</description>
    </item>
    
    <item>
      <title>Linux 下 centos7 NFS使用与配置</title>
      <link>http://i-cooltea.github.io/posts/linux-%E4%B8%8B-centos7-nfs%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 09 Jun 2018 14:59:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux-%E4%B8%8B-centos7-nfs%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>[TOC]
###简介
NFS是Network File System的缩写，即网络文件系统。 客户端通过挂载的方式将NFS服务器端共享的数据目录挂载到本地目录下。  ###1. NFS为什么需要RPC? 因为NFS支持的功能很多，不同功能会使用不同程序来启动， 因此，NFS对应的功能所对应的端口无法固定。 端口不固定造成客户端与服务端之间的通信障碍，所以需要RPC来从中帮忙。 NFS启动时会随机取用若干端口，然后主动向RPC服务注册取用相关端口和功能信息， RPC使用固定端口111来监听来自NFS客户端的请求， 并将正确的NFS服务端口信息返回给客户端，这样客户端与服务端就可以进行数据传输了。
###2. NFS的工作流程 由程序在NFS客户端发起存取文件的请求，客户端本地的RPC(rpcbind)服务 会通过网络向NFS服务端的RPC的111端口发出文件存取功能的请求。 NFS服务端的RPC找到对应已注册的NFS端口，通知客户端RPC服务。 客户端获取正确的端口，并与NFS daemon联机存取数据。 存取数据成功后，返回前端访问程序，完成一次存取操作。
###3. NFS服务安装配置
**安装 : nfs-utils / rpcbind**  查看是否安装NFS
&amp;gt; rpm -qa nfs-utils rpcbind &amp;gt; yum install nfs-utils rpcbind  ###4. 启动rpcbind服务
查看服务状态 &amp;gt; systemctl status rpcbind.service 如果不知道rpcbind命令在哪 &amp;gt; which rpcbind 启动rpc服务 &amp;gt; systemctl restart rpcbind.service  查看rpc  &amp;gt; lsof -i :111 &amp;gt; netstat -lntup|grep rpcbind 如果出现-bash未找到命令可执行下面命令 &amp;gt; yum install net-tools lsof 查看nfs服务向rpc注册的端口信息 &amp;gt; rpcinfo -p localhost 检查rpcbind是否开机启动 &amp;gt; chkconfig --list rpcbind ``` ###5.</description>
    </item>
    
    <item>
      <title>端口转发：nginx做后端，Apache做前端</title>
      <link>http://i-cooltea.github.io/posts/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91nginx%E5%81%9A%E5%90%8E%E7%AB%AFapache%E5%81%9A%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Fri, 01 Jun 2018 14:51:38 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91nginx%E5%81%9A%E5%90%8E%E7%AB%AFapache%E5%81%9A%E5%89%8D%E7%AB%AF/</guid>
      <description>最近使用nginx做前端，apache后端，就是让nginx处理静态文件，把动态的转交给apache处理，现在把配置方式整理如下
1.1、反向代理过程 Nginx前端，Apache后端过程其实很简单，首先用户访问的是80端口的nginx，然后nginx将静态内容留给自己， 其余的转发给非80端口的apache，apache处理完毕后再回传给nginx。
二、编辑 Nginx 配置文件 2.1、添加”proxy_set_header”指令 proxy_redirect off; proxy_set_header Host $host;# 向后端服务器发起请求时添加指定的header头信息 proxy_set_header X-Real-IP $remote_addr;# 向后端服务器发送真实 IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;#让后端如php能直接通过变量获取真实IP
2.2、添加”proxy_pass”指令 方法一： 将所有请求都转发给后端 apache 处理，但由于 “~” 优先级高于 “/” ，所以图片、JS、CSS例外，”expires” 用于设置缓存时间。 location / { proxy_pass http://127.0.0.1:8080; } location ~ /.(jpg|jpeg|gif|png)$ { access_log off; expires 30d; } location ~* /.(js|css)$ { access_log off; expires 1d; }
方法二： 只将.php后缀的文件，交由后端 apache 处理 location ~ /.php$ { proxy_pass http://127.0.0.1:8080; }
方法三： 首先nginx判断是否存在文件，如果不存在都转交给apache处理 location / { proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; if (!</description>
    </item>
    
    <item>
      <title>mysql 语句优化 (30种SQL语句优化)</title>
      <link>http://i-cooltea.github.io/posts/mysql-%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96-30%E7%A7%8Dsql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 22 May 2018 06:41:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/mysql-%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96-30%E7%A7%8Dsql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</guid>
      <description>1、应尽量避免在 where 子句中使用!=或&amp;lt;&amp;gt;操作符 否则将引擎放弃使用索引而进行全表扫描。  2、对查询进行优化 应尽量避免全表扫描 首先应考虑在 where 及 order by 涉及的列上建立索引。  3、应尽量避免在 where 子句中对字段进行 null 值判断 否则将导致引擎放弃使用索引而进行全表扫描 如： select id from t where num is null 可以在num上设置默认值0 确保表中num列没有null值 然后这样查询： select id from t where num=0  4、尽量避免在 where 子句中使用 or 来连接条件 否则将导致引擎放弃使用索引而进行全表扫描 如： select id from t where num=10 or num=20 可以这样查询： select id from t where num=10 union all select id from t where num=20  5、下面的查询也将导致全表扫描：(不能前置百分号) select id from t where name like ‘�c%’ 若要提高效率 可以考虑全文检索。  6、in 和 not in 也要慎用 否则会导致全表扫描 如： select id from t where num in(1,2,3) 对于连续的数值 能用 between 就不要用 in 了： select id from t where num between 1 and 3  7、如果在 where 子句中使用参数 也会导致全表扫描。因为SQL只有在运行时才会解析局部变量 但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而 如果在编译时建立访问计划 变量的值还是未知的 因而无法作为索引选择的输入项。如下面语句将进行全表扫描： select id from t where num=@num 可以改为强制查询使用索引： select id from t with(index(索引名)) where num=@num  8、应尽量避免在 where 子句中对字段进行表达式操作 这将导致引擎放弃使用索引而进行全表扫描。如： select id from t where num/2=100 应改为: select id from t where num=100*2  9、应尽量避免在where子句中对字段进行函数操作 这将导致引擎放弃使用索引而进行全表扫描。如： select id from t where substring(name,1,3)=’abc’–name以abc开头的id select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id 应改为: select id from t where name like ‘abc%’ select id from t where createdate&amp;gt;=’2005-11-30′ and createdate&amp;lt;’2005-12-1′  10、不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算 否则系统将可能无法正确使用索引。  11、在使用索引字段作为条件时 如果该索引是复合索引 那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引 否则该索引将不会被使 用 并且应尽可能的让字段顺序与索引顺序相一致。  12、不要写一些没有意义的查询 如需要生成一个空表结构： select col1,col2 into #t from t where 1=0 这类代码不会返回任何结果集 但是会消耗系统资源的 应改成这样： create table #t(…)  13、很多时候用 exists 代替 in 是一个好的选择： select num from a where num in(select num from b) 用下面的语句替换： select num from a where exists(select 1 from b where num=a.</description>
    </item>
    
    <item>
      <title>phpstorm常用快捷键</title>
      <link>http://i-cooltea.github.io/posts/phpstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sun, 20 May 2018 14:46:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/phpstorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>windows下phpstorm的快捷键
ctrl+f查找 ctrl+r替换 ctrl+shift+n查找文件 ctrl+shift+f 在一个目录里查找一段代码(ctrl+f的升级版) ctrl+shift+r 在一个目录里查找一段代码并替换(ctrl+r的升级版) CTRL+ALT ←/→ 返回上次编辑的位置 ALT+ ←/→ 切换代码视图，标签切换 ALT+ ↑/↓ 在方法间快速移动定位 ctrl+j插入活动代码提示 ctrl+alt+t当前位置插入环绕代码 alt+insert生成代码菜单 ctrl+q查看代码注释 ctrl+d复制当前行 ctrl+y删除当前行 shift+F6重命名 ctrl+shift+u字母大小写转换 F4查看源码 ctrl+shift+i查看变量或方法定义源 ctrl+g跳转行 ctrl+alt+F12跳转至当前文件在磁盘上的位置 ctrl+alt+l重新格式化代码 ctrl+shift+downstatement向下移动 ctrl+shift+upstatement向上移动 alt+shift+downline向下移动 alt+shift+upline向上移动 ctrl+/行注释 ctrl+shift+/块注释 ctrl+b跳到变量申明处 ctrl+[]匹配 {}[] ctrl+shift+]/[选中块代码 ctrl+x剪切行 ctrl+shift+v复制多个文本 alt+left/right标签切换 ctrl+p显示默认参数 ctrl+F12在当前类文件里快速查找方法  mac电脑phpstorm快捷键
command + o 按类名查找文件 command + shift + o 按文件名查找文件 command + a 全选 command + c 复制 command + v 粘贴 command + z 撤消 fn+command+f2 查看类结构 command + e 列出最后打开的文件 ctrl + shift + / 块注释 shift + command + x shift + command + r 按文件名搜索对应文件所在路径 shift + command + t 按类名搜索对应文件所在路径 shift + command + c 复制当前文件所在路径 选中左侧的文件名 shift + f6(mac需要同时按住键) 进行文件重命名  </description>
    </item>
    
    <item>
      <title>符号图案</title>
      <link>http://i-cooltea.github.io/posts/%E7%AC%A6%E5%8F%B7%E5%9B%BE%E6%A1%88/</link>
      <pubDate>Sun, 20 May 2018 14:46:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E7%AC%A6%E5%8F%B7%E5%9B%BE%E6%A1%88/</guid>
      <description>.&amp;quot;&amp;quot;. .&amp;quot;&amp;quot;, | | / / | | / / | | / / | |/ ;-._ } ` _/ / ; | /` ) / / | / /_/\_/\ |/ / | ( &#39; \ &#39;- | \ `. / | | | | * * ___ * * _|___|_ * * &#39;=/a a\=&#39; * * \~_ / * * _\__/ &#39;-&#39; \__/_ / \ o / \ * / &#39;---&#39; \ * | o | * ---.</description>
    </item>
    
    <item>
      <title>开源许可证基础知识扫盲</title>
      <link>http://i-cooltea.github.io/posts/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2/</link>
      <pubDate>Sat, 19 May 2018 15:01:41 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2/</guid>
      <description>作为一个开发者，如果你打算开源自己的代码，千万不要忘记，选择一种开源许可证（license）。
许多开发者对开源许可证了解很少，不清楚有哪些许可证，应该怎么选择。本文介绍开源许可证的基本知识，主要参考了 OpenSource.com （1，2）。
一、什么是开源许可证
开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。
版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。
二、开源许可证的种类
目前，国际公认的开源许可证共有80多种。它们的共同特征是，都允许用户免费地使用、修改、共享源码，但是都有各自的使用条件。
如果一种开源许可证没有任何使用条件，连保留作者信息都不需要，那么就等同于放弃版权了。这时，软件可以直接声明进入&amp;rdquo;公共领域&amp;rdquo;（public domain）。
根据使用条件的不同，开源许可证分成两大类。
宽松式（permissive）许可证
Copyleft 许可证
三、宽松式许可证
3.1 特点
宽松式许可证（permissive license）是最基本的类型，对用户几乎没有限制。用户可以修改代码后闭源。
它有三个基本特点。
（1）没有使用限制
用户可以使用代码，做任何想做的事情。
（2）没有担保
不保证代码质量，用户自担风险。
（3）披露要求（notice requirement）
用户必须披露原始作者。
3.2 常见许可证
常见的宽松式许可证有四种。它们都允许用户任意使用代码，区别在于要求用户遵守的条件不同。
（1）BSD（二条款版）
分发软件时，必须保留原始的许可证声明。
（2） BSD（三条款版）
分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销。
（3）MIT
分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致。
（4）Apache 2
分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变。
四、Copyleft 许可证
4.1 Copyleft 的含义
Copyleft 是理查德·斯托曼发明的一个词，作为 Copyright （版权）的反义词。
Copyright 直译是&amp;rdquo;复制权&amp;rdquo;，这是版权制度的核心，意为不经许可，用户无权复制。作为反义词，Copyleft 的含义是不经许可，用户可以随意复制。
但是，它带有前提条件，比宽松式许可证的限制要多。
如果分发二进制格式，必须提供源码
修改后的源码，必须与修改前保持许可证一致
不得在原始许可证以外，附加其他限制
上面三个条件的核心就是：修改后的 Copyleft 代码不得闭源。
4.2 常见许可证
常见的 Copyleft 许可证也有四种（对用户的限制从最强到最弱排序）。
（1）Affero GPL (AGPL)
如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源。</description>
    </item>
    
    <item>
      <title>mysql 远程连接速度慢的解决方案</title>
      <link>http://i-cooltea.github.io/posts/mysql-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 20 Mar 2018 10:41:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/mysql-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>2台服务器，一台跑iis+php，一台跑mysql，和以往一样配置好环境，测试页面一切OK
跑应用的时候发现php访问mysql速度很慢，这种情况在以前从未发现过，虽然2台服务器并非在同一网段中，但是ping数值基本上都在1,2ms之间，tcp连接应该不是问题关健，google以后找到答案，在my.ini文件的[mysqld]部分加入:skip-name-resolve，保存文件，重启mysql，一切OK啦，速度象飞一样了新版本的mysql配置起来不象以前的那个傻瓜化了，这个问题折腾了我一上午的时间，晚上回来总算是解决了，嘿嘿，又学到一些东西。&amp;nbsp;Windows 2003下的MySQL 5服务器，本机连接到MySQL服务非常快，局域网内有两台Linux机器，有一台连接很快，另外一台输入密码后要等好几秒钟才能连上。解决办法：在MySQL服务器的配置中增加一个如下配置后速度飞快。[mysqld]skip-name-resolve
附录：( How MySQL uses DNS )When a new thread connects to mysqld, mysqld will spawn a new thread to handle the request. This thread will first check if the hostname is in the hostname cache. If not the thread will call gethostbyaddr_r() and gethostbyname_r() to resolve the hostname.If the operating system doesn&#39;t support the above thread-safe calls, the thread will lock a mutex and call gethostbyaddr() and gethostbyname() instead.</description>
    </item>
    
    <item>
      <title>php 二维数组按键值排序 array_multisort</title>
      <link>http://i-cooltea.github.io/posts/php-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E9%94%AE%E5%80%BC%E6%8E%92%E5%BA%8F-array_multisort/</link>
      <pubDate>Tue, 20 Mar 2018 10:38:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/php-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%89%E9%94%AE%E5%80%BC%E6%8E%92%E5%BA%8F-array_multisort/</guid>
      <description>1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29   $arr=[  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;array(  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;小坏龙&amp;rsquo;,  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;age&amp;rsquo;=&amp;gt;28  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;),  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;array(  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;小坏龙2&amp;rsquo;,  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;age&amp;rsquo;=&amp;gt;14  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;),  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;array(  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;小坏龙3&amp;rsquo;,  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;age&amp;rsquo;=&amp;gt;59  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;),  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;array(  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;小坏龙4&amp;rsquo;,  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;age&amp;rsquo;=&amp;gt;23  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;),  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;array(  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;小坏龙5&amp;rsquo;,  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;age&amp;rsquo;=&amp;gt;23  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;),  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;array(  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;小坏龙6&amp;rsquo;,  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lsquo;age&amp;rsquo;=&amp;gt;21  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;),  ];  &amp;nbsp;  array_multisort(array_column($arr,&amp;lsquo;age&amp;rsquo;),SORT_DESC,$arr);  print_r($arr);          其中 &amp;nbsp;array_column(数组,数组中的某个键值) &amp;nbsp;从多维数组中取出某个键值的一列 &amp;nbsp;返回一个一维数组； array_multisort(数组(一维数组),排序方式(SOTR_ASC,SOTR_DESC),其他数组(可以是二维的))</description>
    </item>
    
    <item>
      <title>sublime text3 的PHP函数追踪定位插件ctags和codeBeautifier</title>
      <link>http://i-cooltea.github.io/posts/sublime-text3-%E7%9A%84php%E5%87%BD%E6%95%B0%E8%BF%BD%E8%B8%AA%E5%AE%9A%E4%BD%8D%E6%8F%92%E4%BB%B6ctags%E5%92%8Ccodebeautifier/</link>
      <pubDate>Fri, 09 Mar 2018 02:50:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/sublime-text3-%E7%9A%84php%E5%87%BD%E6%95%B0%E8%BF%BD%E8%B8%AA%E5%AE%9A%E4%BD%8D%E6%8F%92%E4%BB%B6ctags%E5%92%8Ccodebeautifier/</guid>
      <description>一、下载ctags&amp;nbsp;http://download.csdn.net/detail/xujunabc999/9604934 二、安装ctags和codeBeautifier插件：&amp;nbsp;1）按Ctrl+shift+P，打开Install Package&amp;nbsp;2）搜索ctags进行插件安装；&amp;nbsp;3）搜索Php codeBeautifier进行插件安装。
三、配置快捷键&amp;nbsp;配置在sublime中使用Ctrl+左键单击函数跳转、Ctrl+右键单击跳回函数调用位置&amp;nbsp;复制以下代码到Preferences-&amp;gt;Package Settings-&amp;gt;Ctags-&amp;gt;Mouse Bindings-User&amp;nbsp;[ { &#34;button&#34;: &#34;button1&#34;, &#34;count&#34;: 1, &#34;press_command&#34;: &#34;drag_select&#34;, &#34;modifiers&#34;: [&#34;ctrl&#34;], &#34;command&#34;: &#34;navigate_to_definition&#34; }, { &#34;button&#34;: &#34;button2&#34;, &#34;count&#34;: 1, &#34;modifiers&#34;: [&#34;ctrl&#34;], &#34;command&#34;: &#34;jump_prev&#34; } ]  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18    四、运行ctags.exe&amp;nbsp;1）拷贝ctags.ext到项目根目录&amp;nbsp;2）在项目根目录打开cmd运行“ctags -R -f .</description>
    </item>
    
    <item>
      <title>wamp 环境中 启动了多个php-cgi 进程 导致服务器的内存不足的解决方案</title>
      <link>http://i-cooltea.github.io/posts/wamp-%E7%8E%AF%E5%A2%83%E4%B8%AD-%E5%90%AF%E5%8A%A8%E4%BA%86%E5%A4%9A%E4%B8%AAphp-cgi-%E8%BF%9B%E7%A8%8B-%E5%AF%BC%E8%87%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 08 Mar 2018 02:43:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/wamp-%E7%8E%AF%E5%A2%83%E4%B8%AD-%E5%90%AF%E5%8A%A8%E4%BA%86%E5%A4%9A%E4%B8%AAphp-cgi-%E8%BF%9B%E7%A8%8B-%E5%AF%BC%E8%87%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>在使用phpStudy 的时候出现了 启动了多个php-cgi 进程 导致服务器的内存不足 CPU占用率  解决方法是 在 \Apache\conf\extra 的目录下 找到 httpd-fcgid.conf 的配置文件
  FcgidIOTimeout 384
FcgidConnectTimeout 360
FcgidOutputBufferSize 128
FcgidMaxRequestsPerProcess 1000
FcgidMinProcessesPerClass 0 
FcgidMaxProcesses 2 
FcgidMaxRequestLen 268435456 
ProcessLifeTime 360
FcgidInitialEnv PHP_FCGI_MAX_REQUESTS 1000  将 StartProcesses=&amp;ldquo;8&amp;rdquo; 改为 StartProcesses=&amp;ldquo;2&amp;rdquo; 即可</description>
    </item>
    
    <item>
      <title>使用 .htaccess 文件 强制请求 重定向到 https</title>
      <link>http://i-cooltea.github.io/posts/%E4%BD%BF%E7%94%A8-.htaccess-%E6%96%87%E4%BB%B6-%E5%BC%BA%E5%88%B6%E8%AF%B7%E6%B1%82-%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0-https/</link>
      <pubDate>Wed, 07 Mar 2018 11:12:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E4%BD%BF%E7%94%A8-.htaccess-%E6%96%87%E4%BB%B6-%E5%BC%BA%E5%88%B6%E8%AF%B7%E6%B1%82-%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0-https/</guid>
      <description>在index.php 的同级目录下新建 .htaccess 文件
  &amp;lt;IfModule mod_rewrite.c&amp;gt;
&amp;nbsp;Options +FollowSymlinks -Multiviews
&amp;nbsp;RewriteEngine On
&amp;nbsp;RewriteCond %{REQUEST_FILENAME} !-d
&amp;nbsp;RewriteCond %{REQUEST_FILENAME} !-f
&amp;nbsp;RewriteRule ^(.)$ index.php [L,E=PATH_INFO:$1]
&amp;nbsp;RewriteCond %{SERVER_PORT} !^443$
&amp;nbsp;RewriteRule ^.$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R]
&amp;nbsp;
&amp;lt;/IfModule&amp;gt;
&amp;nbsp;</description>
    </item>
    
    <item>
      <title> [数据库] Navicat for MySQL定时备份数据库及数据恢复</title>
      <link>http://i-cooltea.github.io/posts/-%E6%95%B0%E6%8D%AE%E5%BA%93-navicat-for-mysql%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Wed, 07 Mar 2018 02:08:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/-%E6%95%B0%E6%8D%AE%E5%BA%93-navicat-for-mysql%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/</guid>
      <description>在做数据库修改或删除操作中，可能会导致数据错误，甚至数据库奔溃，而有效的定时备份能很好地保护数据库。本篇文章主要讲述Navicat for MySQL定时备份数据库和数据恢复等功能，同时可以定时播放电影等设置，希望对您有所帮助，如果文章中存在错误或不足之处，还请海涵~  一. 设置计划任务定时备份数据库  计划任务就是让电脑在指定的时间内执行指定的动作，这些动作可以是一个程序，也可以是一个批处理，但是至少是可以运行的！其实再通俗一点也就是相当于你在那个时间里面进行了对某个东西对鼠标双击的操作。 1.首先，创建数据库hcpmanage，表information，主要记录车票信息。   2.点击&#34;任务&#34;-&amp;gt;&#34;新建批处理作业&#34;，如下图所示。   3.然后弹出的对话框中，双击可用任务&#34;Backup hcpmanage&#34;，并选择任务。点击保存按钮，设置为&#34;20170418bf&#34;。 &amp;nbsp;&amp;nbsp; 4.然后该备份文件就会出现在计划列表中，如下图所示。   5.点击该&#34;20170418bf&#34;，设置计划任务，如下图所示。  6.在弹出&#34;计划&#34;中设置每天23:58进行备份操作，如下图所示。   7.点击&#34;应用&#34;，在弹出的&#34;设置账户信息&#34;中，输入开机密码，点击确定。  其中常用设置如下所示，包括完成任务计划、空闲时间和电源管理等。  8.当时间每天到达23:58时，数据库进行定时备份。其备份文件在&#34;Windows/System32/Tasks&#34;任务路径下，如下图所示。  另一个备份psc文件所在路径：Navicat\MySQL\servers\test\hcpmanage（连接-数据库）。  注意：在输入开机密码过程中，经常会报错&#34;任务计划程序 再试着设置任务账户信息时出现错误&#34;，如下图所示，解决方法见第三部分。  二. 数据库恢复  假设现在该数据库已经毁坏，已删除表information，现在需要对齐进行恢复。  1.点击&#34;备份&#34; -&amp;gt; &#34;还原备份&#34;，如下图所示。   2.它会默认弹出找到对应的数据库，选择该psc文件，如下图所示。   3.弹出&#34;还原备份&#34;，时间为23:58进行的备份文件，点击&#34;开始&#34;按钮。  4.然后数据进行恢复成功，查看&#34;信息日志&#34;，如下图所示。&amp;nbsp;&amp;nbsp; 5.数据还原成功，其他的方法类似。  三. 任务计划程序错误解决  在进行计划设置过程中，输入用户名或密码总会报错，尤其是密码为空的情况，如下所示。这个错误怎么解决呢？
1.在&#34;服务&#34;(cmd中命令services.msc)中&#34;Task Scheduler&#34;需要启动。  2.在&#34;本地策略&#34;(cmd中命令gpedit.msc)中&#34;安全选项&#34;，需要禁用&#34;账户：使用空密码的本地账户只允许进行控制台 登录&#34;。注意是禁用，如下图所示。    四. 定时播放视频  参考文章：windows计划任务使用方法附常见问题解决计划任务应该是很老的一个系统的功能的（从98下就有的）， 也渐渐的被人淡忘了，现在我用来进行数据库备份，其实还可用于很多功能。 1.</description>
    </item>
    
    <item>
      <title>MySQL学习笔记</title>
      <link>http://i-cooltea.github.io/posts/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 04 Mar 2018 13:38:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>零散知识点   ACID：原子性、一致性、隔离性、持久性  事务的隔离级别，四种：（1）未提交读（可能出现脏读）；（2）提交读（可能出现不可重复读）；（3）可重复读（可能出现幻读，但mysql的innodb通过mvcc解决了这个问题）；（4）可串行化读（行行加锁，太重了，一般不用）     索引篇   索引主要分为B+树索引和Hash索引。  索引的最左匹配原则：比如设定一个索引为(col1,col2,col3)，那么必须在where子句中含有最左边的列col1的时候，索引才会起作用。其他如where col2=val and col3= val。。。。都是不使用索引的。  聚集索引定义：一种逻辑索引和物理索引相同的索引。一张表只能有一个聚集索引，因为物理索引只有一种。根据这个特性，适用于范围查找。主键列默认是聚集索引。  聚集索引的优点：（1）适合范围查找&amp;nbsp; 缺点：（1）对于数据更新开销大  非聚集索引与聚集索引的区别：（1）叶子节点并非数据节点&amp;nbsp; &amp;nbsp; （2）叶子节点为每一个真正的数据行存储一个“键-指针对&amp;nbsp; &amp;nbsp; &amp;nbsp;（3）叶子节点中还存储了一个指针偏移量，根据页指针及指针偏移可以定位到具体的数据行。&amp;nbsp; （4）在除叶节点外的其他索引节点，存储的是类似内容，只不过是指向下一级索引页。 自适应hash索引：对某些多次访问的列，自动加上hash索引方便查询。   聚集索引   InnoDB的聚集索引实际上在同样的结构中保存了B-树索引和数据行  数据行实际保存在索引的叶子页。（B-树特性）  “聚集”的定义：指实际的数据行和相关的键值都保存在一起  优点：（1）适合范围查找，比如可以按照学号聚集，查出一个学生所有的成绩。（2）数据访问快，因为是聚集的，所以索引和数据都保存到了同一颗B树上。（3）使用覆盖索引的查询可以使用包含在叶子节点中的主键值  缺点：（1）聚集索引适合I/O密集型，如果数据量很小，能够装入内存，那就没有太大的意义。（2）更新操作困难，插入依赖于插入顺序，最快就是按照主键插入。   B+树索引   特点：B+树和B树类似，都是平衡的M叉多路访问树。但B+树在叶子节点上增加了前后指针，方便快速访问叶节点。且B+树的非叶节点是索引，叶节点才存储需要的关键字数据。  对于B树索引来说，索引的列顺序很重要，因为需要遵守最左匹配原则  优点：（1）是平衡树，从根节点到叶节点路径短，且同层级有指针方便快速移动（2）能够减少磁盘I/O次数，因为索引文件是也要占空间的，而B类树（B-/B+）有大量的非叶节点存储索引。且B+树中的非叶节点没有数据域，空间更大，存储的容量更多，即减少磁盘读写。  缺点：（1）对于重复性低的表查询速度没有hash快。（2）等值查询没有hash快     Hash索引   优点：我们知道hash索引在查找上性能非常好，在合理的碰撞情况下可以认为是O(1)；这样对于磁盘的I/O次数就相对更少，我们知道磁盘的I/O非常花时间。  缺点：（1）有利有弊，因为hash是通过散列值一次确定位置，所以无法使用于范围查找。（2）hash索引无法用来避免排序操作：我们知道在构建索引的时候可以顺便将索引的列进行排序，这样在后期使用的时候就不用再排序了，而hash索引做不到这点。（3）hash索引任何时候都无法避免表扫描，因为碰撞的存在。  特点：Hash索引不支持最左匹配原则   全文索引   出现在Myisam引擎中  它不是使用where子句来比较相等性，而是执行相关的关键字操作，是基于数据的关联性，而非比较。  在表中通过连接字符列构造索引，并把他们当成很长的字符串进行索引  数据结构是双重平衡B树，容易出现 碎片  全文索引的添加/删除/修改 都很慢    覆盖索引   定义：包含（覆盖）所有满足查询需要的数据的索引。   原理：索引中保存了它包含列的数据；因此hash索引、全文索引都不能满足，只有B-树索引能够支持。  想要创建一个覆盖索引，这个索引必须包含指定表上包括WHERE语句、ORDER BY语句、GROUP BY语句(如果有的话)以及SELECT语句中的所有列。    关于索引建立的方式   习惯性的想法是不要在选择性很差的列上建索引，比如sex，可选范围只有man/woman，因为这样会返回大量满足条件的记录。但也有特殊情况  针对上一条，如果这个列虽然选择性很差，但是很多查询的where子句中都会用到它，那么可以采取变通的方法：（1）将该列设为索引的最左，即引用最左前缀匹配，那么对于大多数查询来说是可以用的上索引的。 （2）其次，如果不使用这列，那么可以使用sex in(&amp;lsquo;male&amp;rsquo;,&amp;lsquo;female&amp;rsquo;)这样来过滤。它实际上不会过滤任何行，但我们依然能使用上索引。  将范围判据放到索引的最后，这样优化器就会尽可能多的使用索引。同时请注意不要忘记：B树索引只能优化第一个范围条件左边的列。比如 where last_name=&amp;lsquo;Smith&amp;rsquo; and first_name like &amp;lsquo;J%&amp;rsquo; and bir_day=&amp;lsquo;1978-12-31&amp;rsquo;，那么只能优化last_name和first_name列。  总结：（1）选择性低的一般不用作索引 （2）如果查询中经常用到选择性低的列，那就把它放在索引列的前面，使用In()替换 （3）对于范围判据，放在索引列的后面，因为范围后面的列不会被优化 （5）如果有多个范围，将其中可以的转换为In() （6）如果不能转换为In()，那么转换为一个等值性的判断。      关于索引的使用   如果在查询中没有隔离索引的列，MySQL通常不会使用索引。  隔离列：既不是表达式的一部分，也没有位于函数中。比如 select* &amp;hellip;&amp;hellip;where to_days(current_date)-to_days(date_col)&amp;lt;=10,这个就不会使用索引，因为“-”既不是函数，也没有在表达式中。如果要使用索引应该是where date_col&amp;gt;=date_sub(current_date,interval 10 days)  如果是bolb/text或者很长的varchar,必须定义前缀索引，因为不允许索引它们的全文  对于大的表，应当使它的前缀选择率接近它的全列选择性。  前缀索引不能用在order by和group by子句中   关于索引对排序的优化   我们知道，B-树索引可以帮助排序。而MySQL有两种排序方法：（1）文件排序（2）索引排序，而索引排序只有在满足条件的情况下才能使用；在其他不满足的情况下我们使用索引排序。  按理来说，索引排序的速度应该是比文件排序快的，但这建立在索引是可以被覆盖查询的情况下，否则就是得顺序查找，这就成了近似于随机I/O。  索引排序成立条件：（1）所有列排序方向一致（DESC,ASC）（2）索引中列的顺序和order by子句中的顺序一致 （3）满足最左前缀原则   举个反例：这个里面我定义了两个索引，一个id,一个stu_name，然后order by子句里面是按sex的，这个时候因为order by子句中不含有索引列，所以不满足，可以看到Extra中是Using filesort（文件排序）的。      引擎篇      MySQL中最常用的两种引擎分别是:MyISAM,InnoDB。MySQL5.</description>
    </item>
    
    <item>
      <title>thinkphp5 开发的那点事</title>
      <link>http://i-cooltea.github.io/posts/thinkphp5-%E5%BC%80%E5%8F%91%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</link>
      <pubDate>Sun, 04 Mar 2018 13:36:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/thinkphp5-%E5%BC%80%E5%8F%91%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</guid>
      <description>知识点1：* 应用程序的流程图。对于一般的框架是这样的。* index.php文件作为前端控制器，初始化运行CodeIgniter所需的基本资源；  Router检查http请求，以确定如何处理请求；  如果存在缓存文件，将直接输出到浏览器，不用走下面正常的系统流程；  在加载应用程序控制器之前，对http请求以及任何用户提交的数据进行安全检查；  控制器加载模型、核心类库、辅助函数以及其他所有处理请求所需的资源  最后一步，渲染视图并发送至浏览器，如果开启了缓存，视图会先被缓存起来用于后续请求。&amp;nbsp;注释：前端控制器属于设计模式的一种，它用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。   知识点2：对MVC设计模式的思考&amp;nbsp;MVC 是一种 用于将应用程序的逻辑层和表现层分离出来的软件方法。在实践中，由于这种分离 所以你的页面中只包含很少的 PHP 脚本。&amp;nbsp;* 模型：代表数据结构。通常来说，模型类将包含帮助你对数据库进行增删改查的方法。可以说包含了DOA层和模型层。&amp;nbsp;* 视图：是要展现给用户的信息。一个视图通常就是一个网页，但是在CI中，一个视图也可以是一部分页面(例如页头、页尾)，它也可以是一个RSS页面，或者其他任何类型的页面。(表现层中的模板层)&amp;nbsp;* 控制器：是模型、视图以及其他任何处理http请求所必须的资源的中介，并生成网页。
知识点3：tp5开发中的错误与调试、日志&amp;nbsp;如果异步ajax访问tp5，不会返回trace信息。&amp;nbsp;项目开发的时候，出现错误在所难免，最大的困惑在于发现问题所在，其次才是如何解决问题。因此懂得如何调试和跟踪问题非常之关键。&amp;nbsp;总的来说有：trace信息（右下角）、错误页面（能解决80%的错误）、断点调试（dump，halt，trace控制台输出）、日志分析
学习框架需要掌握的一些概念&amp;nbsp;*&amp;nbsp;LAMP是基于Linux、Apache、Mysql和php的开放资源网络开发平台，也就是web平台，其中的php有时候用Perl或Python去替换。Linux是开发系统，Apache是最通用的网络服务器，mysql是带有网络管理附加工具的关系型数据库，php是流行的对象脚本语言。php包含了多数其他语言的优秀特性来使得它的网络开发更加有效。&amp;nbsp;我喜欢使用WAMPServer作为win7下的集成环境。&amp;nbsp;*&amp;nbsp;OOP，面向对象编程是一种计算机编程架构，OOP的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。&amp;nbsp;为了实现整体运算，每个对象都能够接收信息、处理数据和向其他对象发送信息。OOP主要有以下的概念和组件：&amp;nbsp;* 组件：数据和功能一起在运行着的计算机程序中形成的单元，也就是多个对象组合在一起，向外提供相同功能的组合体。组件在OOP计算机程序中是模块和结构化的基础。&amp;nbsp;* 抽象性：对信息主要方面关注的能力。&amp;nbsp;* 封装、继承和多态，这三种特性在书本上已经讲的不厌其烦了。[坏笑]&amp;nbsp;* ORM：(object/relation mapping)对象-关系映射，是随着面向对象的软件开发方法发展而产生的。==面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级环境中永久存放数据的主流数据存储系统。对象和关系数据是也为视图的两种表现形式，业务在内存中表现为对象，在数据库中表现为关系数据库。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系==，也就是代码中的对象和数据库中的数据之间，需要一个转化的桥梁，这个桥梁就是ORM。&amp;nbsp;* CURD：它代表了对数据的基本原子操作：增、删、改、查。
ActivRecord：可以简单理解为ORM层的一种实现方式，它遵循标准的ORM模型：表映射为记录，记录映射到对象，字段映射到对象的属性。它能够很大程度的快速实现模型的操作，而且简单易懂。 ActiveRecord的主要思想是： 每个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录，通常表的每个字段在类中都有对应的field(属性)  ActiveRecord同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即CURD  ActiveRecord是一种领域模型(Domain Model),封装了部分业务逻辑   ActiveRecord比较适用于： 业务逻辑比较简单，当你的类基本上和数据库中的表一一对应时，ActiveRecord是非常方便的，即你的业务逻辑大多数是对表单操作  当发生跨表的操作时，往往会配合使用事务脚本，把跨表事务提升到事务脚本中  ActiveRecord最大优点是简单、直观。一个类包括数据访问和业务逻辑。如果配合代码生成器使用就更方便了。这些优点是ActiveRecord特别适合WEB快速开发。    CBD架构模式&amp;nbsp;核心+行为+驱动 核心(Core)：就是框架的核心代码，不可缺少的东西，thinkphp这个框架就是基于MVC的开发框架。  行为(Bahevior)：行为在thinkphp架构中起到了去足轻重的作用，在系统核心之上，设置了很多标签扩展位，而每个标签位置可以依次执行各自的独立行为。行为扩展就此诞生，而且很多系统功能也是通过内置的行为扩展完成的，所有的行为扩展都是可替换和增加的，由此形成了底层框架的可组装的基础。  驱动(Driver)：数据库驱动、缓存驱动、标签库驱动和模板引擎驱动，以及外置的类扩展。    单一入口&amp;nbsp;通常是指一个项目或者应用具有一个统一(但并不一定是唯一)的入口文件，也就是一个项目的所有功能操作都是通过这个入口文件进行的，并且入口文件是执行的第一步。&amp;nbsp;单一入口的好处是控制比较灵活，因为拦截方便，类是如一些权限控制、用户登录方面的判断和操作可以统一处理了。 欢迎转载！！！</description>
    </item>
    
    <item>
      <title>Xdebug安装教程</title>
      <link>http://i-cooltea.github.io/posts/xdebug%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 04 Mar 2018 13:34:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/xdebug%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid>
      <description>参考链接 : Xdebug+PhpStorm 远程调试
在Ubuntu 14.04下的PhpStorm中配置xdebug调试环境
PHPStorm Xdebug Remote 调试环境搭建（不依赖本地环境）
1. 安装xdebug 得到本地phpinfo 配置信息
将打印信息拷贝并复制到 http://xdebug.org/wizard.php 这个页面提供的一个textarea中. 然后点击下方的Analyze按钮, 它会自动帮你解析你本地的PHP环境信息从而 得到你需要下载的xdebug版本和相关配置指令.
2. 得到需要下载的版本和相关指令 比如, 我得到的信息如下:
下载 xdebug-2.3.2.tgz (下载地址直接点击生成的链接) 解压缩文件： tar -xvzf xdebug-2.3.2.tgz 运行: cd xdebug-2.3.2 运行: phpize (See the FAQ if you don’t have phpize. 部分输出如下所示: Configuring for: … Zend Module Api No: 20121212 Zend Extension Api No: 220121212 如果没有以上输出, 那么代表你的phpize有问题. 参考FAQ.
运行: ./configure
运行: make 运行: sudo cp modules/xdebug.so /usr/lib/php5/20121212 在php.</description>
    </item>
    
    <item>
      <title>php---面试题---</title>
      <link>http://i-cooltea.github.io/posts/php-%E9%9D%A2%E8%AF%95%E9%A2%98-/</link>
      <pubDate>Sun, 04 Mar 2018 13:32:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/php-%E9%9D%A2%E8%AF%95%E9%A2%98-/</guid>
      <description>尽量涵盖，这里只写关于PHP的，基础肯定是各种字符串操作，数组操作，然后面向对象的理解。其实这里面好多好多东西都是平时用不到的，但这就是基础，面试官问到的东西只是你知道的很少很少一部分，但这就是你们交涉的全部所以还你是得让自己尽可能知道的多。写这些东西没有应试教育的意思，虽然有的东西平时不会用，但对你绝对都是有帮助的
1 PHP是用什么语言编写的
php是用c写的
扩展：php3 php4 php5的主要区别是什么，php6的新特征有哪些？
这个问题真恶心，等我以后心情好了在回答吧
2 目前PHP的最高版本是
2013.9.12现在应该是php5.5
3 PHP的三种注释方式
天啊，我竟然知道两种，太可怕了 # 竟然也是 好吧
4 请列出PHP的8种数据类型
字符串 数组 对象 数值类型 整型 xml 浮点 布尔值 特殊的有Null和resource(说实话我只用过前五种)
5 PHP中有几种形式装载代码，并列举，以包含同目录下的Config.php文件为例？
require include require_once include_once
require一般用在文件的头部包含文件，执行php时包含这个文件使它成为php的一部分
include一般用在流程控制中，用到时再包含
区别是require遇到错误不会往下执行，而include会继续执行
require_once和include_once的作用是避免重复包含，也就是说如果不小心包含了同一个文件，用这两个函数会只包含一次
6 PHP中===表示什么意思，以及与==的区别，什么情况下==是true,===是false
这个问题也是比较常见的，不过巨简单。==是比较表达式两边的值，而===会比较数据类型，比如a=1;b = ‘1’; ==的话就为true,但===就为false，因为数据类型不同
7 header的作用是什么，以及它的限制
sorry，这个需要先看http协议，等有功夫在回答这个问题，目前只知道这是做跳转用的
8 strstr和stristr的区别
这种字符串操作的方法但凡加了i的一般都是不区分大小写的意思。这里在普及一下strstr的做用吧，strstr默认返回从指定字符到该字符串结束的字符
9 php如何获得浏览器信息
看吧，php能做的事还是不少的，哎，我这么说会不会暴露了我的知识面比较窄的缺陷呢，哈哈
$_SERVER[‘HTTP_USER_AGENT’];平时没用过这些东西
10 什么是URLRewriteing
说说我自己的理解吧，就是伪静态嘛！通过隐藏网页的访问地址以达到更好收录的的效果，可能有不对的地方，欢迎拍砖
11 如何遍历一个文件夹下所有的内容（考中几率非常高）
以前我都嫌麻烦，不去记这些东西，而且平时用的话我都是从网上搜索，但笔试的时候肯定不能让你从网上搜虽然这东西经常被考到，但我可以确定的是你写不出来对你影响不会很大，当然写出来了更好，之前我欧诺个的都是什么opendir 之类的这些傻×函数，刚才我知道了scandir这个函数，这是循环遍历文件夹的函数，非常实用奥
[php] view plain copy&amp;nbsp;在CODE上查看代码片派生到我的代码片
&amp;lt;?php $dir = &#34;.&#34;; //当前目录 list_file($dir); function list_file($dir){ $list = scandir($dir); // 得到该文件下的所有文件和文件夹 foreach($list as $file){//遍历 $file_location=$dir.</description>
    </item>
    
    <item>
      <title>PHP相关的有参考价值的社区,博客,网站,文章,书籍,视频等资源</title>
      <link>http://i-cooltea.github.io/posts/php%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9C%89%E5%8F%82%E8%80%83%E4%BB%B7%E5%80%BC%E7%9A%84%E7%A4%BE%E5%8C%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%96%87%E7%AB%A0%E4%B9%A6%E7%B1%8D%E8%A7%86%E9%A2%91%E7%AD%89%E8%B5%84%E6%BA%90/</link>
      <pubDate>Sun, 04 Mar 2018 13:30:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/php%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9C%89%E5%8F%82%E8%80%83%E4%BB%B7%E5%80%BC%E7%9A%84%E7%A4%BE%E5%8C%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%96%87%E7%AB%A0%E4%B9%A6%E7%B1%8D%E8%A7%86%E9%A2%91%E7%AD%89%E8%B5%84%E6%BA%90/</guid>
      <description>PHP相关的有参考价值的社区,博客,网站,文章,书籍,视频等资源  PHP网站(PHP Websites) PHP The Right Way&amp;nbsp;- 一个PHP实践的快速参考指导  PHP Best Practices&amp;nbsp;- 一个PHP最佳实践 &amp;nbsp; &amp;nbsp;-&amp;nbsp;Clean Code PHP&amp;nbsp;- 一个PHP 编码标准 &amp;nbsp; &amp;nbsp;-&amp;nbsp;PHP Weekly News&amp;nbsp;- 一个PHP 周刊  Securing PHP&amp;nbsp;- 有关PHP安全相关  PHP FIG&amp;nbsp;- PHP框架交互小组 PSR 中文翻译    PHP School&amp;nbsp;- 一个开源的PHP学习资源  PHPTrends&amp;nbsp;- 一些快速发展的PHP类库检索  PHP 开发者实践    其他网站(Other Websites) The Open Web Application Security Project (OWASP)&amp;nbsp;- 一个开源软件安全社区  WebSec IO&amp;nbsp;- 一个web 安全社区  Semantic Versioning&amp;nbsp;- 语义化版本  Atlassian Git Tutorials&amp;nbsp;- 一系列的Git教程  Servers for Hackers&amp;nbsp;- 有关服务器运维相关  be-a-professional-programmer&amp;nbsp;- 成为专业程序员路上用到的各种优秀资料、神器及框架    PHP书籍(PHP Books) Modern PHP&amp;nbsp;- 作者是PHP 之道的发起人和Slim框架的作者 Modern PHP（中文版）    PHP Pandas  ppts_for_php2017&amp;nbsp;- 2017 第三届PHP全球开发者大会PPT/Keynote    其他书籍(Other Books) The Linux Command Line&amp;nbsp;- Linux 命令行教程     依赖管理( Dependency Management ) 用于依赖管理的包和框架  Composer&amp;nbsp;/&amp;nbsp;Packagist&amp;nbsp;- 一个包和依赖管理器.</description>
    </item>
    
    <item>
      <title>20个CSS高级样式</title>
      <link>http://i-cooltea.github.io/posts/20%E4%B8%AAcss%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sun, 04 Mar 2018 13:08:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/20%E4%B8%AAcss%E9%AB%98%E7%BA%A7%E6%A0%B7%E5%BC%8F/</guid>
      <description>1. 黑白图像 这段代码会让你的彩色照片显示为黑白照片，是不是很酷？
 img.desaturate { filter: grayscale(100%); -webkit-filter: grayscale(100%); -moz-filter: grayscale(100%); -ms-filter: grayscale(100%); -o-filter: grayscale(100%);}  &amp;lt;li style=&amp;quot;margin:0px;padding:0px 8px;box-sizing:border-box;list-style:none;&amp;quot;&amp;gt; 1 &amp;lt;/li&amp;gt; &amp;lt;li style=&amp;quot;margin:0px;padding:0px 8px;box-sizing:border-box;list-style:none;color:#999999;&amp;quot;&amp;gt; 2 &amp;lt;/li&amp;gt;     2. 使用 :not() 在菜单上应用/取消应用边框 先给每一个菜单项添加边框
/* add border */.nav li { border-right: 1px solid #666;}  &amp;lt;li style=&amp;quot;margin:0px;padding:0px 8px;box-sizing:border-box;list-style:none;color:#999999;&amp;quot;&amp;gt; 1 &amp;lt;/li&amp;gt; &amp;lt;li style=&amp;quot;margin:0px;padding:0px 8px;box-sizing:border-box;list-style:none;color:#999999;&amp;quot;&amp;gt; 2 &amp;lt;/li&amp;gt;     ……然后再除去最后一个元素……
// remove border /.nav li:last-child { border-right: none; }  &amp;lt;li style=&amp;quot;margin:0px;padding:0px 8px;box-sizing:border-box;list-style:none;color:#999999;&amp;quot;&amp;gt; 1 &amp;lt;/li&amp;gt; &amp;lt;li style=&amp;quot;margin:0px;padding:0px 8px;box-sizing:border-box;list-style:none;color:#999999;&amp;quot;&amp;gt; 2 &amp;lt;/li&amp;gt;     ……可以直接使用 :not() 伪类来应用元素：</description>
    </item>
    
    <item>
      <title>html5常用标签汇集</title>
      <link>http://i-cooltea.github.io/posts/html5%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E6%B1%87%E9%9B%86/</link>
      <pubDate>Sun, 04 Mar 2018 13:06:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/html5%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E6%B1%87%E9%9B%86/</guid>
      <description>文本标记语言，即HTML（Hypertext&amp;nbsp;Markup&amp;nbsp;Language），是用于描述网页文档的一种标记语言。 HTML之所以称为超文本标记语言，是因为文本中包含了所谓“超级链接”点。所谓超级链接，就是一种URL指针，通过激活（点击）它，可使浏览器方便地获取新的网页。这也是HTML获得广泛应用的最重要的原因之一。 &amp;nbsp; HTML是一种规范，一种标准，它通过标记符号来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画面如何安排，图片如何显示等）。浏览器按顺序阅读网页文件，然后根据标记符解释和显示其标记的内容，对书写出错的标记将不指出其错误，且不停止其解释执行过程，编制者只能通过显示效果来分析出错原因和出错部位。但需要注意的是，对于不同的浏览器，对同一标记符可能会有不完全相同的解释，因而可能会有不同的显示效果。&amp;nbsp; &amp;nbsp; 注：HTML&amp;nbsp;标签对大小写不敏感，但推荐使用小写！ 一、主体结构  header  页面头部，不同与&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;   aside  边栏   nav  外部链接集合   section  章节或段落   article  类似文章、摘要或留言POST等形式的记录（一般搭配内嵌头部、尾部、底部结构使用）   hggroup  类似子标题，标题信息、可选标题、TAG标签这样的数据，还是英文更好理解一些，heading of a section   address  联系信息，一般用在article或body锚元素周围   footer  页脚     二、HTML 5元素标记汇总表  文档类型宣告  &amp;lt;!DOCTYPE html&amp;gt;   根元素元素  html   META元素  head、 title、base、link、meta、style   部件元素  body、section、nav、article、aside、h1、 h2、 h3、h4、 h5、 h6、hgroup、header、footer、address   分组内容元素  p、hr、br、pre、blockquote、ol、ul、li、dl、dt、dd、figure、figcaption、div   文本层次语义元素  a、em、strong、small、cite、q、dfn、abbr、time、code、var、samp、kbd、sub、sups、i、b、mark、ruby、rt、rp、bdo、span   编辑元素  ins、del   嵌入内容元素  img、iframe、embed、object、param、video、audio、source、canvas、map、area   表格元素  table、caption、colgroup、col、tbody、thread、tfoot、tr、td、th   表单元素  form、fieldset、legend、label、button、select、datalist、optgroup、option、textarea、keygen、output、progress、meter   互动元素  details、summary、command、menu   脚本元素  script、noscript     三、HTML 5元素通用属性和事件句柄  HTML5元素通用属性表  accesskey、class、contenteditable、contextmenu、dir、 draggable、hidden、id、lang、spellcheck、style、tabindex、title   HTML5元素事件句柄属性  onabort、onblur*、oncanplay、oncanplaythrough、onchange、 onclick、 oncontextmenu、ondblclick、ondrag、ondragend、ondragenter、ondragleave、 ondragover、ondragstart、ondrop、ondurationchange、onemptied、onended、 onerror*、onfocus*、onformchange、onforminput、oninput、oninvalid、onkeydown、 onkeypress、onkeyup、onload*、onloadeddata、onloadedmetadata、onloadstart、 onmousedown、onmousemove、onmouseout、onmouseover、onmouseup、onmousewheel、 onpause、onplay、onplaying、onprogress、onratechange、onreadystatechange、 onscroll、onseeked、onseeking、onselect、onshow、onstalled、onsubmit、 onsuspend、ontimeupdate、onvolumechange、onwaiting。     四、HTML5元素标记释义  标记  类型  意义  介绍   文件标记   &amp;lt;html&amp;gt;  ●  根文件标记  让浏览器知道这是HTML 文件   META标记   &amp;lt;head&amp;gt;  ●  开头  提供文件整体信息   &amp;lt;title&amp;gt;  ●  标题  定义文件标题，显示于浏览器顶端   &amp;lt;base&amp;gt;  o  基准标记  可将相对URL转绝对及指定链接   &amp;lt;link&amp;gt;  o  外部资源连接  必须带rel属性描述   &amp;lt;meta&amp;gt;  o  其它META数据  不能被title, base, link, style, 和script元素描述的META数据   &amp;lt;style&amp;gt;  ●  嵌入文档风格信息     部件标记   &amp;lt;body&amp;gt;  ●  文档主体开始  文档内容容器   &amp;lt;section&amp;gt;  ●  代表通用文档或应用部件     &amp;lt;nav&amp;gt;  ●  导航链接  外部链接或文档内部链接   &amp;lt;article&amp;gt;  ●  页面模块  类似文章、摘要或留言POST等形式的记录   &amp;lt;aside&amp;gt;  ●  孤立模块  一般作为边栏广告、说明、引用、导航等，aside围堵部分一般与正文耦合较小   &amp;lt;h1&amp;gt;  ●  标题标记  此外还有h2, h3, h4, h5, h6   &amp;lt;hgroup&amp;gt;  ●  群组标题  用在一组h1-h6这样的元素集合时使用，用来区分主副标题？？   &amp;lt;header&amp;gt;  ●  组说明或组导航  也可叫页头标题   &amp;lt;footer&amp;gt;  ●  页脚标题  作用范围跟最近部件元素有关   &amp;lt;address&amp;gt;  ●  地址或联系信息     分组内容标记         &amp;lt;p&amp;gt;  ●  段落标记     &amp;lt;hr&amp;gt;  o  水平分割线     &amp;lt;br&amp;gt;  o  换行     &amp;lt;pre&amp;gt;  ●  预格式化分本块     &amp;lt;blockquote&amp;gt;  ●  块引用     &amp;lt;ol&amp;gt;  ●  编号列表     &amp;lt;ul&amp;gt;  ●  项目列表     &amp;lt;li&amp;gt;  ●  列表项     &amp;lt;dl&amp;gt;  ●  定义列表     &amp;lt;dt&amp;gt;  ●  定义名称     &amp;lt;dd&amp;gt;  ●  定义说明     &amp;lt;figure&amp;gt;  ●  流内容区块说明  多结合figcaption使用   &amp;lt;figcaption&amp;gt;  ●  figure内容属性     &amp;lt;div&amp;gt;  ●  定位标记  无实际意义            文本层次语义标记   &amp;lt;a&amp;gt;  ●  链接标记     &amp;lt;em&amp;gt;  ●  强调标记     &amp;lt;strong&amp;gt;  ●  加重标记     &amp;lt;small&amp;gt;  ●  字体缩小     &amp;lt;cite&amp;gt;  ●  斜体标记     &amp;lt;q&amp;gt;  ●  引用标记内容  原文是phrasing content，暂不清楚如何翻译   &amp;lt;dfn&amp;gt;  ●  术语定义     &amp;lt;abbr&amp;gt;  ●  缩略语     &amp;lt;time&amp;gt;  ●  日期时间     &amp;lt;code&amp;gt;  ●  程序代码     &amp;lt;var&amp;gt;  ●  变量     &amp;lt;samp&amp;gt;  ●  范例     &amp;lt;kbd&amp;gt;  ●  键盘字     &amp;lt;sub&amp;gt;&amp;lt;sups&amp;gt;  ●  上标字/下标字     &amp;lt;i&amp;gt;  ●  斜体标记     &amp;lt;b&amp;gt;  ●  粗体标记     &amp;lt;mark&amp;gt;  ●  标记或高亮     &amp;lt;ruby&amp;gt;  ●  注解标记     &amp;lt;rt&amp;gt;  ●  ruby子元素  结合ruby使用，比如:&amp;lt;ruby&amp;gt;天&amp;lt;rt&amp;gt;Tian&amp;lt;/rt&amp;gt;缘&amp;lt;rt&amp;gt;Yuan&amp;lt;/rt&amp;gt;&amp;lt;/ruby&amp;gt;   &amp;lt;rp&amp;gt;  ●  ruby子元素  一般做rt元素注释使用   &amp;lt;bdo&amp;gt;  ●       &amp;lt;span&amp;gt;  ●  自定义标记     编辑标记   &amp;lt;ins&amp;gt;  ●       &amp;lt;del&amp;gt;  ●       嵌入内容标记   &amp;lt;img&amp;gt;  ●  图片标记     &amp;lt;iframe&amp;gt;  ●  框架标记     &amp;lt;embed&amp;gt;  ●  嵌入标记     &amp;lt;object&amp;gt;  ●  对象标记     &amp;lt;param&amp;gt;  ●  参数标记     &amp;lt;video&amp;gt;  ●  视频标记     &amp;lt;audio&amp;gt;  ●  音频标记     &amp;lt;source&amp;gt;  ●  来源标记     &amp;lt;canvas&amp;gt;  ●  制图标记     &amp;lt;map&amp;gt;  ●  地图标记     &amp;lt;area&amp;gt;  ●  区域标记              表格标记   &amp;lt;table&amp;gt;  ●  表格标记  设定该表格的各项参数   &amp;lt;caption&amp;gt;  ●  表格标题  做成一打通列以填入表格标题   &amp;lt;colgroup&amp;gt;  ●       &amp;lt;col&amp;gt;  ●       &amp;lt;tbody&amp;gt;  ●       &amp;lt;thread&amp;gt;  ●       &amp;lt;tfoot&amp;gt;  ●       &amp;lt;tr&amp;gt;  ●  表格列  设定该表格的列   &amp;lt;td&amp;gt;  ●  表格栏  设定该表格的栏   &amp;lt;th&amp;gt;  ●  表格标头  相等于&amp;lt;TD&amp;gt;，但其内文字字体会变粗   表单标记   &amp;lt;form&amp;gt;  ●  表单标记  决定该表单的运作模式   &amp;lt;fieldset&amp;gt;  ●       &amp;lt;legend&amp;gt;  ●       &amp;lt;input&amp;gt;  ●  输入标记     &amp;lt;label&amp;gt;  ●       &amp;lt;button&amp;gt;  ●  按钮     &amp;lt;select&amp;gt;  ●  选择标记     &amp;lt;datalist&amp;gt;  ●       &amp;lt;optgroup&amp;gt;  ●       &amp;lt;option&amp;gt;  ●  选项     &amp;lt;textarea&amp;gt;  ●       &amp;lt;keygen&amp;gt;  ●       &amp;lt;output&amp;gt;  ●       &amp;lt;progress&amp;gt;  ●       &amp;lt;meter&amp;gt;  ●                互动元素   &amp;lt;details&amp;gt;  ●       &amp;lt;summary&amp;gt;  ●       &amp;lt;command&amp;gt;  ●       &amp;lt;menu&amp;gt;  ●       其他标记   &amp;lt;script&amp;gt;  ●       &amp;lt;noscript&amp;gt;  ●                  备注： 1、● 表示该标记属于围堵标记，需要结束标记&amp;lt;/标记&amp;gt;。 2、o 表示该标记属空标记，不需要结束标记。 &amp;nbsp;基本概述：  基本 &amp;lt;html&amp;gt;…&amp;lt;/html&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;定义&amp;nbsp;HTML&amp;nbsp;文档&amp;lt;head&amp;gt;…&amp;lt;/head&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;文档的信息&amp;lt;meta&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HTML&amp;nbsp;文档的元信息&amp;lt;title&amp;gt;…&amp;lt;/title&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文档的标题&amp;lt;link&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文档与外部资源的关系&amp;lt;style&amp;gt;…&amp;lt;/style&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文档的样式信息&amp;lt;body&amp;gt;…&amp;lt;/body&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;可见的页面内容&amp;lt;!</description>
    </item>
    
    <item>
      <title>Linux 常用命令</title>
      <link>http://i-cooltea.github.io/posts/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 04 Mar 2018 12:59:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>1．echo命令 echo命令用于在终端输出字符串或变量提取后的值，格式为“echo [字符串&amp;nbsp;|&amp;nbsp;$变量]”。
例如，把指定字符串“Linuxprobe.com”输出到终端屏幕的命令为：
[root@linuxprobe ~]# echo Linuxprobe.Com 该命令会在终端屏幕上显示如下信息：
Linuxprobe.Com 下面，我们使用$变量的方式提取变量SHELL的值，并将其输出到屏幕上：
[root@linuxprobe ~]# echo $SHELL /bin/bash 2．date命令 date命令用于显示及设置系统的时间或日期，格式为“date [选项] [+指定的格式]”。
只需在强大的date命令中输入以“+”号开头的参数，即可按照指定格式来输出系统的时间或日期，这样在日常工作时便可以把备份数据的命令与指定格式输出的时间信息结合到一起。例如，把打包后的文件自动按照“年-月-日”的格式打包成“backup-2017-9-1.tar.gz”，用户只需要看一眼文件名称就能大概了解到每个文件的备份时间了。date命令中常见的参数格式及作用如表2-4所示。
表2-4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; date命令中的参数以及作用
参数  作用   %t  跳格[Tab键]   %H  小时（00～23）   %I  小时（00～12）   %M  分钟（00～59）   %S  秒（00～59）   %j  今年中的第几天     按照默认格式查看当前系统时间的date命令如下所示：
[root@linuxprobe ~]# date Mon&amp;nbsp;Aug&amp;nbsp;24&amp;nbsp;16:11:23&amp;nbsp;CST&amp;nbsp;2017 按照“年-月-日 小时:分钟:秒”的格式查看当前系统时间的date命令如下所示：
[root@linuxprobe ~]# date &amp;ldquo;+%Y-%m-%d %H:%M:%S&amp;rdquo; 2017-08-24 16:29:12 将系统的当前时间设置为2017年9月1日8点30分的date命令如下所示：</description>
    </item>
    
    <item>
      <title>Linux命令之curl</title>
      <link>http://i-cooltea.github.io/posts/linux%E5%91%BD%E4%BB%A4%E4%B9%8Bcurl/</link>
      <pubDate>Sun, 04 Mar 2018 12:47:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/linux%E5%91%BD%E4%BB%A4%E4%B9%8Bcurl/</guid>
      <description>curl命令是一个功能强大的网络工具，它能够通过http、ftp等方式下载文件，也能够上传文件。其实curl远不止前面所说的那些功能，大家可以通过man curl阅读手册页获取更多的信息   curl命令使用了libcurl库来实现，libcurl库常用在C程序中用来处理HTTP请求，curlpp是libcurl的一个C++封装，这几个东西可以用在抓取网页、网络监控等方面的开发，而curl命令可以帮助来解决开发过程中遇到的问题 -a/--append 上传文件时，附加到目标文件 -A/--user-agent &amp;lt;string&amp;gt;&amp;nbsp; 设置用户代理发送给服务器 - anyauth&amp;nbsp;&amp;nbsp; 可以使用“任何”身份验证方法 -b/--cookie &amp;lt;name=string/file&amp;gt; cookie字符串或文件读取位置 - basic 使用HTTP基本验证 -B/--use-ascii 使用ASCII /文本传输 -c/--cookie-jar &amp;lt;file&amp;gt; 操作结束后把cookie写入到这个文件中 -C/--continue-at &amp;lt;offset&amp;gt;&amp;nbsp; 断点续转 -d/--data &amp;lt;data&amp;gt;&amp;nbsp;&amp;nbsp; HTTP POST方式传送数据 --data-ascii &amp;lt;data&amp;gt;&amp;nbsp; 以ascii的方式post数据 --data-binary &amp;lt;data&amp;gt; 以二进制的方式post数据 --negotiate&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用HTTP身份验证 --digest&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用数字身份验证 --disable-eprt&amp;nbsp; 禁止使用EPRT或LPRT --disable-epsv&amp;nbsp; 禁止使用EPSV -D/--dump-header &amp;lt;file&amp;gt; 把header信息写入到该文件中 --egd-file &amp;lt;file&amp;gt; 为随机数据(SSL)设置EGD socket路径 --tcp-nodelay&amp;nbsp;&amp;nbsp; 使用TCP_NODELAY选项 -e/--referer 来源网址 -E/--cert &amp;lt;cert[:passwd]&amp;gt; 客户端证书文件和密码 (SSL) --cert-type &amp;lt;type&amp;gt; 证书文件类型 (DER/PEM/ENG) (SSL) --key &amp;lt;key&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 私钥文件名 (SSL) --key-type &amp;lt;type&amp;gt; 私钥文件类型 (DER/PEM/ENG) (SSL) --pass&amp;nbsp; &amp;lt;pass&amp;gt;&amp;nbsp; 私钥密码 (SSL) --engine &amp;lt;eng&amp;gt;&amp;nbsp; 加密引擎使用 (SSL).</description>
    </item>
    
    <item>
      <title>工作后，你悟出什么职场道理？</title>
      <link>http://i-cooltea.github.io/posts/%E5%B7%A5%E4%BD%9C%E5%90%8E%E4%BD%A0%E6%82%9F%E5%87%BA%E4%BB%80%E4%B9%88%E8%81%8C%E5%9C%BA%E9%81%93%E7%90%86/</link>
      <pubDate>Tue, 27 Feb 2018 15:48:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%B7%A5%E4%BD%9C%E5%90%8E%E4%BD%A0%E6%82%9F%E5%87%BA%E4%BB%80%E4%B9%88%E8%81%8C%E5%9C%BA%E9%81%93%E7%90%86/</guid>
      <description>1、第一份工作的选择很重要。不要想着我没有选择的机会，有份工作就不错了，现实情况是进了一行，想出来很难，想转行更难。这时候关于找工作：不要自乱阵脚，多找老师朋友及过来人：选对行业，选对职位。 2、禁止一份简历海投。简历不是投得越多越好，你要的是有效入职。所以在简历这方面一定要有针对性，展示你有解决问题的能力，和你有解决过问题的案例！这是真正让HR用你的地方。 3、个人形象要好。不要穿得好像圣诞树啊，衣服颜色不要超过3种，简单大方为主，一般建议的颜色就是黑、白、灰等，个人形象稳重，这样领导才敢用你和放心把工作交给你。 4、永远不要迟到早退。所有事项必须永远提前，比如上班提前15分钟坐在工位上，开会提前5分钟坐在会议室里，约了同事谈需求提前10分钟到场。有助于树立守时可靠的工作形象。 5、比上级要求的多做一点。上级要你提问题，你起码要附带3个及以上的解决方案，千万不要只提问题，就什么也不做了，领导更看重能够发现问题并解决问题的好员工。对于上级交待的工作一定要做好，而且要超出他们的期望，这样才会在以后的工作中继续委以重任。 6、站在上级的角度思考问题。对于自己完成的工作，最好跳出来站在上级或者上上级的角度重新审视一下，如果连自己都不满意，那就重新做。 7、不要只埋头苦干，无视他人存在。一天8小时，如果你一直工作，一句话也不说，很容易让同事们觉得你不合群，又难以接近，适当与同事们互动，团结协作，工作会更事半功倍。 8、不要斤斤计较，只做自己本职工作。领导又交待不是你“分内”的工作？不要拒绝，多锻炼自己挺好的，其实工作的前几年就是自己探索的时候，多学习各方面的技能，最终找到最适合自己发展的！所以，多做一些本职之外的工作，有助于全面发展。 9、认清你对谁负责。就是要知道谁决定你的绩效和晋升， 职场中跨级指挥的领导太多了，如果你的主管、经理意见不合？你要听谁？当然是听主管的啦，因为他是你的直接上级，决定你的绩效。 10、一天的工作要有计划。工作不要盲目做，早上来到工位上，先想想今天要做什么？列一个清单，一项项去完成，如果事情很多，多到你一天完不成，那么就分轻重缓急，先做着急的，重要的。 11、习惯于做工作总结。日总结、周总结、月总结，年度总结，都要认真思考，复盘自己的工作，想想自己的工作存在的问题，及改进的方法，及下一步的工作计划。有反馈才有调整，根据目标去执行。这样你才能快速成长。 12、不当办公室小透明。有很多很多人觉得只要努力工作就好，你的老板、领导、上级都会看到，其实是你想多了。工作完成得好，你要让他们知道，适当的“邀功”才会让别人看到你。如果你为了跟进某一个需求，每天加班，邮件抄送他们，工作汇报要提到，完成以后要告知。所以，不当小透明，职场中是一样需要找存在感的。 13、微信头像不要总是换，还有工作群不要发语音。频繁换头像很容易让别人以为你心思不在工作上，而不换头像是为了让领导快速找到你！不能发语音，是因为你还不是领导，因为发语音是领导的权利，在你是员工的群里，接收到领导的消息或语音，回复：好的，或者收到就可以。 14、建立良好的人际关系。适当的时候请同事们喝喝茶，吃吃点心，不要每次都不请，或者你总是被请的那一个，时间长了，你在同事眼里就是抠门又不合群的人，也许就因为这样，你有可能在某一刻被当成炮灰排挤出去。 15、不要横向比较薪水。不要四处打听别人的薪水，也不要在办公区域讨论。薪水都是保密的，要知道自己的薪水是不是合理，就设想一下：如果我现在找工作能不能找到比这个薪水高的， 或者更喜欢的，没有找不到，那么你现在的薪水就是合理的。 16、学会借力。如果你的工作需要跨部门交流，有些人情，资源，你出面不好使的时候，这时候需要你的上级或上上级出面，及时提出来，问题会更快得到解决。不要硬抗，你觉得你有能力解决，然而并没有，你的领导知道会更生气：批评你没有及时反馈给他，导致本来简单的工作拖到现在。 17、持续学习。你不会想在一家公司待一辈子的，即使你觉得目前不错，也不要忘记了学习，本部门的工作尽可能的掌握熟悉，其他部门的工作也可以多少了解些，业余时间横向纵向的领域多学习，为你以后的工作多争取一份机遇。 18、不要把负面情绪带到工作里。受委屈了，挨批评了也别在办公室里哭，也不要跟同事拍桌子，更不要跟领导大吵大闹，因为你这样同事看见只会把你当作茶余饭后的笑话来说。优雅、平静的处理问题，才是情商高的表现。 19、职场不做传话筒。所有好的不好的，到自己这儿就结束吧。没准这些话传到某领导的耳朵里，说你是起头人，那么你的形象还有你的前途可能就没了。 20、关于离职有3小点： （1）离职申请最好在周三、周四提出比较好。这样你可能周五前可以得到答复。如果你等到周五，那么周六、周日那些上级忙自己的事情，可能忘记了，周一上班第一天会会有很多总结要交，还有很多下周计划要做，你的离职申请说了等于白说。 （2）提前一个月报备离职，那么在你离开之前这一个月，尽可能做好自己所有的工作，还有交接。不要觉得走了，工作爱死不死，跟你没关系。不管在哪，好聚取散都是最漂亮的样子。之前公司有一同事离职，就什么也不管不问，走了我们还在给他擦屁股，这样就不好啦。 （3）离职前请同事们吃顿饭吧！不仅是告别，还为了保存你的人脉，没准下一份工作或者在你需要的时候，他们能帮助到你。多个朋友，多条路。一定没错哒！     </description>
    </item>
    
    <item>
      <title> thinkphp5 Model 功能总结</title>
      <link>http://i-cooltea.github.io/posts/-thinkphp5-model-%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 27 Feb 2018 15:07:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/-thinkphp5-model-%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</guid>
      <description>简介  tp5的model只做业务层操作，不做具体的链接数据库sql操作。  think\db\Connection.php做链接数据库操作  think\db\Builder.php做创建sql操作  think\db\Query.php做数据CURD操作    功能清单  数据自动完成  自动写入时间戳  时间字段自动格式化输出字段  字段验证器  自动关联写入  只读字段  隐藏字段  事件回调  软删除  类型转换    功能详情  1. 数据自动完成   //设置自动完成的字段，支持键值对数组和索引数组   //新增和更新时都会使用  //如：[&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;zhangsan&amp;rsquo;,&amp;lsquo;sex&amp;rsquo;=&amp;gt;&amp;lsquo;男&amp;rsquo;]// [&amp;lsquo;name&amp;rsquo;,&amp;lsquo;sex&amp;rsquo;]  protected$auto= [];   //只在新增数据的时候使用 
 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;$insert&amp;lt;/span&amp;gt; = []; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//更新 自动完成列表&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt; //只在更新数据的时候使用&amp;lt;/span&amp;gt; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;white-space:pre;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;white-space:pre;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;$update&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; = []; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;white-space:pre;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//用来标记当前操作被修改的字段&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt; //如 [&#39;name&#39;,&#39;sex&#39;]&amp;lt;/span&amp;gt; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;white-space:pre;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;white-space:pre;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;$change&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; = []; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//依赖方法,model类会自动调用解析auto数组&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//我们只需配置auto数组即可&amp;lt;/span&amp;gt; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;white-space:pre;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;white-space:pre;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot; style=&amp;quot;box-sizing:border-box;color:#009900;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;autoCompleteData&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;$auto&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt; = [])&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;/p&amp;gt;   在model中设置完auto字段后在更新或新增的时候首先会判断auto中设置的字段是否存在于被更新的字段($this-&amp;gt;change)中  如果存在则不用auto里设置的字段和值  如果不存在则将auto里设置的字段和值添加到this−&amp;gt;data中并把该字段新增到this-&amp;gt;change中。  如果auto是索引数组，也就是只设置了字段名，没有设置子字段值，这是就会根据字段名去$this-&amp;gt;data中查询该字段值，并添加的到要更新的属性数组中去。  新增数据的方法是create, 修改数据的方法是update,批量新增和修改的方法是saveAll,这几个方法的最终实现都是调用的save方法  saveAll方法批量新增和修改，并不是组合sql语句，而是开启事务，然后调用save方法，一条一条添加和修改，最后提交事务。  在更新操作中，model会自动检查data的所有字段的值是否被更改，只会跟新被更改过得字段的值。没被更改的则被忽略。  insert、update的功能和auto的功能类似，只不过auto是不管是新增数据和是更新数据都会使用，而insert值针对新增，update只针对更新。如果设置了相同的属性，insert和update的则会覆盖auto中的字段。    2.</description>
    </item>
    
    <item>
      <title>composer常用知识总结</title>
      <link>http://i-cooltea.github.io/posts/composer%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 26 Feb 2018 11:59:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/composer%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>###1. composer的安装 这里不说安装的问题，可以参考这里进行安装。 中国全量镜像
###2. composer配置中国镜像
 使用命令: composer config -e 修改composer.json 添加如下代码 { &amp;quot;repositories&amp;quot;: [ { &amp;quot;packagist&amp;quot;: false }, { &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;http://packagist.cn&amp;quot; } ] }或者执行命令 composer config -g repositories.packagist composer https://packagist.phpcomposer.com  ###3. composer创建项目
 比如laravel创建一个商城项目, 你也可以创建 ci 、yii 或者其他gackagist 上能找到的框架项目 composer create-project laravel/laravel ./shop  ###4. composer初始化依赖包
 一般项目的根目录,如果使用composer命令创建的项目都会有一个composer.json 的文件或者lock文件 如果没有我们可以创建一个 composer.json 文件,格式如下: { &amp;quot;require&amp;quot;: { &amp;quot;predis/predis&amp;quot;: &amp;quot;^1.1&amp;quot; } } 上例表示:我们要下载一个厂商为predis 的 predis 库,版本为 &amp;gt;=1.1 &amp;lt;2.0 我们也可以使用如下命令创建 composer.</description>
    </item>
    
    <item>
      <title>2017最新PHP初级经典面试题目汇总（下篇）</title>
      <link>http://i-cooltea.github.io/posts/2017%E6%9C%80%E6%96%B0php%E5%88%9D%E7%BA%A7%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB%E4%B8%8B%E7%AF%87/</link>
      <pubDate>Mon, 26 Feb 2018 11:58:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/2017%E6%9C%80%E6%96%B0php%E5%88%9D%E7%BA%A7%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB%E4%B8%8B%E7%AF%87/</guid>
      <description>17、isset、empty、is_null的区别   isset 判断变量是否定义或者是否为空    &amp;nbsp; 变量存在返回ture，否则返回false  &amp;nbsp; 变量定义不赋值返回false  &amp;nbsp; unset一个变量，返回false  &amp;nbsp; 变量赋值为null，返回false  &amp;nbsp;&amp;nbsp;  empty：判断变量的值是否为空，能转换为false的都是空，为空返回true，反之返回false。    &amp;nbsp; &amp;nbsp; &amp;ldquo;&amp;rdquo;,0,&amp;ldquo;0&amp;rdquo;,NULL，FALSE都认为为空，返回true  &amp;nbsp; &amp;nbsp; 没有任何属性的对象都认为是空  &amp;nbsp; &amp;nbsp;&amp;nbsp;  is_null：检测传入的值(值、变量、表达式)是否为null    &amp;nbsp; &amp;nbsp; 定义了，但是赋值为Null  &amp;nbsp; &amp;nbsp; 定义了，但是没有赋值  &amp;nbsp; &amp;nbsp; unset一个变量  18、前端调试的工具    Firefox的firebug  Chrome的开发工具  Emmet  JSON格式校验工具  19. 简单描述mysql中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）（新浪网技术部）    索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。  普通索引(由关键字KEY或INDEX定义的索引)的唯一任务是加快对数据的访问速度。  普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。  主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字 PRIMARY KEY 来创建。  索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。  索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。    20.</description>
    </item>
    
    <item>
      <title>2017最新PHP经典面试题目汇总（上篇）</title>
      <link>http://i-cooltea.github.io/posts/2017%E6%9C%80%E6%96%B0php%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB%E4%B8%8A%E7%AF%87/</link>
      <pubDate>Mon, 26 Feb 2018 11:33:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/2017%E6%9C%80%E6%96%B0php%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB%E4%B8%8A%E7%AF%87/</guid>
      <description>1、双引号和单引号的区别    双引号解释变量，单引号不解释变量  双引号里插入单引号，其中单引号里如果有变量的话，变量解释  双引号的变量名后面必须要有一个非数字、字母、下划线的特殊字符，或者用讲变量括起来，否则会将变量名后面的部分当做一个整体，引起语法错误  双引号解释转义字符，单引号不解释转义字符，但是解释&#39;\和\\  能使单引号字符尽量使用单引号，单引号的效率比双引号要高（因为双引号要先遍历一遍，判断里面有没有变量，然后再进行操作，而单引号则不需要判断）  2、常用的超全局变量(8个)    $_GET -----&amp;gt;get传送方式  $_POST -----&amp;gt;post传送方式  $_REQUEST -----&amp;gt;可以接收到get和post两种方式的值  $GLOBALS -----&amp;gt;所有的变量都放在里面  $_FILE -----&amp;gt;上传文件使用  $_SERVER -----&amp;gt;系统环境变量  $_SESSION -----&amp;gt;会话控制的时候会用到  $_COOKIE -----&amp;gt;会话控制的时候会用到  3、HTTP中POST、GET、PUT、DELETE方式的区别    HTTP定义了与服务器交互的不同的方法，最基本的是POST、GET、PUT、DELETE，与其比不可少的URL的全称是资源描述符，我们可以这样理解：url描述了一个网络上资源，而post、get、put、delegate就是对这个资源进行增、删、改、查的操作！    3.1表单中get和post提交方式的区别    get是把参数数据队列加到提交表单的action属性所指的url中，值和表单内各个字段一一对应，从url中可以看到；post是通过HTTPPOST机制，将表单内各个字段与其内容防止在HTML的head中一起传送到action属性所指的url地址，用户看不到这个过程  对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据  get传送的数据量较小，post传送的数据量较大，一般被默认不受限制，但在理论上，IIS4中最大量为80kb，IIS5中为1000k，get安全性非常低，post安全性较高  3.2    GET请求会向数据库发索取数据的请求，从而来获取信息，该请求就像数据库的select操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的。    与GET不同的是，PUT请求是向服务器端发送数据的，从而改变信息，该请求就像数据库的update操作一样，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。    POST请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源，就像数据库的insert操作一样，会创建新的内容。几乎目前所有的提交操作都是用POST请求的。    DELETE请求顾名思义，就是用来删除某一个资源的，该请求就像数据库的delete操作。    4、PHP介绍    Hypertext Preprocessor----超文本预处理器    Personal Home Page 原始名称    目标用途: 允许web开发人员快速编写动态生成的web页面，与其他页面相比，PHP是将程序嵌入到HTML文档中去执行，效率比完全生成HTML编辑的CGI高很多    HTML: Hypertext Markup Language    创始人: 拉姆斯勒·勒多夫Rasmus Lerdorf，1968年生，加拿大滑铁卢大学    勒多夫最开始是为了维护个人网页，用prel语言写了维护程序，之后又用c进行了重写，最终衍生出php/fi    时间轴:    1995.</description>
    </item>
    
    <item>
      <title>apache-如何解决跨域资源访问</title>
      <link>http://i-cooltea.github.io/posts/apache-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Sun, 25 Feb 2018 04:36:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/apache-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE/</guid>
      <description>很多时候，大中型网站为了静态资源分布式部署，加快访问速度，减轻主站压力，会把静态资源（例如字体文件、图片等）放在独立服务器或者CDN上，并且使用独立的资源域名（例如res.test.com）
但是在实际部署中，会发现浏览器无法载入这些不同域名的资源，firefox控制台会报错：
[html]&amp;nbsp;view plain&amp;nbsp;copy     &amp;lt;span&amp;nbsp;role=&#34;presentation&#34;&amp;nbsp;class=&#34;objectBox&amp;nbsp;objectBox-errorMessage&amp;nbsp;&#34;&amp;gt;&amp;lt;span&amp;nbsp;class=&#34;errorMessage&amp;nbsp;&#34;&amp;gt;已阻止跨源请求：同源策略禁止读取位于&amp;nbsp;http://xxxxx&amp;nbsp;的远程资源。（原因：CORS&amp;nbsp;头缺少&amp;nbsp;&#39;Access-Control-Allow-Origin&#39;）。&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;nbsp;&amp;nbsp;  已阻止跨源请求：同源策略禁止读取位于&amp;nbsp;http://xxxxx&amp;nbsp;的远程资源。（原因：CORS&amp;nbsp;请求失败）。&amp;nbsp;&amp;nbsp;    这是因为现代浏览器将其定义为跨域资源而不允许加载
理解跨域首先必须要了解同源策略。同源策略是浏览器上为安全性考虑实施的非常重要的安全策略。&amp;nbsp;&amp;nbsp;&amp;nbsp; 何谓同源:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; URL由协议、域名、端口和路径组成，如果两个URL的协议、域名和端口相同，则表示他们同源。&amp;nbsp;&amp;nbsp;&amp;nbsp; 同源策略:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 浏览器的同源策略，限制了来自不同源的&#34;document&#34;或脚本，对当前&#34;document&#34;读取或设置某些属性。 （白帽子讲web安全[1]）&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从一个域上加载的脚本不允许访问另外一个域的文档属性。 那么关键是如何解决呢，其实很简单，只要在静态资源服务器上，增加一个头信息：
Access-Control-Allow-Origin *
本文就apache进行操作，nginx大同小异
首先编辑httpd.conf
找到这行
#LoadModule headers_module modules/mod_headers.so
把#注释符去掉
LoadModule headers_module modules/mod_headers.so
目的是开启apache头信息自定义模块
然后在独立资源域名的虚拟主机添加一行
Header set Access-Control-Allow-Origin *
意思是对这个域名的资源进行访问时，添加一个头信息
重启apache
再访问，OK！</description>
    </item>
    
    <item>
      <title>Git 三大区域的操作分析 </title>
      <link>http://i-cooltea.github.io/posts/git-%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F%E7%9A%84%E6%93%8D%E4%BD%9C%E5%88%86%E6%9E%90-/</link>
      <pubDate>Sat, 24 Feb 2018 15:29:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/git-%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F%E7%9A%84%E6%93%8D%E4%BD%9C%E5%88%86%E6%9E%90-/</guid>
      <description>Git 三大区域的操作分析  可以将git简单的分为三个区域  1、工作区（working directry） 2、暂缓区（stage index） 3、历史记录区（history） 如图： git add files 把当前工作目录中的文件放入暂存区域 其实做了两件事： 1、将本地文件的时间戳、长度，当前文档对象的id等信息保存到一个树形目录中去（index，即平时说的暂存区） 2、将本地文件的内容做快照并保存到Git 的对象库 （综上：实际上就是一个包含文件索引的目录树，像是一个虚拟的工作区。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在这个虚拟工作区的目录树中，记录了文件名、文件的状态信息（时间戳、文件长度等），
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文件的 内容并不存储其中，而是保存在 Git 对象库（.git/objects）中，文件索引建立了文件和对象库中对象实体之间的对应。） 如图： 在这个图中，我们可以看到部分 Git 命令是如何影响工作区和暂存区（stage, index）的： 图中左侧为工作区，右侧为版本库。在版本库中标记为 &#34;index&#34; 的区域是暂存区（stage, index），标记为 &#34;master&#34; 的是 master 分支所代表的目录树。 图中我们可以看出此时 &#34;HEAD&#34; 实际是指向 master 分支的一个“游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 图中的 objects 标识的区域为 Git 的对象库，实际位于 &#34;.git/objects&#34; 目录下 当对工作区修改（或新增）的文件执行 &#34;git add&#34; 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID 被记录在暂存区的文件索引中 当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树 git reset -- files 用来撤销最后一次
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;git add files（因为每git add file一次，暂存区的文件都会被更改一次），你也可以用git reset 撤销所有暂存区域文件。 git checkout -- files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当执行 &#34;</description>
    </item>
    
    <item>
      <title>SublimeText3 使用教程</title>
      <link>http://i-cooltea.github.io/posts/sublimetext3-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sat, 24 Feb 2018 15:28:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/sublimetext3-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>&amp;mdash;极速操作入门教程 我将Sublime Text各种方便操作。按其类型整理在这里，以便查阅。
中文官方下载:&amp;nbsp;http://www.sublimetextcn.com/ 破解方法，与汉化http://blog.csdn.net/zxw08611/article/details/65697051 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; 所谓工欲善其事，必先利其器。 善用快捷键与各种扩展的插件工具 能让你使用sublime相对其他编辑器&amp;nbsp;,操作上节省30%~40%的时间 &amp;nbsp; 将Sublime Text添加至右键菜单 新建一个“右键菜单添加_Edit with Sublime Text3.bat”文件，复制粘贴如下代码:并修改为自己的sublime安装路径 @echo&amp;nbsp;&amp;ldquo;Add toright click panel &amp;ldquo;Edit with Sublime Text3(&amp;amp;T)&amp;rdquo;&amp;rdquo; reg&amp;nbsp;add&amp;ldquo;HKCR*\shell\Sublime Text3(&amp;amp;T)&amp;rdquo;&amp;nbsp;/ve /d&amp;ldquo;Edit with Sublime Text3&amp;rdquo; reg&amp;nbsp;add&amp;ldquo;HKCR*\shell\Sublime Text3(&amp;amp;T)&amp;rdquo;&amp;nbsp;/v Icon /t REG_SZ /d&amp;ldquo;E:\Program Files\Sublime Text3x64\sublime_text.exe,0&amp;rdquo; reg&amp;nbsp;add&amp;ldquo;HKCR*\shell\Sublime Text3(&amp;amp;T)\Command&amp;rdquo;&amp;nbsp;/ve /d&amp;ldquo;E:\Program Files\Sublime Text3x64\sublime_text.exe %%1&amp;rdquo; pause  保存后，右键以管理员运行，提示成功后即可   快捷键列表（ShortcutsCheatsheet） &amp;nbsp;
编辑（Editing）  Ctrl + Enter：在当前行下面新增一行然后跳至该行   Ctrl + Shift + Enter：在当前行上面增加一行并跳至该行   Ctrl + ←/→：进行逐词移动   Ctrl + Shift + ↑/↓移动当前行   Ctrl+Shift+V：&amp;nbsp;按原格式粘贴   Ctrl+Shift+K：&amp;nbsp;删除当前行   Ctrl +X：&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;剪切当前行   Ctrl+Shift+/:&amp;nbsp;当前位置插入注释   &amp;nbsp;   选择（Selecting）  Ctrl + D：选择当前光标所在的词并高亮该词所有出现的位置，</description>
    </item>
    
    <item>
      <title>常用css样式属性大全（中文注释）</title>
      <link>http://i-cooltea.github.io/posts/%E5%B8%B8%E7%94%A8css%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7%E5%A4%A7%E5%85%A8%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Sat, 24 Feb 2018 14:39:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%B8%B8%E7%94%A8css%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7%E5%A4%A7%E5%85%A8%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A/</guid>
      <description>一 CSS文字属性：
color : #999999; /*文字颜色*/
font-family : 宋体,sans-serif; /*文字字体*/
font-size : 9pt; /*文字大小*/
font-style:itelic; /*文字斜体*/
font-variant:small-caps; /*小字体*/
letter-spacing : 1pt; /*字间距离*/
line-height : 200%; /*设置行高*/
font-weight:bold; /*文字粗体*/
vertical-align:sub; /*下标字*/
vertical-align:super; /*上标字*/
text-decoration:line-through; /*加删除线*/
text-decoration: overline; /*加顶线*/
text-decoration:underline; /*加下划线*/
text-decoration:none; /*删除链接下划线*/
text-transform : capitalize; /*首字大写*/
text-transform : uppercase; /*英文大写*/
text-transform : lowercase; /*英文小写*/
text-align:right; /*文字右对齐*/ text-align:left; /*文字左对齐*/
text-align:center; /*文字居中对齐*/
text-align:justify; /*文字分散对齐*/
vertical-align属性
vertical-align:top; /*垂直向上对齐*/
vertical-align:bottom; /*垂直向下对齐*/
vertical-align:middle; /*垂直居中对齐*/
vertical-align:text-top; /*文字垂直向上对齐*/</description>
    </item>
    
    <item>
      <title>学习 Python 编程的 19 个资源</title>
      <link>http://i-cooltea.github.io/posts/%E5%AD%A6%E4%B9%A0-python-%E7%BC%96%E7%A8%8B%E7%9A%84-19-%E4%B8%AA%E8%B5%84%E6%BA%90/</link>
      <pubDate>Sat, 24 Feb 2018 10:11:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%AD%A6%E4%B9%A0-python-%E7%BC%96%E7%A8%8B%E7%9A%84-19-%E4%B8%AA%E8%B5%84%E6%BA%90/</guid>
      <description>编译：wzhvictor，英文：codecondo  segmentfault.com/a/1190000004187319  用Python编写代码一点都不难，事实上它一直被赞誉为最容易学的编程语言。如果你准备学习web开发， Python是一个不错的开始，甚至想做游戏的话，用Python来开发游戏的资源也有很多。这是快速学习这门语言的途径之一。 许多程序员都把Python作为编程之旅的开始，然后是像PHP和Ruby这样的语言。它也是2014年最热门的web开发语言之一，并极力推荐学习。但是，Python应该怎么学呢？应该从哪里开始？ 我来为你解决这个问题，因为我自己学习编程和开始做开发的时候也依靠了很多这里的资源。当然这仅仅是一个友好的建议，最好的方法还是通过实践去学习，这里推荐的一些书和资源只是为了指引你走往正确的方向。 刚开始学习的时候可能会特别令人沮丧，一旦你学完了基础，之后的东西对你来说就很自然了，你都不需要思考就知道要怎么做。 Python for Beginners 如果你的Python开发之旅有一段时间了，这门课程可能是一个很好的开始。Python for Beginners课程是由Alex Bowers讲授的最全面的Python课程之一，这套网络教程非常容易学习。是的，它需要付一定的费用，但你是想单独学习，还是和其他30000名学生一起学？ 报名本课程的好处是你将被授权访问一个只有付费会员的论坛， Alex老师自己就驻扎在那，并且很乐意尽可能地帮你解决Python的问题。我的意思是，在这个清单里任何的资源都是值得的，因为你投入了一些成本额外收获了与人沟通的感觉会超越一切。 你可以使用优惠码：CODECONDO——它会给你一个固定的75%的折扣，但激活只能在2014年9月3日之前——所以要快点，您可以随时购买的这个课程然后用于以后的学习，不要把钱浪费在这笔交易上！ 译者注：翻译时距这篇原文的发布快两年了，所以想购买这套课程的朋友还得是原价——$99  Learn Python The Hard Way (笨办法学Python) 这本书绝对是学习Python最简单的方法。你会被如此简单的基础学习感到震惊，真实地感受到自己的学习历程，一步一步地获取新的知识。我也感到它非常鼓励学习者去尝试并创造出自己的程序。 代码可能会很少，但是它们肯定会有助于你更好的理解语言本身和语法。Python非常的流行，所以当你遇到了问题时，在类似Stack Exchange这样的网站里有可能会找到答案，遇到问题需要解决的话尽管地Google吧。 你会学到如何去： 在全平台上安装Python环境  写Python程序  理解Python语法和文档  像程序员一样思考  还有更多的东西   本书的HTML在线版本是完全免费的，大部分人使用的都是在线版。我希望你购买完整的书或者给予一些捐赠，毕竟作者花了很大的力气来完成它。如果你感觉视频更容易学习的话，它的高级版里就包含了视频。 The Python Challenge 如果你的编程生涯中从没做过这样的挑战，这可能会有点难度。但是配和上面介绍的那本书的话也不是很难，你应该尝试一下。它有33个关卡(谜题)，你可以用Python编程技巧解决。 几百万的人都在试着解决这个，即使你不能完成所有的关卡，你也会将学到很多新的东西，尤其是批判性思维和发散思维。你的大脑会过热，但这是在编程！ Learn Python Programming @ Codecademy 你可能看到许多“大牛”程序员骂这个网站，但那并不重要。我们想要做的是看看或者测试一门编程语言的基本语法是怎么执行的，以及调用函数时做了些什么，除了简单地输出‘Hello World!’。 在这个Codecademy的课程中你将会学到如何使用文件和循环，什么是函数以及他们能用来做什么。这些都是非常基础的，但是对初学者来说都是很好的东西。当需要帮助时有一个用来交流的论坛，但所有的东西都应该在你理解的范围之内。 你不需要安装任何工具，如果你想在你自己的电脑上重写一遍代码以便更好地理解它，你可能唯一需要的就是一个Notepad++编辑器。我就是这样做的，并且我向所有想学习编程的人都推荐Codecademy，不管是Python还是其他的语言。 Intro to Computer Science @ Udacity Udacity提供了一个很棒的免费课程，引你进入Python编程和学习关于搜索引擎的许多东西，以及如何编写你自己的小型网络爬虫。它的确是一个值得参与的课程，并且还提供了额外的指导和社区支持。 你可以报名成为付费学生得到导师的指导，并且可以在课程结束得到一个证书，或者你可以自己使用免费的课件学习，遗憾的是付费课堂的容量有限，所以你申请后需要加入名单等待。 它总共有11个课程，每一个都有讲解非常深入的文档。去它的官方主页查看更多的信息或者你想问的问题的答案。 Google’s Python Class Google它本身就被一大堆Python代码驱动着，只有他们提供社区支持并且愿意帮助其他人学习这门语言才更有意义。这是我曾经最喜欢看的指南和课程之一。它真的很详细，而且视频适合初学者，观看起来也很有趣。 去看几分钟它的第一堂课，看看你是否喜欢那个老师，然后决定是否开始学习Python!</description>
    </item>
    
    <item>
      <title>在windows 环境中搭建linux的学习环境！！！（对新手很重要）</title>
      <link>http://i-cooltea.github.io/posts/%E5%9C%A8windows-%E7%8E%AF%E5%A2%83%E4%B8%AD%E6%90%AD%E5%BB%BAlinux%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AF%B9%E6%96%B0%E6%89%8B%E5%BE%88%E9%87%8D%E8%A6%81/</link>
      <pubDate>Sat, 24 Feb 2018 07:08:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%9C%A8windows-%E7%8E%AF%E5%A2%83%E4%B8%AD%E6%90%AD%E5%BB%BAlinux%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AF%B9%E6%96%B0%E6%89%8B%E5%BE%88%E9%87%8D%E8%A6%81/</guid>
      <description>首先为什么要用虚拟机来搭建Linux的学习环境？？？ 因为如果在真实机来搭建Linux学习环境，一旦Linux出现了无法解决问题我将要花费大量的时间来解决（对于我们新手来说），而在虚拟机中出现无法解决的问题时，只需简单的重装比在真实机中更容易处理。（这是无数次痛苦的教训让我明白的）。其实虚拟机中学习与真实机中学习Linux是一样，对于我们新手不能将大量的时间来用来解决Linux中一些对新手来说比较难的问题。  比如之前我的真实机Linux出现了这样一个问题：实然Linux无法进入系统了，而且无法进入Linux的恢复模式，命令行模式。开机后光标一直在左上角闪个不停。百度等等两天无果。这样对于我们新手来说，不仅耽误Linux基础的学习，还会打击新手的学习信心。所以对新手来说，还是用虚拟机来学习Linux比较好，一旦遇到无法解决的问题，就放弃解决，重装系统吧！环境的搭建（windows中，毕竟对国人来说这个比较熟悉）1：在windows中安装好virtualbox,然后安装centos(也可以是其它linux)2：在windows中安装SecureCRT，这个软件是一个远程登录程序（具体介绍http://baike.so.com/doc/5411484.html）（对我来说是学习linux shell的神器，用过你就会知道的！）3：网络设置（让真实机与虚拟能同时上网），给虚拟机添加两个网卡。一个为nat网络，一个为仅主机网络（T）（一个用于上网，一个用于SecureCRT的连接） 直接上图。。。 这个用于securecrt的远程连接192.168.x.1（当然也可以是其它的网段） 设置虚拟机的ip地址 记住是设置eth1 （eth0用第一个网卡用的是nat方式连接的，eth1是第二个网卡用的是仅主机方式连接） 把虚拟机设置为192.168.59.x (同一网段59) 查看ip配置 用securecrt 来连接虚拟机中的linux 点击Quick Connect. 输入host name （虚拟机中linux的ip地址）username(用户名) 输入密码就可以登录了 登录后的画面： 如果按上面的设置不能成功登录系统则可能的原因是虚拟机中的Linux没有开启sshd 服务 （sudo service sshd start 即可） 2014年6月6日亲测有效 </description>
    </item>
    
    <item>
      <title>PHP常用正则表达式</title>
      <link>http://i-cooltea.github.io/posts/php%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 05 Jan 2018 08:02:12 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/php%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式   是一大利器,参数验证,数据采集等很多地方都用到. 许多程序设计语言都支持利用正则表达式进行字符串操作。平常写程序经常用到正则表达式,就整理一些常用的正则表达式分享一下!
 平时写程序经常要用正则表达式，下面是一些讲解和例子，仅供大家参考和修改使用：  &amp;ldquo;^\d+$&amp;ldquo; //非负整数（正整数 + 0）  &amp;ldquo;1[1-9][0-9]$&amp;ldquo; //正整数  &amp;ldquo;^((-\d+)|(0+))$&amp;ldquo; //非正整数（负整数 + 0）  &amp;ldquo;^-[0-9][1-9][0-9]$&amp;ldquo; //负整数  &amp;ldquo;^-?\d+$&amp;ldquo; //整数  &amp;ldquo;^\d+(.\d+)?$&amp;ldquo; //非负浮点数（正浮点数 + 0）  &amp;ldquo;^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$&amp;ldquo; //正浮点数  &amp;ldquo;^((-\d+(.\d+)?)|(0+(.0+)?))$&amp;ldquo; //非正浮点数（负浮点数 + 0）  &amp;ldquo;^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$&amp;ldquo; //负浮点数  &amp;ldquo;^(-?\d+)(.\d+)?$&amp;ldquo; //浮点数  &amp;ldquo;2+$&amp;ldquo; //由26个英文字母组成的字符串  &amp;ldquo;3+$&amp;ldquo; //由26个英文字母的大写组成的字符串  &amp;ldquo;4+$&amp;ldquo; //由26个英文字母的小写组成的字符串  &amp;ldquo;5+$&amp;ldquo; //由数字和26个英文字母组成的字符串  &amp;ldquo;^\w+$&amp;ldquo; //由数字、26个英文字母或者下划线组成的字符串  &amp;ldquo;6+(.[\w-]+)@[\w-]+(.[\w-]+)+$&amp;ldquo; //email地址  &amp;ldquo;7+://(\w+(-\w+))(.(\w+(-\w+)))(?\S)?$&amp;ldquo; //url  /^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-((0-2)|(3[0|1]))$/ // 年-月-日  /^((0([1-9]{1}))|(1[1|2]))/((0-2)|(3[0|1]))/(d{2}|d{4})$/ // 月/日/年  &amp;ldquo;^([w-.</description>
    </item>
    
    <item>
      <title>正则 - 元字符</title>
      <link>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E5%85%83%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Fri, 05 Jan 2018 08:02:12 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E5%85%83%E5%AD%97%E7%AC%A6/</guid>
      <description>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为： 字符  描述    将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，&amp;rsquo;n&amp;rsquo; 匹配字符 &amp;ldquo;n&amp;rdquo;。&amp;rsquo;\n&amp;rsquo; 匹配一个换行符。序列 &amp;lsquo;\&amp;rsquo; 匹配 &amp;ldquo;\&amp;rdquo; 而 &amp;ldquo;(&amp;rdquo; 则匹配 &amp;ldquo;(&amp;ldquo;。   ^  匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 &amp;lsquo;\n&amp;rsquo; 或 &amp;lsquo;\r&amp;rsquo; 之后的位置。   $  匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 &amp;lsquo;\n&amp;rsquo; 或 &amp;lsquo;\r&amp;rsquo; 之前的位置。   *  匹配前面的子表达式零次或多次。例如，zo* 能匹配 &amp;ldquo;z&amp;rdquo; 以及 &amp;ldquo;zoo&amp;rdquo;。* 等价于{0,}。   +  匹配前面的子表达式一次或多次。例如，&amp;rsquo;zo+&amp;rsquo; 能匹配 &amp;ldquo;zo&amp;rdquo; 以及 &amp;ldquo;zoo&amp;rdquo;，但不能匹配 &amp;ldquo;z&amp;rdquo;。+ 等价于 {1,}。   ?</description>
    </item>
    
    <item>
      <title>正则 - 匹配规则</title>
      <link>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</link>
      <pubDate>Fri, 05 Jan 2018 08:02:12 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</guid>
      <description>基本模式匹配 一切从最基本的开始。模式，是正则表达式最基本的元素，它们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。例如：
^once 这个模式包含一个特殊的字符^，表示该模式只匹配那些以once开头的字符串。例如该模式与字符串&amp;rdquo;once upon a time&amp;rdquo;匹配，与&amp;rdquo;There once was a man from NewYork&amp;rdquo;不匹配。正如如^符号表示开头一样，$符号用来匹配那些以给定模式结尾的字符串。
bucket$ 这个模式与&amp;rdquo;Who kept all of this cash in a bucket&amp;rdquo;匹配，与&amp;rdquo;buckets&amp;rdquo;不匹配。字符^和$同时使用时，表示精确匹配（字符串与模式一样）。例如：
^bucket$ 只匹配字符串&amp;rdquo;bucket&amp;rdquo;。如果一个模式不包括^和$，那么它与任何包含该模式的字符串匹配。例如：模式
once 与字符串
Thereonce was a man fromNewYorkWhokept all of his cash ina bucket. 是匹配的。
在该模式中的字母(o-n-c-e)是字面的字符，也就是说，他们表示该字母本身，数字也是一样的。其他一些稍微复杂的字符，如标点符号和白字符（空格、制表符等），要用到转义序列。所有的转义序列都用反斜杠()打头。制表符的转义序列是：\t。所以如果我们要检测一个字符串是否以制表符开头，可以用这个模式：
^\t  类似的，用\n表示&amp;rdquo;新行&amp;rdquo;，\r表示回车。其他的特殊符号，可以用在前面加上反斜杠，如反斜杠本身用\表示，句号.用.表示，以此类推。
字符簇 在INTERNET的程序中，正则表达式通常用来验证用户的输入。当用户提交一个FORM以后，要判断输入的电话号码、地址、EMAIL地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。
所以要用一种更自由的描述我们要的模式的办法，它就是字符簇。要建立一个表示所有元音字符的字符簇，就把所有的元音字符放在一个方括号里：
[AaEeIiOoUu] 这个模式与任何元音字符匹配，但只能表示一个字符。用连字号可以表示一个字符的范围，如：
[a-z]//匹配所有的小写字母 [A-Z]//匹配所有的大写字母 [a-zA-Z]//匹配所有的字母 [0-9]//匹配所有的数字 [0-9.-]//匹配所有的数字，句号和减号 [\f\r\t\n]//匹配所有的白字符 同样的，这些也只表示一个字符，这是一个非常重要的。如果要匹配一个由一个小写字母和一位数字组成的字符串，比如&amp;rdquo;z2&amp;rdquo;、&amp;rdquo;t6&amp;rdquo;或&amp;rdquo;g7&amp;rdquo;，但不是&amp;rdquo;ab2&amp;rdquo;、&amp;rdquo;r2d3&amp;rdquo; 或&amp;rdquo;b52&amp;rdquo;的话，用这个模式：
^[a-z][0-9]$ 尽管[a-z]代表26个字母的范围，但在这里它只能与第一个字符是小写字母的字符串匹配。
前面曾经提到^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用^是，它表示&amp;rdquo;非&amp;rdquo;或&amp;rdquo;排除&amp;rdquo;的意思，常常用来剔除某个字符。还用前面的例子，我们要求第一个字符不能是数字：
^[^0-9][0-9]$ 这个模式与&amp;rdquo;&amp;amp;5&amp;rdquo;、&amp;rdquo;g7&amp;rdquo;及&amp;rdquo;-2&amp;rdquo;是匹配的，但与&amp;rdquo;12&amp;rdquo;、&amp;rdquo;66&amp;rdquo;是不匹配的。下面是几个排除特定字符的例子：
[^a-z]//除了小写字母以外的所有字符 [^\\/\^]//除了()(/)(^)之外的所有字符 [^\&amp;rdquo;\&amp;rsquo;]//除了双引号(&amp;ldquo;)和单引号(&amp;lsquo;)之外的所有字符 特殊字符&amp;rdquo;.&amp;rdquo; (点，句号)在正则表达式中用来表示除了&amp;rdquo;新行&amp;rdquo;之外的所有字符。所以模式&amp;rdquo;^.5$&amp;ldquo;与任何两个字符的、以数字5结尾和以其他非&amp;rdquo;新行&amp;rdquo;字符开头的字符串匹配。模式&amp;rdquo;.&amp;ldquo;可以匹配任何字符串，除了空串和只包括一个&amp;rdquo;新行&amp;rdquo;的字符串。
PHP的正则表达式有一些内置的通用字符簇，列表如下：
字符簇  描述   [[:alpha:]]  任何字母   [[:digit:]]  任何数字   [[:alnum:]]  任何字母和数字   [[:space:]]  任何空白字符   [[:upper:]]  任何大写字母   [[:lower:]]  任何小写字母   [[:punct:]]  任何标点符号   [[:xdigit:]]  任何16进制的数字，相当于[0-9a-fA-F]     确定重复出现 到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。</description>
    </item>
    
    <item>
      <title>正则 - 语法</title>
      <link>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 05 Jan 2018 08:02:12 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E8%AF%AD%E6%B3%95/</guid>
      <description>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。 例如： runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。  runoob，可以匹配 runob、runoob、runoooooob 等， 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。  colou?r&amp;nbsp;可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。   构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。 正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为&amp;rdquo;元字符&amp;rdquo;）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。  普通字符 普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。
非打印字符 非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：
字符  描述   \cx  匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 &amp;lsquo;c&amp;rsquo; 字符。   \f  匹配一个换页符。等价于 \x0c 和 \cL。   \n  匹配一个换行符。等价于 \x0a 和 \cJ。   \r  匹配一个回车符。等价于 \x0d 和 \cM。   \s  匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。   \S  匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。   \t  匹配一个制表符。等价于 \x09 和 \cI。   \v  匹配一个垂直制表符。等价于 \x0b 和 \cK。     特殊字符 所谓特殊字符，就是一些有特殊含义的字符，如上面说的&amp;nbsp;runoob&amp;nbsp;中的&amp;nbsp;，简单的说就是表示任何字符串的意思。如果要查找字符串中的&amp;nbsp;&amp;nbsp;符号，则需要对&amp;nbsp;&amp;nbsp;进行转义，即在其前加一个&amp;nbsp;&amp;lt;/span&amp;gt;:&amp;nbsp;runo*ob&amp;nbsp;匹配 runo*ob。</description>
    </item>
    
    <item>
      <title>正则 - 运算符优先级</title>
      <link>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Fri, 05 Jan 2018 08:02:12 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E6%AD%A3%E5%88%99-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。 相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：
运算符  描述    转义符   (), (?:), (?=), []  圆括号和方括号   *, +, ?, {n}, {n,}, {n,m}  限定符   ^, $, \任何元字符、任何字符  定位点和序列（即：位置和顺序）   |  替换，&amp;rdquo;或&amp;rdquo;操作
字符具有高于替换运算符的优先级，使得&amp;rdquo;m|food&amp;rdquo;匹配&amp;rdquo;m&amp;rdquo;或&amp;rdquo;food&amp;rdquo;。若要匹配&amp;rdquo;mood&amp;rdquo;或&amp;rdquo;food&amp;rdquo;，请使用括号创建子表达式，从而产生&amp;rdquo;(m|f)ood&amp;rdquo;。</description>
    </item>
    
    <item>
      <title>常用 Git 命令清单</title>
      <link>http://i-cooltea.github.io/posts/%E5%B8%B8%E7%94%A8-git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</link>
      <pubDate>Sat, 28 Oct 2017 04:36:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/%E5%B8%B8%E7%94%A8-git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</guid>
      <description>每天使用 Git ，但是很多命令记不住。  一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。  &amp;nbsp;下面是我整理的常用Git 命令清单。几个专用名词的译名如下。
Workspace：工作区/o:p
Index / Stage：暂存区/o:p
Repository：仓库区（或本地仓库）/o:p
Remote：远程仓库/o:p
&amp;nbsp;
一、新建代码库&amp;nbsp;/o:p
# 在当前目录新建一个Git代码库
$ git init&amp;nbsp;
# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]&amp;nbsp;
# 下载一个项目和它的整个代码历史
$ git clone [url]&amp;nbsp;
 二、配置
&amp;nbsp;
Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。
&amp;nbsp;
# 显示当前的Git配置
$ git config --list&amp;nbsp;
# 编辑Git配置文件
$ git config -e [--global]&amp;nbsp;
# 设置提交代码时的用户信息
$ git config [--global] user.name &#34;[name]&#34;&amp;nbsp;
&amp;nbsp;
$ git config [--global] user.email &#34;[email address]&#34;&amp;nbsp;
 三、增加/删除文件
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>MVC设计思想</title>
      <link>http://i-cooltea.github.io/posts/mvc%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</link>
      <pubDate>Tue, 24 Oct 2017 15:28:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/mvc%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</guid>
      <description>MVC设计思想   MVC英文即Model-View-Controller，  这样一个应用被分成三个层——模型层、视图层、控制层。  使用这种设计的思想能够将复杂的程序 分解成各个小的模块,实现程序的解耦和提高程序的可扩展性        视图(View)    视图(View)代表用户交互界面，对于Web应用来说， 可以概括为HTML界面。随着应用的复杂性和规模性，  界面的处理也变得具有挑战性。一个应用可能有很多不同的视图，  MVC设计模式对于视图的处理仅限于视图上数据的采集和处理，以及用户的请求，而不包括在视图上的业务流程的处理。  模型(Model)    模型(Model)：就是业务流程/状态的处理以及业务规则的制定。业务流程的处理过程对其它层来  说是黑箱操作，对一个开发者来说，就可以专注于业务模型的设计。    业务模型还有一个很重要的模型那就是数据模型。数据模型主要指实体对象的数据 保存（持续化）。  比如将一张订单保存到数据库，从数据库获取订单。我们可以将这个模型单独列出,  所有有关数据库的操作只限制在该模型中。    控制(Controller)    控制(Controller)可以理解为从View和Model中间的桥梁.  用户接收请求, 将模型与视图匹配在一起，共同完成用户的请求。  划分控制层的作用也很明显，它清楚地告诉你，它就是一个分发器，选择什么样的模型，  选择什么样的视图,可以完成什么样的用户请求。控制层并不做任何的数据处理。    例如，用户点击一个连接，控制层接受请求后, 并不处理业务信息，它只把用户的信息传递给模型，  告诉模型做什么，选择符合要求的视图返回给用户。因此，一个模型可能对应多个视图，一个视图可  能对应多个模型。  模型、视图与控制器的分离，使得一个模型可以具有多个显示视图。如果用户通过某个视图的控制器改变了模型的数据，所有其它依赖于这些数据的视图都应反映到这些变化。因此，无论何时发生了何种数据变化，控制器都会将变化通知所有的视图，导致显示的更新。这实际上是一种模型的变化-传播机制。模型、视图、控制器三者之间的关系和各自的主要功能.      MVC的优点  大部分用过程语言比如ASP、PHP开发出来的Web应用，初始的开发模板就是混合层的数据编程。例如，直接向数据库发送请求并用HTML显示,开发速度往往比较快,但由于数据页面的分离不是很直接,因而很难体现出业务模型的样子或者模型的重用性。产品设计弹性力度很小，很难满足用户的变化性需求。MVC要求对应用分层，虽然要花费额外的工作，但产品的结构清晰，产品的应用通过模型可以得到更好地体现。      首先，最重要的是应该有多个视图对应一个模型的能力。在目前用户需求的快速变化下，可能有多种方式访问应用的要求。例如，订单模型可能有本系统的订单，也有网上订单，或者其他系统的订单，但对于订单的处理都是一样，也就是说订单的处理是一致的。按MVC设计模式，一个订单模型以及多个视图即可解决问题。这样减少了代码的复制，即减少了代码的维护量，一旦模型发生改变，也易于维护。    其次，由于模型返回的数据不带任何显示格式，因而这些模型也可直接应用于接口的使用。    再次，由于一个应用被分离为三层，因此有时改变其中的一层就能满足应用的改变。一个应用的业务流程或者业务规则的改变只需改动MVC的模型层- 控制层的概念也很有效，由于它把不同的模型和不同的视图组合在一起完成不同的请求，因此，控制层可以说是包含了用户请求权限的概念。    最后，它还有利于软件工程化管理。由于不同的层各司其职，每一层不同的应用具有某些相同的特征，有利于通过工程化、工具化产生管理程序代码。    MVC的不足  MVC的不足体现在以下几个方面：  （1）增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。  （2）视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。  （3）视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。  （4） 目前，一般高级的界面工具或构造器不支持MVC架构。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难。</description>
    </item>
    
    <item>
      <title> 使程序在Linux下后台运行 （关掉终端继续让程序运行的方法）</title>
      <link>http://i-cooltea.github.io/posts/-%E4%BD%BF%E7%A8%8B%E5%BA%8F%E5%9C%A8linux%E4%B8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%85%B3%E6%8E%89%E7%BB%88%E7%AB%AF%E7%BB%A7%E7%BB%AD%E8%AE%A9%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 18 Oct 2017 15:40:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/-%E4%BD%BF%E7%A8%8B%E5%BA%8F%E5%9C%A8linux%E4%B8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-%E5%85%B3%E6%8E%89%E7%BB%88%E7%AB%AF%E7%BB%A7%E7%BB%AD%E8%AE%A9%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>你是否遇到过这样的情况：从终端软件登录远程的Linux主机，将一堆很大的文件压缩为一个.tar.gz文件，连续压缩了半个小时还没有完成，这时，突然你断网了，你登录不上远程Linux主机了，那么前面的半个小时就会前功尽弃，你非常气愤…… 在Linux下，如果你要执行的shell命令耗时特别长，并且：（1）你的网络不稳定，随时可能断网；或者（2）你在执行了shell命令之后必须要关闭终端软件（例如SecureCRT）。 那么你就需要以脱离终端的方式在后台运行这个shell命令。 方法如下： （1）输入命令： nohup 你的shell命令 &amp;amp; （2）回车，使终端回到shell命令行； （3）输入exit命令退出终端：exit （4）现在可以关闭你的终端软件了，等过足够的时间，让你的shell命令执行完了再上去看结果吧。 其中，nohup命令可以让你的shell命令忽略SIGHUP信号，即可以使之脱离终端运行；“&amp;amp;”可以让你的命令在后台运行。 以脱离终端的方式在后台运行shell命令有这样几个好处：只要你执行过了命令，那么你的网络中断不会对你有任何影响，并且你就可以关闭终端软件了。   一、为什么要使程序在后台执行 我们计算的程序都是周期很长的，通常要几个小时甚至一个星期。我们用的环境是用putty远程连接到日本Linux服务器。所以使程序在后台跑有以下三个好处： 1：我们这边是否关机不影响日本那边的程序运行。（不会像以前那样，我们这网络一断开，或一关机，程序就断掉或找不到数据，跑了几天的程序只能重头再来，很是烦恼） 2：不影响计算效率 2：让程序在后台跑后，不会占据终端，我们可以用终端做别的事情。 二、怎么样使程序在后台执行 方法有很多，这里主要列举两种。假如我们有程序pso.cpp,通过编译后产生可执行文件pso，我们要使pso在linux服务器后台执行。当客户端关机后重新登入服务器后继续查看本来在终端输出的运行结果。（假设操作都在当前目录下） 方法1在终端输入命令： &amp;nbsp;# ./pso &amp;gt; pso.file 2&amp;gt;&amp;amp;1 &amp;amp;&amp;nbsp; 解释：将pso直接放在后台运行，并把终端输出存放在当前目录下的pso.file文件中。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当客户端关机后重新登陆服务器后，直接查看pso.file文件就可看执行结果（命 令：#cat pso.file）。 &amp;nbsp;&amp;nbsp; 方法2在终端输入命令： # nohup&amp;nbsp; ./pso &amp;gt; pso.file 2&amp;gt;&amp;amp;1 &amp;amp; 解释：nohup就是不挂起的意思，将pso直接放在后台运行，并把终端输出存放在当前 目录下的pso.file文件中。当客户端关机后重新登陆服务器后，直接查看pso.file 文件就可看执行结果（命令：#cat pso.file）。 三、常用任务管理命令 # jobs&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //查看任务，返回任务编号n和进程号 # bg&amp;nbsp; %n&amp;nbsp;&amp;nbsp; //将编号为n的任务转后台运行 # fg&amp;nbsp; %n&amp;nbsp;&amp;nbsp; //将编号为n的任务转前台运行 # ctrl+z&amp;nbsp;&amp;nbsp;&amp;nbsp; //挂起当前任务 # ctrl+c&amp;nbsp;&amp;nbsp;&amp;nbsp; //结束当前任务 &amp;nbsp; 注：如果要使在前天执行任务放到后台运行，则先要用ctrl+z挂起该任务，然后用bg使之后台执行。 &amp;nbsp; 附： &amp;nbsp; 在Linux中，如果要让进程在后台运行，一般情况下，我们在命令后面加上&amp;amp;即可，实际上，这样是将命令放入到一个作业队列中了：</description>
    </item>
    
    <item>
      <title></title>
      <link>http://i-cooltea.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/archives/</guid>
      <description>title: &amp;ldquo;归档&amp;rdquo; description: Android资深工程师 ，Go和Java打杂师，《Android Gradle权威指南》作者，Android官方技术文档译者 type: archives</description>
    </item>
    
  </channel>
</rss>