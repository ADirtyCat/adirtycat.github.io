<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thinkphp on i-cooltea的博客</title>
    <link>http://i-cooltea.github.io/tags/thinkphp/</link>
    <description>Recent content in thinkphp on i-cooltea的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 04 Mar 2018 13:36:00 +0000</lastBuildDate>
    
	<atom:link href="http://i-cooltea.github.io/tags/thinkphp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>thinkphp5 开发的那点事</title>
      <link>http://i-cooltea.github.io/posts/thinkphp5-%E5%BC%80%E5%8F%91%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</link>
      <pubDate>Sun, 04 Mar 2018 13:36:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/thinkphp5-%E5%BC%80%E5%8F%91%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</guid>
      <description>知识点1：* 应用程序的流程图。对于一般的框架是这样的。* index.php文件作为前端控制器，初始化运行CodeIgniter所需的基本资源；  Router检查http请求，以确定如何处理请求；  如果存在缓存文件，将直接输出到浏览器，不用走下面正常的系统流程；  在加载应用程序控制器之前，对http请求以及任何用户提交的数据进行安全检查；  控制器加载模型、核心类库、辅助函数以及其他所有处理请求所需的资源  最后一步，渲染视图并发送至浏览器，如果开启了缓存，视图会先被缓存起来用于后续请求。&amp;nbsp;注释：前端控制器属于设计模式的一种，它用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。   知识点2：对MVC设计模式的思考&amp;nbsp;MVC 是一种 用于将应用程序的逻辑层和表现层分离出来的软件方法。在实践中，由于这种分离 所以你的页面中只包含很少的 PHP 脚本。&amp;nbsp;* 模型：代表数据结构。通常来说，模型类将包含帮助你对数据库进行增删改查的方法。可以说包含了DOA层和模型层。&amp;nbsp;* 视图：是要展现给用户的信息。一个视图通常就是一个网页，但是在CI中，一个视图也可以是一部分页面(例如页头、页尾)，它也可以是一个RSS页面，或者其他任何类型的页面。(表现层中的模板层)&amp;nbsp;* 控制器：是模型、视图以及其他任何处理http请求所必须的资源的中介，并生成网页。
知识点3：tp5开发中的错误与调试、日志&amp;nbsp;如果异步ajax访问tp5，不会返回trace信息。&amp;nbsp;项目开发的时候，出现错误在所难免，最大的困惑在于发现问题所在，其次才是如何解决问题。因此懂得如何调试和跟踪问题非常之关键。&amp;nbsp;总的来说有：trace信息（右下角）、错误页面（能解决80%的错误）、断点调试（dump，halt，trace控制台输出）、日志分析
学习框架需要掌握的一些概念&amp;nbsp;*&amp;nbsp;LAMP是基于Linux、Apache、Mysql和php的开放资源网络开发平台，也就是web平台，其中的php有时候用Perl或Python去替换。Linux是开发系统，Apache是最通用的网络服务器，mysql是带有网络管理附加工具的关系型数据库，php是流行的对象脚本语言。php包含了多数其他语言的优秀特性来使得它的网络开发更加有效。&amp;nbsp;我喜欢使用WAMPServer作为win7下的集成环境。&amp;nbsp;*&amp;nbsp;OOP，面向对象编程是一种计算机编程架构，OOP的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。&amp;nbsp;为了实现整体运算，每个对象都能够接收信息、处理数据和向其他对象发送信息。OOP主要有以下的概念和组件：&amp;nbsp;* 组件：数据和功能一起在运行着的计算机程序中形成的单元，也就是多个对象组合在一起，向外提供相同功能的组合体。组件在OOP计算机程序中是模块和结构化的基础。&amp;nbsp;* 抽象性：对信息主要方面关注的能力。&amp;nbsp;* 封装、继承和多态，这三种特性在书本上已经讲的不厌其烦了。[坏笑]&amp;nbsp;* ORM：(object/relation mapping)对象-关系映射，是随着面向对象的软件开发方法发展而产生的。==面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级环境中永久存放数据的主流数据存储系统。对象和关系数据是也为视图的两种表现形式，业务在内存中表现为对象，在数据库中表现为关系数据库。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系==，也就是代码中的对象和数据库中的数据之间，需要一个转化的桥梁，这个桥梁就是ORM。&amp;nbsp;* CURD：它代表了对数据的基本原子操作：增、删、改、查。
ActivRecord：可以简单理解为ORM层的一种实现方式，它遵循标准的ORM模型：表映射为记录，记录映射到对象，字段映射到对象的属性。它能够很大程度的快速实现模型的操作，而且简单易懂。 ActiveRecord的主要思想是： 每个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录，通常表的每个字段在类中都有对应的field(属性)  ActiveRecord同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即CURD  ActiveRecord是一种领域模型(Domain Model),封装了部分业务逻辑   ActiveRecord比较适用于： 业务逻辑比较简单，当你的类基本上和数据库中的表一一对应时，ActiveRecord是非常方便的，即你的业务逻辑大多数是对表单操作  当发生跨表的操作时，往往会配合使用事务脚本，把跨表事务提升到事务脚本中  ActiveRecord最大优点是简单、直观。一个类包括数据访问和业务逻辑。如果配合代码生成器使用就更方便了。这些优点是ActiveRecord特别适合WEB快速开发。    CBD架构模式&amp;nbsp;核心+行为+驱动 核心(Core)：就是框架的核心代码，不可缺少的东西，thinkphp这个框架就是基于MVC的开发框架。  行为(Bahevior)：行为在thinkphp架构中起到了去足轻重的作用，在系统核心之上，设置了很多标签扩展位，而每个标签位置可以依次执行各自的独立行为。行为扩展就此诞生，而且很多系统功能也是通过内置的行为扩展完成的，所有的行为扩展都是可替换和增加的，由此形成了底层框架的可组装的基础。  驱动(Driver)：数据库驱动、缓存驱动、标签库驱动和模板引擎驱动，以及外置的类扩展。    单一入口&amp;nbsp;通常是指一个项目或者应用具有一个统一(但并不一定是唯一)的入口文件，也就是一个项目的所有功能操作都是通过这个入口文件进行的，并且入口文件是执行的第一步。&amp;nbsp;单一入口的好处是控制比较灵活，因为拦截方便，类是如一些权限控制、用户登录方面的判断和操作可以统一处理了。 欢迎转载！！！</description>
    </item>
    
    <item>
      <title> thinkphp5 Model 功能总结</title>
      <link>http://i-cooltea.github.io/posts/-thinkphp5-model-%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 27 Feb 2018 15:07:00 +0000</pubDate>
      
      <guid>http://i-cooltea.github.io/posts/-thinkphp5-model-%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</guid>
      <description>简介  tp5的model只做业务层操作，不做具体的链接数据库sql操作。  think\db\Connection.php做链接数据库操作  think\db\Builder.php做创建sql操作  think\db\Query.php做数据CURD操作    功能清单  数据自动完成  自动写入时间戳  时间字段自动格式化输出字段  字段验证器  自动关联写入  只读字段  隐藏字段  事件回调  软删除  类型转换    功能详情  1. 数据自动完成   //设置自动完成的字段，支持键值对数组和索引数组   //新增和更新时都会使用  //如：[&amp;lsquo;name&amp;rsquo;=&amp;gt;&amp;lsquo;zhangsan&amp;rsquo;,&amp;lsquo;sex&amp;rsquo;=&amp;gt;&amp;lsquo;男&amp;rsquo;]// [&amp;lsquo;name&amp;rsquo;,&amp;lsquo;sex&amp;rsquo;]  protected$auto= [];   //只在新增数据的时候使用 
 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;$insert&amp;lt;/span&amp;gt; = []; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//更新 自动完成列表&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt; //只在更新数据的时候使用&amp;lt;/span&amp;gt; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;white-space:pre;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;white-space:pre;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;$update&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; = []; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;white-space:pre;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//用来标记当前操作被修改的字段&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt; //如 [&#39;name&#39;,&#39;sex&#39;]&amp;lt;/span&amp;gt; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;white-space:pre;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;white-space:pre;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;$change&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; = []; &amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;code class=&amp;quot;language-php hljs has-numbering hljs&amp;quot; style=&amp;quot;display:block;padding:0px;background-image:initial;background-position:initial;background-size:initial;background-repeat:initial;background-attachment:initial;background-origin:initial;background-clip:initial;box-sizing:border-box;font-family:Consolas, Inconsolata, Courier, monospace;white-space:pre;border-radius:4px;line-height:22px;overflow-x:auto;word-wrap:normal;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//依赖方法,model类会自动调用解析auto数组&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-comment&amp;quot; style=&amp;quot;color:#880000;box-sizing:border-box;&amp;quot;&amp;gt;//我们只需配置auto数组即可&amp;lt;/span&amp;gt; &amp;lt;/code&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;white-space:pre;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;white-space:pre;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;color:#000088;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot; style=&amp;quot;box-sizing:border-box;color:#009900;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;autoCompleteData&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;color:#4F4F4F;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-variable&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;$auto&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt; = [])&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-function&amp;quot; style=&amp;quot;box-sizing:border-box;&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;white-space:pre;&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;/p&amp;gt;   在model中设置完auto字段后在更新或新增的时候首先会判断auto中设置的字段是否存在于被更新的字段($this-&amp;gt;change)中  如果存在则不用auto里设置的字段和值  如果不存在则将auto里设置的字段和值添加到this−&amp;gt;data中并把该字段新增到this-&amp;gt;change中。  如果auto是索引数组，也就是只设置了字段名，没有设置子字段值，这是就会根据字段名去$this-&amp;gt;data中查询该字段值，并添加的到要更新的属性数组中去。  新增数据的方法是create, 修改数据的方法是update,批量新增和修改的方法是saveAll,这几个方法的最终实现都是调用的save方法  saveAll方法批量新增和修改，并不是组合sql语句，而是开启事务，然后调用save方法，一条一条添加和修改，最后提交事务。  在更新操作中，model会自动检查data的所有字段的值是否被更改，只会跟新被更改过得字段的值。没被更改的则被忽略。  insert、update的功能和auto的功能类似，只不过auto是不管是新增数据和是更新数据都会使用，而insert值针对新增，update只针对更新。如果设置了相同的属性，insert和update的则会覆盖auto中的字段。    2.</description>
    </item>
    
  </channel>
</rss>